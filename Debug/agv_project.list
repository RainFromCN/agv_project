
agv_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f34  08009f34  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f3c  08009f3c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f3c  08009f3c  00019f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f0  20000078  08009fbc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004668  08009fbc  00024668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002224c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000495a  00000000  00000000  000422f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017e8  00000000  00000000  00046c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  00048438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028f31  00000000  00000000  000499e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000162c6  00000000  00000000  00072919  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e65bd  00000000  00000000  00088bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016f19c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f0  00000000  00000000  0016f218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009c48 	.word	0x08009c48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08009c48 	.word	0x08009c48

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b972 	b.w	8000e38 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	4688      	mov	r8, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14b      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4615      	mov	r5, r2
 8000b7e:	d967      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0720 	rsb	r7, r2, #32
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b92:	4095      	lsls	r5, r2
 8000b94:	ea47 0803 	orr.w	r8, r7, r3
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba4:	fa1f fc85 	uxth.w	ip, r5
 8000ba8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18eb      	adds	r3, r5, r3
 8000bba:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bbe:	f080 811b 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8118 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bc8:	3f02      	subs	r7, #2
 8000bca:	442b      	add	r3, r5
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be0:	45a4      	cmp	ip, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	192c      	adds	r4, r5, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8107 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bee:	45a4      	cmp	ip, r4
 8000bf0:	f240 8104 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	442c      	add	r4, r5
 8000bf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfc:	eba4 040c 	sub.w	r4, r4, ip
 8000c00:	2700      	movs	r7, #0
 8000c02:	b11e      	cbz	r6, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0xbe>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80eb 	beq.w	8000df2 <__udivmoddi4+0x286>
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c22:	4638      	mov	r0, r7
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	fab3 f783 	clz	r7, r3
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d147      	bne.n	8000cc2 <__udivmoddi4+0x156>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xd0>
 8000c36:	4282      	cmp	r2, r0
 8000c38:	f200 80fa 	bhi.w	8000e30 <__udivmoddi4+0x2c4>
 8000c3c:	1a84      	subs	r4, r0, r2
 8000c3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	4698      	mov	r8, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e0      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000c4a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c4e:	e7dd      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xe8>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f040 808f 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5e:	1b49      	subs	r1, r1, r5
 8000c60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c64:	fa1f f885 	uxth.w	r8, r5
 8000c68:	2701      	movs	r7, #1
 8000c6a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	fb08 f10c 	mul.w	r1, r8, ip
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x14c>
 8000ca8:	192c      	adds	r4, r5, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x14a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80b6 	bhi.w	8000e22 <__udivmoddi4+0x2b6>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e79f      	b.n	8000c02 <__udivmoddi4+0x96>
 8000cc2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cc6:	40bb      	lsls	r3, r7
 8000cc8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ccc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cd8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce0:	4325      	orrs	r5, r4
 8000ce2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ce6:	0c2c      	lsrs	r4, r5, #16
 8000ce8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cec:	fa1f fa8e 	uxth.w	sl, lr
 8000cf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cfe:	fa00 f107 	lsl.w	r1, r0, r7
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1e 0303 	adds.w	r3, lr, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d0c:	f080 8087 	bcs.w	8000e1e <__udivmoddi4+0x2b2>
 8000d10:	429c      	cmp	r4, r3
 8000d12:	f240 8084 	bls.w	8000e1e <__udivmoddi4+0x2b2>
 8000d16:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1a:	4473      	add	r3, lr
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	b2ad      	uxth	r5, r5
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d2c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d30:	45a2      	cmp	sl, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1e 0404 	adds.w	r4, lr, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	d26b      	bcs.n	8000e16 <__udivmoddi4+0x2aa>
 8000d3e:	45a2      	cmp	sl, r4
 8000d40:	d969      	bls.n	8000e16 <__udivmoddi4+0x2aa>
 8000d42:	3802      	subs	r0, #2
 8000d44:	4474      	add	r4, lr
 8000d46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	eba4 040a 	sub.w	r4, r4, sl
 8000d52:	454c      	cmp	r4, r9
 8000d54:	46c2      	mov	sl, r8
 8000d56:	464b      	mov	r3, r9
 8000d58:	d354      	bcc.n	8000e04 <__udivmoddi4+0x298>
 8000d5a:	d051      	beq.n	8000e00 <__udivmoddi4+0x294>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d069      	beq.n	8000e34 <__udivmoddi4+0x2c8>
 8000d60:	ebb1 050a 	subs.w	r5, r1, sl
 8000d64:	eb64 0403 	sbc.w	r4, r4, r3
 8000d68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d6c:	40fd      	lsrs	r5, r7
 8000d6e:	40fc      	lsrs	r4, r7
 8000d70:	ea4c 0505 	orr.w	r5, ip, r5
 8000d74:	e9c6 5400 	strd	r5, r4, [r6]
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e747      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f703 	lsr.w	r7, r0, r3
 8000d84:	4095      	lsls	r5, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d92:	4338      	orrs	r0, r7
 8000d94:	0c01      	lsrs	r1, r0, #16
 8000d96:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9a:	fa1f f885 	uxth.w	r8, r5
 8000d9e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb07 f308 	mul.w	r3, r7, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	fa04 f402 	lsl.w	r4, r4, r2
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x256>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000db8:	d22f      	bcs.n	8000e1a <__udivmoddi4+0x2ae>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d92d      	bls.n	8000e1a <__udivmoddi4+0x2ae>
 8000dbe:	3f02      	subs	r7, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	b281      	uxth	r1, r0
 8000dc6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dca:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb00 f308 	mul.w	r3, r0, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x27e>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de0:	d217      	bcs.n	8000e12 <__udivmoddi4+0x2a6>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d915      	bls.n	8000e12 <__udivmoddi4+0x2a6>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df0:	e73b      	b.n	8000c6a <__udivmoddi4+0xfe>
 8000df2:	4637      	mov	r7, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e709      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df8:	4607      	mov	r7, r0
 8000dfa:	e6e7      	b.n	8000bcc <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fb      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000e00:	4541      	cmp	r1, r8
 8000e02:	d2ab      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e04:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e08:	eb69 020e 	sbc.w	r2, r9, lr
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	4613      	mov	r3, r2
 8000e10:	e7a4      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e12:	4660      	mov	r0, ip
 8000e14:	e7e9      	b.n	8000dea <__udivmoddi4+0x27e>
 8000e16:	4618      	mov	r0, r3
 8000e18:	e795      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1a:	4667      	mov	r7, ip
 8000e1c:	e7d1      	b.n	8000dc2 <__udivmoddi4+0x256>
 8000e1e:	4681      	mov	r9, r0
 8000e20:	e77c      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	442c      	add	r4, r5
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0x14c>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	442b      	add	r3, r5
 8000e2e:	e72f      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e30:	4638      	mov	r0, r7
 8000e32:	e708      	b.n	8000c46 <__udivmoddi4+0xda>
 8000e34:	4637      	mov	r7, r6
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0xa0>

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 fe68 	bl	8001b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f007 ff76 	bl	8008d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f007 ff48 	bl	8008d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	200040bc 	.word	0x200040bc

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200040bc 	.word	0x200040bc

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_Delay+0x40>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0ed      	b.n	80010f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f004 fd7a 	bl	8005a1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0202 	bic.w	r2, r2, #2
 8000f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f38:	f7ff ffb6 	bl	8000ea8 <HAL_GetTick>
 8000f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3e:	e012      	b.n	8000f66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f40:	f7ff ffb2 	bl	8000ea8 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d90b      	bls.n	8000f66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0c5      	b.n	80010f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f84:	f7ff ff90 	bl	8000ea8 <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f8a:	e012      	b.n	8000fb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f8c:	f7ff ff8c 	bl	8000ea8 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d90b      	bls.n	8000fb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2205      	movs	r2, #5
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e09f      	b.n	80010f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0e5      	beq.n	8000f8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e1b      	ldrb	r3, [r3, #24]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7e5b      	ldrb	r3, [r3, #25]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d108      	bne.n	8001004 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e007      	b.n	8001014 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001012:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e9b      	ldrb	r3, [r3, #26]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0220 	bic.w	r2, r2, #32
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7edb      	ldrb	r3, [r3, #27]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0210 	bic.w	r2, r2, #16
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0210 	orr.w	r2, r2, #16
 8001066:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7f1b      	ldrb	r3, [r3, #28]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0208 	orr.w	r2, r2, #8
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e007      	b.n	8001092 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0208 	bic.w	r2, r2, #8
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7f5b      	ldrb	r3, [r3, #29]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0204 	orr.w	r2, r2, #4
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e007      	b.n	80010bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0204 	bic.w	r2, r2, #4
 80010ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	ea42 0103 	orr.w	r1, r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	1e5a      	subs	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001112:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001114:	7cfb      	ldrb	r3, [r7, #19]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d003      	beq.n	8001122 <HAL_CAN_ConfigFilter+0x26>
 800111a:	7cfb      	ldrb	r3, [r7, #19]
 800111c:	2b02      	cmp	r3, #2
 800111e:	f040 80be 	bne.w	800129e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001122:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001124:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800113c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	431a      	orrs	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2201      	movs	r2, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	401a      	ands	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d123      	bne.n	80011cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3248      	adds	r2, #72	; 0x48
 80011ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011c2:	6979      	ldr	r1, [r7, #20]
 80011c4:	3348      	adds	r3, #72	; 0x48
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d122      	bne.n	800121a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	431a      	orrs	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3248      	adds	r2, #72	; 0x48
 80011fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001210:	6979      	ldr	r1, [r7, #20]
 8001212:	3348      	adds	r3, #72	; 0x48
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	401a      	ands	r2, r3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001234:	e007      	b.n	8001246 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	431a      	orrs	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001260:	e007      	b.n	8001272 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	431a      	orrs	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	431a      	orrs	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001290:	f023 0201 	bic.w	r2, r3, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e006      	b.n	80012ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
  }
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	371c      	adds	r7, #28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40006400 	.word	0x40006400

080012bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d12e      	bne.n	800132e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fdde 	bl	8000ea8 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012ee:	e012      	b.n	8001316 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f0:	f7ff fdda 	bl	8000ea8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d90b      	bls.n	8001316 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e012      	b.n	800133c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e5      	bne.n	80012f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e006      	b.n	800133c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
  }
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001358:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <HAL_CAN_AddTxMessage+0x2c>
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b02      	cmp	r3, #2
 800136c:	f040 80b8 	bne.w	80014e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10a      	bne.n	8001390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001380:	2b00      	cmp	r3, #0
 8001382:	d105      	bne.n	8001390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a0 	beq.w	80014d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d907      	bls.n	80013b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e09e      	b.n	80014ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	409a      	lsls	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	6809      	ldr	r1, [r1, #0]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3318      	adds	r3, #24
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	e00f      	b.n	80013fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013ee:	68f9      	ldr	r1, [r7, #12]
 80013f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3318      	adds	r3, #24
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3318      	adds	r3, #24
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	440b      	add	r3, r1
 800140e:	3304      	adds	r3, #4
 8001410:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	7d1b      	ldrb	r3, [r3, #20]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d111      	bne.n	800143e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3318      	adds	r3, #24
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3318      	adds	r3, #24
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3307      	adds	r3, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	061a      	lsls	r2, r3, #24
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3306      	adds	r3, #6
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3305      	adds	r3, #5
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4313      	orrs	r3, r2
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	3204      	adds	r2, #4
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4610      	mov	r0, r2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	ea43 0200 	orr.w	r2, r3, r0
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	440b      	add	r3, r1
 8001470:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3303      	adds	r3, #3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	061a      	lsls	r2, r3, #24
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3302      	adds	r3, #2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	4313      	orrs	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4610      	mov	r0, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	6811      	ldr	r1, [r2, #0]
 800149c:	ea43 0200 	orr.w	r2, r3, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3318      	adds	r3, #24
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	f043 0201 	orr.w	r2, r3, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3318      	adds	r3, #24
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e00e      	b.n	80014ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e006      	b.n	80014ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001510:	7afb      	ldrb	r3, [r7, #11]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d002      	beq.n	800151c <HAL_CAN_IsTxMessagePending+0x22>
 8001516:	7afb      	ldrb	r3, [r7, #11]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d10b      	bne.n	8001534 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	069b      	lsls	r3, r3, #26
 8001526:	401a      	ands	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	069b      	lsls	r3, r3, #26
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001530:	2301      	movs	r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d002      	beq.n	8001560 <HAL_CAN_ActivateNotification+0x1e>
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d109      	bne.n	8001574 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6959      	ldr	r1, [r3, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	e006      	b.n	8001582 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b08a      	sub	sp, #40	; 0x28
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d07c      	beq.n	80016ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f97d 	bl	80018f0 <HAL_CAN_TxMailbox0CompleteCallback>
 80015f6:	e016      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e00c      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e002      	b.n	8001626 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f983 	bl	800192c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d024      	beq.n	800167a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f95d 	bl	8001904 <HAL_CAN_TxMailbox1CompleteCallback>
 800164a:	e016      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	e00c      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e002      	b.n	800167a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f963 	bl	8001940 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d024      	beq.n	80016ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f93d 	bl	8001918 <HAL_CAN_TxMailbox2CompleteCallback>
 800169e:	e016      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e00c      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	e002      	b.n	80016ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f943 	bl	8001954 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2210      	movs	r2, #16
 80016f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f92a 	bl	8001968 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f004 fab3 	bl	8005c98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00c      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d007      	beq.n	8001756 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00b      	beq.n	8001778 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f90c 	bl	8001990 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	d009      	beq.n	8001796 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f8f3 	bl	800197c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00b      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2210      	movs	r2, #16
 80017b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8f6 	bl	80019a4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d006      	beq.n	80017da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2208      	movs	r2, #8
 80017d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f8ef 	bl	80019b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d075      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06c      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03d      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d038      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185c:	2b30      	cmp	r3, #48	; 0x30
 800185e:	d017      	beq.n	8001890 <HAL_CAN_IRQHandler+0x302>
 8001860:	2b30      	cmp	r3, #48	; 0x30
 8001862:	d804      	bhi.n	800186e <HAL_CAN_IRQHandler+0x2e0>
 8001864:	2b10      	cmp	r3, #16
 8001866:	d009      	beq.n	800187c <HAL_CAN_IRQHandler+0x2ee>
 8001868:	2b20      	cmp	r3, #32
 800186a:	d00c      	beq.n	8001886 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800186c:	e024      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800186e:	2b50      	cmp	r3, #80	; 0x50
 8001870:	d018      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x316>
 8001872:	2b60      	cmp	r3, #96	; 0x60
 8001874:	d01b      	beq.n	80018ae <HAL_CAN_IRQHandler+0x320>
 8001876:	2b40      	cmp	r3, #64	; 0x40
 8001878:	d00f      	beq.n	800189a <HAL_CAN_IRQHandler+0x30c>
            break;
 800187a:	e01d      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001884:	e018      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800188e:	e013      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001898:	e00e      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018a2:	e009      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018ac:	e004      	b.n	80018b8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80018b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699a      	ldr	r2, [r3, #24]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2204      	movs	r2, #4
 80018ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f872 	bl	80019cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff4c 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b62:	f7ff ff61 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	6978      	ldr	r0, [r7, #20]
 8001b6e:	f7ff ffb1 	bl	8001ad4 <NVIC_EncodePriority>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff80 	bl	8001a80 <__NVIC_SetPriority>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff54 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff f97a 	bl	8000ea8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e099      	b.n	8001cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be0:	e00f      	b.n	8001c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff f961 	bl	8000ea8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d908      	bls.n	8001c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e078      	b.n	8001cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e8      	bne.n	8001be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_DMA_Init+0x158>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4313      	orrs	r3, r2
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f023 0307 	bic.w	r3, r3, #7
 8001c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d117      	bne.n	8001cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f9e9 	bl	8002080 <DMA_CheckFifoParam>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d008      	beq.n	8001cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e016      	b.n	8001cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f9a0 	bl	8002014 <DMA_CalcBaseAndBitshift>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	223f      	movs	r2, #63	; 0x3f
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	f010803f 	.word	0xf010803f

08001d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d0c:	4b92      	ldr	r3, [pc, #584]	; (8001f58 <HAL_DMA_IRQHandler+0x258>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_DMA_IRQHandler+0x25c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01a      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2201      	movs	r2, #1
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d012      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2204      	movs	r2, #4
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0204 	orr.w	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2210      	movs	r2, #16
 8001dde:	409a      	lsls	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03c      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d024      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
 8001e2e:	e01f      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2220      	movs	r2, #32
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 808e 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8086 	beq.w	8001f9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2220      	movs	r2, #32
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d136      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0216 	bic.w	r2, r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_DMA_IRQHandler+0x1da>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0208 	bic.w	r2, r2, #8
 8001ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	223f      	movs	r2, #63	; 0x3f
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07d      	beq.n	800200a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
        }
        return;
 8001f16:	e078      	b.n	800200a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d030      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e02b      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d027      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	4798      	blx	r3
 8001f56:	e022      	b.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0210 	bic.w	r2, r2, #16
 8001f7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d032      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d307      	bcc.n	8001fe6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f2      	bne.n	8001fca <HAL_DMA_IRQHandler+0x2ca>
 8001fe4:	e000      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fe6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e000      	b.n	800200c <HAL_DMA_IRQHandler+0x30c>
        return;
 800200a:	bf00      	nop
    }
  }
}
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	3b10      	subs	r3, #16
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <DMA_CalcBaseAndBitshift+0x64>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d909      	bls.n	8002056 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
 8002054:	e007      	b.n	8002066 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	aaaaaaab 	.word	0xaaaaaaab
 800207c:	08009eb0 	.word	0x08009eb0

08002080 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11f      	bne.n	80020da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d855      	bhi.n	800214c <DMA_CheckFifoParam+0xcc>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <DMA_CheckFifoParam+0x28>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	080020b9 	.word	0x080020b9
 80020b4:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d045      	beq.n	8002150 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c8:	e042      	b.n	8002150 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d2:	d13f      	bne.n	8002154 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e03c      	b.n	8002154 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	d121      	bne.n	8002128 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d836      	bhi.n	8002158 <DMA_CheckFifoParam+0xd8>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x70>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002107 	.word	0x08002107
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e02f      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002116:	e021      	b.n	800215c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002120:	d11e      	bne.n	8002160 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002126:	e01b      	b.n	8002160 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <DMA_CheckFifoParam+0xb4>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d003      	beq.n	800213a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002132:	e018      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e015      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00e      	beq.n	8002164 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      break;
 800214a:	e00b      	b.n	8002164 <DMA_CheckFifoParam+0xe4>
      break;
 800214c:	bf00      	nop
 800214e:	e00a      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002150:	bf00      	nop
 8002152:	e008      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002154:	bf00      	nop
 8002156:	e006      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002158:	bf00      	nop
 800215a:	e004      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 800215c:	bf00      	nop
 800215e:	e002      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;   
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 8002164:	bf00      	nop
    }
  } 
  
  return status; 
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e177      	b.n	8002480 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8166 	bne.w	800247a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d00b      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	2b11      	cmp	r3, #17
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d130      	bne.n	8002230 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002204:	2201      	movs	r2, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 0201 	and.w	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0xfc>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d123      	bne.n	80022b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80c0 	beq.w	800247a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_GPIO_Init+0x320>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a64      	ldr	r2, [pc, #400]	; (8002494 <HAL_GPIO_Init+0x320>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b62      	ldr	r3, [pc, #392]	; (8002494 <HAL_GPIO_Init+0x320>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_GPIO_Init+0x324>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_GPIO_Init+0x328>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d037      	beq.n	80023b2 <HAL_GPIO_Init+0x23e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x32c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d031      	beq.n	80023ae <HAL_GPIO_Init+0x23a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <HAL_GPIO_Init+0x330>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d02b      	beq.n	80023aa <HAL_GPIO_Init+0x236>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_GPIO_Init+0x334>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x232>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a53      	ldr	r2, [pc, #332]	; (80024ac <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x22e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x22a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x226>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x222>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x21e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_GPIO_Init+0x34c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x21a>
 800238a:	2309      	movs	r3, #9
 800238c:	e012      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 800238e:	230a      	movs	r3, #10
 8002390:	e010      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 8002392:	2308      	movs	r3, #8
 8002394:	e00e      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 8002396:	2307      	movs	r3, #7
 8002398:	e00c      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 800239a:	2306      	movs	r3, #6
 800239c:	e00a      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 800239e:	2305      	movs	r3, #5
 80023a0:	e008      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 80023a6:	2303      	movs	r3, #3
 80023a8:	e004      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e002      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x240>
 80023b2:	2300      	movs	r3, #0
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	f002 0203 	and.w	r2, r2, #3
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	4093      	lsls	r3, r2
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c4:	4934      	ldr	r1, [pc, #208]	; (8002498 <HAL_GPIO_Init+0x324>)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <HAL_GPIO_Init+0x350>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_GPIO_Init+0x350>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_GPIO_Init+0x350>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_GPIO_Init+0x350>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	f67f ae84 	bls.w	8002190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002488:	bf00      	nop
 800248a:	3724      	adds	r7, #36	; 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40021400 	.word	0x40021400
 80024b4:	40021800 	.word	0x40021800
 80024b8:	40021c00 	.word	0x40021c00
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40022400 	.word	0x40022400
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_PWREx_EnableOverDrive+0x94>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002528:	f7fe fcbe 	bl	8000ea8 <HAL_GetTick>
 800252c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800252e:	e009      	b.n	8002544 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002530:	f7fe fcba 	bl	8000ea8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253e:	d901      	bls.n	8002544 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e01f      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d1ee      	bne.n	8002530 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7fe fca6 	bl	8000ea8 <HAL_GetTick>
 800255c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800255e:	e009      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002560:	f7fe fca2 	bl	8000ea8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256e:	d901      	bls.n	8002574 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e007      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002580:	d1ee      	bne.n	8002560 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	420e0040 	.word	0x420e0040
 8002594:	40007000 	.word	0x40007000
 8002598:	420e0044 	.word	0x420e0044

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e25b      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4ba3      	ldr	r3, [pc, #652]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4ba0      	ldr	r3, [pc, #640]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b9d      	ldr	r3, [pc, #628]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b99      	ldr	r3, [pc, #612]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e236      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b91      	ldr	r3, [pc, #580]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a90      	ldr	r2, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a87      	ldr	r2, [pc, #540]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a83      	ldr	r2, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a80      	ldr	r2, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fc28 	bl	8000ea8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fc24 	bl	8000ea8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1fb      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fc14 	bl	8000ea8 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fc10 	bl	8000ea8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1e7      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b62      	ldr	r3, [pc, #392]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1bb      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b56      	ldr	r3, [pc, #344]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4952      	ldr	r1, [pc, #328]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <HAL_RCC_OscConfig+0x2b0>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fbc9 	bl	8000ea8 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fbc5 	bl	8000ea8 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e19c      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4940      	ldr	r1, [pc, #256]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x2b0>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fba8 	bl	8000ea8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fba4 	bl	8000ea8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e17b      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d030      	beq.n	80027e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_RCC_OscConfig+0x2b4>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fb88 	bl	8000ea8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fb84 	bl	8000ea8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e15b      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e015      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x2b4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fb71 	bl	8000ea8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fb6d 	bl	8000ea8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e144      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a0 	beq.w	8002936 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x2b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d121      	bne.n	8002876 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCC_OscConfig+0x2b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_RCC_OscConfig+0x2b8>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe fb33 	bl	8000ea8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e011      	b.n	800286a <HAL_RCC_OscConfig+0x2ce>
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
 8002854:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fb26 	bl	8000ea8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0fd      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b81      	ldr	r3, [pc, #516]	; (8002a70 <HAL_RCC_OscConfig+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d106      	bne.n	800288c <HAL_RCC_OscConfig+0x2f0>
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a7c      	ldr	r2, [pc, #496]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x32a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x312>
 8002894:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	4a76      	ldr	r2, [pc, #472]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6713      	str	r3, [r2, #112]	; 0x70
 80028a0:	4b74      	ldr	r3, [pc, #464]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a73      	ldr	r2, [pc, #460]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x32a>
 80028ae:	4b71      	ldr	r3, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b6e      	ldr	r3, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a6d      	ldr	r2, [pc, #436]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7fe faeb 	bl	8000ea8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fae7 	bl	8000ea8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0bc      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x33a>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fad5 	bl	8000ea8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fad1 	bl	8000ea8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0a6      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8092 	beq.w	8002a64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002940:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d05c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d141      	bne.n	80029d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe faa5 	bl	8000ea8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe faa1 	bl	8000ea8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e078      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002974:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	019b      	lsls	r3, r3, #6
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	4933      	ldr	r1, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe fa7a 	bl	8000ea8 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fa76 	bl	8000ea8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04d      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x41c>
 80029d6:	e045      	b.n	8002a64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fa63 	bl	8000ea8 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe fa5f 	bl	8000ea8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e036      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f8:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x44a>
 8002a04:	e02e      	b.n	8002a64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e029      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_RCC_OscConfig+0x4d8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d115      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10d      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40007000 	.word	0x40007000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470060 	.word	0x42470060

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f99c 	bl	8000ea8 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7fe f998 	bl	8000ea8 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f82d 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f006 f89a 	bl	8008d5c <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08009eb8 	.word	0x08009eb8
 8002c40:	20000010 	.word	0x20000010
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCC_EnableCSS+0x14>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	4247004c 	.word	0x4247004c

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d007      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x32>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d008      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x38>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 808d 	bne.w	8002da6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c8e:	60bb      	str	r3, [r7, #8]
       break;
 8002c90:	e08c      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c94:	60bb      	str	r3, [r7, #8]
      break;
 8002c96:	e089      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d023      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	ea03 0501 	and.w	r5, r3, r1
 8002cc4:	ea04 0602 	and.w	r6, r4, r2
 8002cc8:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cca:	fb02 f106 	mul.w	r1, r2, r6
 8002cce:	2200      	movs	r2, #0
 8002cd0:	fb02 f205 	mul.w	r2, r2, r5
 8002cd4:	440a      	add	r2, r1
 8002cd6:	493a      	ldr	r1, [pc, #232]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd8:	fba5 0101 	umull	r0, r1, r5, r1
 8002cdc:	1853      	adds	r3, r2, r1
 8002cde:	4619      	mov	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f04f 0400 	mov.w	r4, #0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	f7fd ff27 	bl	8000b3c <__aeabi_uldivmod>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e049      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	ea03 0501 	and.w	r5, r3, r1
 8002d0c:	ea04 0602 	and.w	r6, r4, r2
 8002d10:	4629      	mov	r1, r5
 8002d12:	4632      	mov	r2, r6
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	f04f 0400 	mov.w	r4, #0
 8002d1c:	0154      	lsls	r4, r2, #5
 8002d1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d22:	014b      	lsls	r3, r1, #5
 8002d24:	4619      	mov	r1, r3
 8002d26:	4622      	mov	r2, r4
 8002d28:	1b49      	subs	r1, r1, r5
 8002d2a:	eb62 0206 	sbc.w	r2, r2, r6
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	f04f 0400 	mov.w	r4, #0
 8002d36:	0194      	lsls	r4, r2, #6
 8002d38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d3c:	018b      	lsls	r3, r1, #6
 8002d3e:	1a5b      	subs	r3, r3, r1
 8002d40:	eb64 0402 	sbc.w	r4, r4, r2
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	00e2      	lsls	r2, r4, #3
 8002d4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d52:	00d9      	lsls	r1, r3, #3
 8002d54:	460b      	mov	r3, r1
 8002d56:	4614      	mov	r4, r2
 8002d58:	195b      	adds	r3, r3, r5
 8002d5a:	eb44 0406 	adc.w	r4, r4, r6
 8002d5e:	f04f 0100 	mov.w	r1, #0
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	02a2      	lsls	r2, r4, #10
 8002d68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d6c:	0299      	lsls	r1, r3, #10
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4614      	mov	r4, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	4621      	mov	r1, r4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	f7fd fedc 	bl	8000b3c <__aeabi_uldivmod>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	3301      	adds	r3, #1
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	60bb      	str	r3, [r7, #8]
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002da8:	60bb      	str	r3, [r7, #8]
      break;
 8002daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dac:	68bb      	ldr	r3, [r7, #8]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	00b71b00 	.word	0x00b71b00

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000010 	.word	0x20000010

08002ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de4:	4601      	mov	r1, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4a03      	ldr	r2, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08009ec8 	.word	0x08009ec8

08002e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e08:	f7ff ffdc 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	08009ec8 	.word	0x08009ec8

08002e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	220f      	movs	r2, #15
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_GetClockConfig+0x5c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_RCC_GetClockConfig+0x60>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40023c00 	.word	0x40023c00

08002e90 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d104      	bne.n	8002eaa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002ea0:	f000 f80a 	bl	8002eb8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	701a      	strb	r2, [r3, #0]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	4002380e 	.word	0x4002380e

08002eb8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e056      	b.n	8002f86 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f005 febe 	bl	8008c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	ea42 0103 	orr.w	r1, r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0104 	and.w	r1, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b08c      	sub	sp, #48	; 0x30
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x26>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e18a      	b.n	80032ca <HAL_SPI_TransmitReceive+0x33c>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fbc:	f7fd ff74 	bl	8000ea8 <HAL_GetTick>
 8002fc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d00f      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x70>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe4:	d107      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_SPI_TransmitReceive+0x68>
 8002fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ffc:	e15b      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x82>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x82>
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003016:	e14e      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b04      	cmp	r3, #4
 8003022:	d003      	beq.n	800302c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2205      	movs	r2, #5
 8003028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	887a      	ldrh	r2, [r7, #2]
 8003042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d007      	beq.n	8003080 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003088:	d178      	bne.n	800317c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_TransmitReceive+0x10a>
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d166      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030bc:	e053      	b.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d11b      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x176>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x176>
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d113      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	1c9a      	adds	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d119      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x1b8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d014      	beq.n	8003146 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	b292      	uxth	r2, r2
 8003128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	1c9a      	adds	r2, r3, #2
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003146:	f7fd feaf 	bl	8000ea8 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003152:	429a      	cmp	r2, r3
 8003154:	d807      	bhi.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
 8003156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d003      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003164:	e0a7      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1a6      	bne.n	80030be <HAL_SPI_TransmitReceive+0x130>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1a1      	bne.n	80030be <HAL_SPI_TransmitReceive+0x130>
 800317a:	e07c      	b.n	8003276 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_TransmitReceive+0x1fc>
 8003184:	8b7b      	ldrh	r3, [r7, #26]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d16b      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b0:	e057      	b.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11c      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d114      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d119      	bne.n	800323c <HAL_SPI_TransmitReceive+0x2ae>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d014      	beq.n	800323c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003238:	2301      	movs	r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800323c:	f7fd fe34 	bl	8000ea8 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003248:	429a      	cmp	r2, r3
 800324a:	d803      	bhi.n	8003254 <HAL_SPI_TransmitReceive+0x2c6>
 800324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <HAL_SPI_TransmitReceive+0x2cc>
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003260:	e029      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1a2      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x224>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d19d      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f894 	bl	80033a8 <SPI_EndRxTxTransaction>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003292:	e010      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	e000      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80032b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	4613      	mov	r3, r2
 80032e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e2:	e04c      	b.n	800337e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d048      	beq.n	800337e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80032ec:	f7fd fddc 	bl	8000ea8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d902      	bls.n	8003302 <SPI_WaitFlagStateUntilTimeout+0x30>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d13d      	bne.n	800337e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d111      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	d004      	beq.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d107      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003348:	d10f      	bne.n	800336a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e00f      	b.n	800339e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d1a3      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <SPI_EndRxTxTransaction+0x7c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <SPI_EndRxTxTransaction+0x80>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0d5b      	lsrs	r3, r3, #21
 80033c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d2:	d112      	bne.n	80033fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2200      	movs	r2, #0
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff ff77 	bl	80032d2 <SPI_WaitFlagStateUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00f      	b.n	800341a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3b01      	subs	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003410:	2b80      	cmp	r3, #128	; 0x80
 8003412:	d0f2      	beq.n	80033fa <SPI_EndRxTxTransaction+0x52>
 8003414:	e000      	b.n	8003418 <SPI_EndRxTxTransaction+0x70>
        break;
 8003416:	bf00      	nop
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000010 	.word	0x20000010
 8003428:	165e9f81 	.word	0x165e9f81

0800342c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e01d      	b.n	800347a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f815 	bl	8003482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f000 f968 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d122      	bne.n	800353a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0202 	mvn.w	r2, #2
 800350a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8ee 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 8003526:	e005      	b.n	8003534 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8e0 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8f1 	bl	8003716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d122      	bne.n	800358e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d11b      	bne.n	800358e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0204 	mvn.w	r2, #4
 800355e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8c4 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 800357a:	e005      	b.n	8003588 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f8b6 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f8c7 	bl	8003716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d122      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11b      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0208 	mvn.w	r2, #8
 80035b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f89a 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 80035ce:	e005      	b.n	80035dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f88c 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f89d 	bl	8003716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d122      	bne.n	8003636 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d11b      	bne.n	8003636 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0210 	mvn.w	r2, #16
 8003606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2208      	movs	r2, #8
 800360c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f870 	bl	8003702 <HAL_TIM_IC_CaptureCallback>
 8003622:	e005      	b.n	8003630 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f862 	bl	80036ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f873 	bl	8003716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0201 	mvn.w	r2, #1
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f004 fb3b 	bl	8007cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f903 	bl	8003894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d10e      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f838 	bl	800372a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f06f 0220 	mvn.w	r2, #32
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8cd 	bl	8003880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a40      	ldr	r2, [pc, #256]	; (8003854 <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d00f      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <TIM_Base_SetConfig+0x118>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3c      	ldr	r2, [pc, #240]	; (800385c <TIM_Base_SetConfig+0x11c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <TIM_Base_SetConfig+0x120>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <TIM_Base_SetConfig+0x124>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d108      	bne.n	8003792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <TIM_Base_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d027      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <TIM_Base_SetConfig+0x118>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d023      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <TIM_Base_SetConfig+0x11c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01f      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <TIM_Base_SetConfig+0x120>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <TIM_Base_SetConfig+0x124>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d017      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <TIM_Base_SetConfig+0x128>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <TIM_Base_SetConfig+0x12c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00f      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <TIM_Base_SetConfig+0x130>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a25      	ldr	r2, [pc, #148]	; (8003874 <TIM_Base_SetConfig+0x134>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <TIM_Base_SetConfig+0x138>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <TIM_Base_SetConfig+0x13c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <TIM_Base_SetConfig+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0xf8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <TIM_Base_SetConfig+0x124>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	615a      	str	r2, [r3, #20]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40010400 	.word	0x40010400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	40001800 	.word	0x40001800
 8003878:	40001c00 	.word	0x40001c00
 800387c:	40002000 	.word	0x40002000

08003880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e03f      	b.n	800393a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f005 fbf8 	bl	80090c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f90b 	bl	8003b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	f040 8083 	bne.w	8003a6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Transmit+0x2e>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e07b      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_UART_Transmit+0x40>
 800397e:	2302      	movs	r3, #2
 8003980:	e074      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2221      	movs	r2, #33	; 0x21
 8003994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003998:	f7fd fa86 	bl	8000ea8 <HAL_GetTick>
 800399c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039b2:	e042      	b.n	8003a3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d122      	bne.n	8003a12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f84c 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e042      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3302      	adds	r3, #2
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	e017      	b.n	8003a3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	e013      	b.n	8003a3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f829 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e01f      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	60ba      	str	r2, [r7, #8]
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1b7      	bne.n	80039b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f810 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e006      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a84:	e02c      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d028      	beq.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	f7fd fa08 	bl	8000ea8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d21d      	bcs.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e00f      	b.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d0c3      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b4a:	f023 030c 	bic.w	r3, r3, #12
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	f040 818b 	bne.w	8003e90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4ac1      	ldr	r2, [pc, #772]	; (8003e84 <UART_SetConfig+0x37c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d005      	beq.n	8003b90 <UART_SetConfig+0x88>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4abf      	ldr	r2, [pc, #764]	; (8003e88 <UART_SetConfig+0x380>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	f040 80bd 	bne.w	8003d0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b90:	f7ff f938 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8003b94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	461d      	mov	r5, r3
 8003b9a:	f04f 0600 	mov.w	r6, #0
 8003b9e:	46a8      	mov	r8, r5
 8003ba0:	46b1      	mov	r9, r6
 8003ba2:	eb18 0308 	adds.w	r3, r8, r8
 8003ba6:	eb49 0409 	adc.w	r4, r9, r9
 8003baa:	4698      	mov	r8, r3
 8003bac:	46a1      	mov	r9, r4
 8003bae:	eb18 0805 	adds.w	r8, r8, r5
 8003bb2:	eb49 0906 	adc.w	r9, r9, r6
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bca:	4688      	mov	r8, r1
 8003bcc:	4691      	mov	r9, r2
 8003bce:	eb18 0005 	adds.w	r0, r8, r5
 8003bd2:	eb49 0106 	adc.w	r1, r9, r6
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	461d      	mov	r5, r3
 8003bdc:	f04f 0600 	mov.w	r6, #0
 8003be0:	196b      	adds	r3, r5, r5
 8003be2:	eb46 0406 	adc.w	r4, r6, r6
 8003be6:	461a      	mov	r2, r3
 8003be8:	4623      	mov	r3, r4
 8003bea:	f7fc ffa7 	bl	8000b3c <__aeabi_uldivmod>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4ba5      	ldr	r3, [pc, #660]	; (8003e8c <UART_SetConfig+0x384>)
 8003bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	461d      	mov	r5, r3
 8003c04:	f04f 0600 	mov.w	r6, #0
 8003c08:	46a9      	mov	r9, r5
 8003c0a:	46b2      	mov	sl, r6
 8003c0c:	eb19 0309 	adds.w	r3, r9, r9
 8003c10:	eb4a 040a 	adc.w	r4, sl, sl
 8003c14:	4699      	mov	r9, r3
 8003c16:	46a2      	mov	sl, r4
 8003c18:	eb19 0905 	adds.w	r9, r9, r5
 8003c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c34:	4689      	mov	r9, r1
 8003c36:	4692      	mov	sl, r2
 8003c38:	eb19 0005 	adds.w	r0, r9, r5
 8003c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	461d      	mov	r5, r3
 8003c46:	f04f 0600 	mov.w	r6, #0
 8003c4a:	196b      	adds	r3, r5, r5
 8003c4c:	eb46 0406 	adc.w	r4, r6, r6
 8003c50:	461a      	mov	r2, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	f7fc ff72 	bl	8000b3c <__aeabi_uldivmod>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	; (8003e8c <UART_SetConfig+0x384>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a86      	ldr	r2, [pc, #536]	; (8003e8c <UART_SetConfig+0x384>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c80:	4498      	add	r8, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	461d      	mov	r5, r3
 8003c86:	f04f 0600 	mov.w	r6, #0
 8003c8a:	46a9      	mov	r9, r5
 8003c8c:	46b2      	mov	sl, r6
 8003c8e:	eb19 0309 	adds.w	r3, r9, r9
 8003c92:	eb4a 040a 	adc.w	r4, sl, sl
 8003c96:	4699      	mov	r9, r3
 8003c98:	46a2      	mov	sl, r4
 8003c9a:	eb19 0905 	adds.w	r9, r9, r5
 8003c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cb6:	4689      	mov	r9, r1
 8003cb8:	4692      	mov	sl, r2
 8003cba:	eb19 0005 	adds.w	r0, r9, r5
 8003cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	461d      	mov	r5, r3
 8003cc8:	f04f 0600 	mov.w	r6, #0
 8003ccc:	196b      	adds	r3, r5, r5
 8003cce:	eb46 0406 	adc.w	r4, r6, r6
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	f7fc ff31 	bl	8000b3c <__aeabi_uldivmod>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <UART_SetConfig+0x384>)
 8003ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2164      	movs	r1, #100	; 0x64
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <UART_SetConfig+0x384>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 0207 	and.w	r2, r3, #7
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4442      	add	r2, r8
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e26f      	b.n	80041ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0a:	f7ff f867 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8003d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	461d      	mov	r5, r3
 8003d14:	f04f 0600 	mov.w	r6, #0
 8003d18:	46a8      	mov	r8, r5
 8003d1a:	46b1      	mov	r9, r6
 8003d1c:	eb18 0308 	adds.w	r3, r8, r8
 8003d20:	eb49 0409 	adc.w	r4, r9, r9
 8003d24:	4698      	mov	r8, r3
 8003d26:	46a1      	mov	r9, r4
 8003d28:	eb18 0805 	adds.w	r8, r8, r5
 8003d2c:	eb49 0906 	adc.w	r9, r9, r6
 8003d30:	f04f 0100 	mov.w	r1, #0
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d44:	4688      	mov	r8, r1
 8003d46:	4691      	mov	r9, r2
 8003d48:	eb18 0005 	adds.w	r0, r8, r5
 8003d4c:	eb49 0106 	adc.w	r1, r9, r6
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	461d      	mov	r5, r3
 8003d56:	f04f 0600 	mov.w	r6, #0
 8003d5a:	196b      	adds	r3, r5, r5
 8003d5c:	eb46 0406 	adc.w	r4, r6, r6
 8003d60:	461a      	mov	r2, r3
 8003d62:	4623      	mov	r3, r4
 8003d64:	f7fc feea 	bl	8000b3c <__aeabi_uldivmod>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <UART_SetConfig+0x384>)
 8003d70:	fba3 2302 	umull	r2, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	f04f 0600 	mov.w	r6, #0
 8003d82:	46a9      	mov	r9, r5
 8003d84:	46b2      	mov	sl, r6
 8003d86:	eb19 0309 	adds.w	r3, r9, r9
 8003d8a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8e:	4699      	mov	r9, r3
 8003d90:	46a2      	mov	sl, r4
 8003d92:	eb19 0905 	adds.w	r9, r9, r5
 8003d96:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003daa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dae:	4689      	mov	r9, r1
 8003db0:	4692      	mov	sl, r2
 8003db2:	eb19 0005 	adds.w	r0, r9, r5
 8003db6:	eb4a 0106 	adc.w	r1, sl, r6
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	f04f 0600 	mov.w	r6, #0
 8003dc4:	196b      	adds	r3, r5, r5
 8003dc6:	eb46 0406 	adc.w	r4, r6, r6
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	f7fc feb5 	bl	8000b3c <__aeabi_uldivmod>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <UART_SetConfig+0x384>)
 8003dda:	fba3 1302 	umull	r1, r3, r3, r2
 8003dde:	095b      	lsrs	r3, r3, #5
 8003de0:	2164      	movs	r1, #100	; 0x64
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	3332      	adds	r3, #50	; 0x32
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <UART_SetConfig+0x384>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dfa:	4498      	add	r8, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	461d      	mov	r5, r3
 8003e00:	f04f 0600 	mov.w	r6, #0
 8003e04:	46a9      	mov	r9, r5
 8003e06:	46b2      	mov	sl, r6
 8003e08:	eb19 0309 	adds.w	r3, r9, r9
 8003e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e10:	4699      	mov	r9, r3
 8003e12:	46a2      	mov	sl, r4
 8003e14:	eb19 0905 	adds.w	r9, r9, r5
 8003e18:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e30:	4689      	mov	r9, r1
 8003e32:	4692      	mov	sl, r2
 8003e34:	eb19 0005 	adds.w	r0, r9, r5
 8003e38:	eb4a 0106 	adc.w	r1, sl, r6
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	461d      	mov	r5, r3
 8003e42:	f04f 0600 	mov.w	r6, #0
 8003e46:	196b      	adds	r3, r5, r5
 8003e48:	eb46 0406 	adc.w	r4, r6, r6
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	f7fc fe74 	bl	8000b3c <__aeabi_uldivmod>
 8003e54:	4603      	mov	r3, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <UART_SetConfig+0x384>)
 8003e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <UART_SetConfig+0x384>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 0207 	and.w	r2, r3, #7
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4442      	add	r2, r8
 8003e80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e82:	e1b2      	b.n	80041ea <UART_SetConfig+0x6e2>
 8003e84:	40011000 	.word	0x40011000
 8003e88:	40011400 	.word	0x40011400
 8003e8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4ad7      	ldr	r2, [pc, #860]	; (80041f4 <UART_SetConfig+0x6ec>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d005      	beq.n	8003ea6 <UART_SetConfig+0x39e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4ad6      	ldr	r2, [pc, #856]	; (80041f8 <UART_SetConfig+0x6f0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	f040 80d1 	bne.w	8004048 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea6:	f7fe ffad 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 8003eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	469a      	mov	sl, r3
 8003eb0:	f04f 0b00 	mov.w	fp, #0
 8003eb4:	46d0      	mov	r8, sl
 8003eb6:	46d9      	mov	r9, fp
 8003eb8:	eb18 0308 	adds.w	r3, r8, r8
 8003ebc:	eb49 0409 	adc.w	r4, r9, r9
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	46a1      	mov	r9, r4
 8003ec4:	eb18 080a 	adds.w	r8, r8, sl
 8003ec8:	eb49 090b 	adc.w	r9, r9, fp
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ee0:	4688      	mov	r8, r1
 8003ee2:	4691      	mov	r9, r2
 8003ee4:	eb1a 0508 	adds.w	r5, sl, r8
 8003ee8:	eb4b 0609 	adc.w	r6, fp, r9
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	f04f 0400 	mov.w	r4, #0
 8003efe:	0094      	lsls	r4, r2, #2
 8003f00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f04:	008b      	lsls	r3, r1, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	4623      	mov	r3, r4
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	4631      	mov	r1, r6
 8003f0e:	f7fc fe15 	bl	8000b3c <__aeabi_uldivmod>
 8003f12:	4603      	mov	r3, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	461a      	mov	r2, r3
 8003f18:	4bb8      	ldr	r3, [pc, #736]	; (80041fc <UART_SetConfig+0x6f4>)
 8003f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	469b      	mov	fp, r3
 8003f28:	f04f 0c00 	mov.w	ip, #0
 8003f2c:	46d9      	mov	r9, fp
 8003f2e:	46e2      	mov	sl, ip
 8003f30:	eb19 0309 	adds.w	r3, r9, r9
 8003f34:	eb4a 040a 	adc.w	r4, sl, sl
 8003f38:	4699      	mov	r9, r3
 8003f3a:	46a2      	mov	sl, r4
 8003f3c:	eb19 090b 	adds.w	r9, r9, fp
 8003f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f58:	4689      	mov	r9, r1
 8003f5a:	4692      	mov	sl, r2
 8003f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f60:	eb4c 060a 	adc.w	r6, ip, sl
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	f04f 0400 	mov.w	r4, #0
 8003f76:	0094      	lsls	r4, r2, #2
 8003f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f7c:	008b      	lsls	r3, r1, #2
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	4628      	mov	r0, r5
 8003f84:	4631      	mov	r1, r6
 8003f86:	f7fc fdd9 	bl	8000b3c <__aeabi_uldivmod>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b9a      	ldr	r3, [pc, #616]	; (80041fc <UART_SetConfig+0x6f4>)
 8003f92:	fba3 1302 	umull	r1, r3, r3, r2
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2164      	movs	r1, #100	; 0x64
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	3332      	adds	r3, #50	; 0x32
 8003fa4:	4a95      	ldr	r2, [pc, #596]	; (80041fc <UART_SetConfig+0x6f4>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb0:	4498      	add	r8, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	469b      	mov	fp, r3
 8003fb6:	f04f 0c00 	mov.w	ip, #0
 8003fba:	46d9      	mov	r9, fp
 8003fbc:	46e2      	mov	sl, ip
 8003fbe:	eb19 0309 	adds.w	r3, r9, r9
 8003fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fc6:	4699      	mov	r9, r3
 8003fc8:	46a2      	mov	sl, r4
 8003fca:	eb19 090b 	adds.w	r9, r9, fp
 8003fce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fe6:	4689      	mov	r9, r1
 8003fe8:	4692      	mov	sl, r2
 8003fea:	eb1b 0509 	adds.w	r5, fp, r9
 8003fee:	eb4c 060a 	adc.w	r6, ip, sl
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	0094      	lsls	r4, r2, #2
 8004006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400a:	008b      	lsls	r3, r1, #2
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	4628      	mov	r0, r5
 8004012:	4631      	mov	r1, r6
 8004014:	f7fc fd92 	bl	8000b3c <__aeabi_uldivmod>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	461a      	mov	r2, r3
 800401e:	4b77      	ldr	r3, [pc, #476]	; (80041fc <UART_SetConfig+0x6f4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a72      	ldr	r2, [pc, #456]	; (80041fc <UART_SetConfig+0x6f4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4442      	add	r2, r8
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e0d0      	b.n	80041ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe fec8 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 800404c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	469a      	mov	sl, r3
 8004052:	f04f 0b00 	mov.w	fp, #0
 8004056:	46d0      	mov	r8, sl
 8004058:	46d9      	mov	r9, fp
 800405a:	eb18 0308 	adds.w	r3, r8, r8
 800405e:	eb49 0409 	adc.w	r4, r9, r9
 8004062:	4698      	mov	r8, r3
 8004064:	46a1      	mov	r9, r4
 8004066:	eb18 080a 	adds.w	r8, r8, sl
 800406a:	eb49 090b 	adc.w	r9, r9, fp
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800407a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800407e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004082:	4688      	mov	r8, r1
 8004084:	4691      	mov	r9, r2
 8004086:	eb1a 0508 	adds.w	r5, sl, r8
 800408a:	eb4b 0609 	adc.w	r6, fp, r9
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	f04f 0400 	mov.w	r4, #0
 80040a0:	0094      	lsls	r4, r2, #2
 80040a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040a6:	008b      	lsls	r3, r1, #2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	4631      	mov	r1, r6
 80040b0:	f7fc fd44 	bl	8000b3c <__aeabi_uldivmod>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b50      	ldr	r3, [pc, #320]	; (80041fc <UART_SetConfig+0x6f4>)
 80040bc:	fba3 2302 	umull	r2, r3, r3, r2
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	469b      	mov	fp, r3
 80040ca:	f04f 0c00 	mov.w	ip, #0
 80040ce:	46d9      	mov	r9, fp
 80040d0:	46e2      	mov	sl, ip
 80040d2:	eb19 0309 	adds.w	r3, r9, r9
 80040d6:	eb4a 040a 	adc.w	r4, sl, sl
 80040da:	4699      	mov	r9, r3
 80040dc:	46a2      	mov	sl, r4
 80040de:	eb19 090b 	adds.w	r9, r9, fp
 80040e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040fa:	4689      	mov	r9, r1
 80040fc:	4692      	mov	sl, r2
 80040fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004102:	eb4c 060a 	adc.w	r6, ip, sl
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4619      	mov	r1, r3
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	0094      	lsls	r4, r2, #2
 800411a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	461a      	mov	r2, r3
 8004122:	4623      	mov	r3, r4
 8004124:	4628      	mov	r0, r5
 8004126:	4631      	mov	r1, r6
 8004128:	f7fc fd08 	bl	8000b3c <__aeabi_uldivmod>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	461a      	mov	r2, r3
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <UART_SetConfig+0x6f4>)
 8004134:	fba3 1302 	umull	r1, r3, r3, r2
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	2164      	movs	r1, #100	; 0x64
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	3332      	adds	r3, #50	; 0x32
 8004146:	4a2d      	ldr	r2, [pc, #180]	; (80041fc <UART_SetConfig+0x6f4>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004152:	4498      	add	r8, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	469b      	mov	fp, r3
 8004158:	f04f 0c00 	mov.w	ip, #0
 800415c:	46d9      	mov	r9, fp
 800415e:	46e2      	mov	sl, ip
 8004160:	eb19 0309 	adds.w	r3, r9, r9
 8004164:	eb4a 040a 	adc.w	r4, sl, sl
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	eb19 090b 	adds.w	r9, r9, fp
 8004170:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004188:	4689      	mov	r9, r1
 800418a:	4692      	mov	sl, r2
 800418c:	eb1b 0509 	adds.w	r5, fp, r9
 8004190:	eb4c 060a 	adc.w	r6, ip, sl
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	0094      	lsls	r4, r2, #2
 80041a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	4631      	mov	r1, r6
 80041b6:	f7fc fcc1 	bl	8000b3c <__aeabi_uldivmod>
 80041ba:	4603      	mov	r3, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	461a      	mov	r2, r3
 80041c0:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <UART_SetConfig+0x6f4>)
 80041c2:	fba3 1302 	umull	r1, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2164      	movs	r1, #100	; 0x64
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	; 0x32
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <UART_SetConfig+0x6f4>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4442      	add	r2, r8
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	e7ff      	b.n	80041ea <UART_SetConfig+0x6e2>
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f4:	40011000 	.word	0x40011000
 80041f8:	40011400 	.word	0x40011400
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	2b84      	cmp	r3, #132	; 0x84
 8004214:	d005      	beq.n	8004222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3303      	adds	r3, #3
 8004220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004234:	f000 fada 	bl	80047ec <vTaskStartScheduler>
  
  return osOK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}

0800423e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800423e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004240:	b089      	sub	sp, #36	; 0x24
 8004242:	af04      	add	r7, sp, #16
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <osThreadCreate+0x54>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01c      	beq.n	8004292 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685c      	ldr	r4, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681d      	ldr	r5, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691e      	ldr	r6, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffc8 	bl	8004200 <makeFreeRtosPriority>
 8004270:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800427a:	9202      	str	r2, [sp, #8]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	9100      	str	r1, [sp, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4632      	mov	r2, r6
 8004284:	4629      	mov	r1, r5
 8004286:	4620      	mov	r0, r4
 8004288:	f000 f8ed 	bl	8004466 <xTaskCreateStatic>
 800428c:	4603      	mov	r3, r0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e01c      	b.n	80042cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685c      	ldr	r4, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429e:	b29e      	uxth	r6, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ffaa 	bl	8004200 <makeFreeRtosPriority>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4632      	mov	r2, r6
 80042ba:	4629      	mov	r1, r5
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 f92c 	bl	800451a <xTaskCreate>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d001      	beq.n	80042cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042cc:	68fb      	ldr	r3, [r7, #12]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <osDelay+0x16>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e000      	b.n	80042ee <osDelay+0x18>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa48 	bl	8004784 <vTaskDelay>
  
  return osOK;
 80042f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0208 	add.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 0208 	add.w	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d103      	bne.n	80043c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e00c      	b.n	80043da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3308      	adds	r3, #8
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e002      	b.n	80043ce <vListInsert+0x2e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d2f6      	bcs.n	80043c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d103      	bne.n	8004446 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08e      	sub	sp, #56	; 0x38
 800446a:	af04      	add	r7, sp, #16
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	e7fe      	b.n	800448c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <xTaskCreateStatic+0x42>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e7fe      	b.n	80044a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044a8:	2354      	movs	r3, #84	; 0x54
 80044aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b54      	cmp	r3, #84	; 0x54
 80044b0:	d009      	beq.n	80044c6 <xTaskCreateStatic+0x60>
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e7fe      	b.n	80044c4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01e      	beq.n	800450c <xTaskCreateStatic+0xa6>
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044e6:	2300      	movs	r3, #0
 80044e8:	9303      	str	r3, [sp, #12]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	9302      	str	r3, [sp, #8]
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f850 	bl	80045a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004506:	f000 f8d3 	bl	80046b0 <prvAddNewTaskToReadyList>
 800450a:	e001      	b.n	8004510 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004510:	697b      	ldr	r3, [r7, #20]
	}
 8004512:	4618      	mov	r0, r3
 8004514:	3728      	adds	r7, #40	; 0x28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800451a:	b580      	push	{r7, lr}
 800451c:	b08c      	sub	sp, #48	; 0x30
 800451e:	af04      	add	r7, sp, #16
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	4613      	mov	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f000 feb0 	bl	8005294 <pvPortMalloc>
 8004534:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800453c:	2054      	movs	r0, #84	; 0x54
 800453e:	f000 fea9 	bl	8005294 <pvPortMalloc>
 8004542:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
 8004550:	e005      	b.n	800455e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f000 ff60 	bl	8005418 <vPortFree>
 8004558:	e001      	b.n	800455e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	2300      	movs	r3, #0
 8004570:	9303      	str	r3, [sp, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	9302      	str	r3, [sp, #8]
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f80e 	bl	80045a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004588:	69f8      	ldr	r0, [r7, #28]
 800458a:	f000 f891 	bl	80046b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e002      	b.n	800459a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800459a:	69bb      	ldr	r3, [r7, #24]
	}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045bc:	3b01      	subs	r3, #1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <prvInitialiseNewTask+0x46>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e7fe      	b.n	80045e8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01f      	beq.n	8004630 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e012      	b.n	800461c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	4413      	add	r3, r2
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	3334      	adds	r3, #52	; 0x34
 8004606:	460a      	mov	r2, r1
 8004608:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3301      	adds	r3, #1
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d9e9      	bls.n	80045f6 <prvInitialiseNewTask+0x52>
 8004622:	e000      	b.n	8004626 <prvInitialiseNewTask+0x82>
			{
				break;
 8004624:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800462e:	e003      	b.n	8004638 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b06      	cmp	r3, #6
 800463c:	d901      	bls.n	8004642 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800463e:	2306      	movs	r3, #6
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	2200      	movs	r2, #0
 8004652:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3304      	adds	r3, #4
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fe70 	bl	800433e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	3318      	adds	r3, #24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fe6b 	bl	800433e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	f1c3 0207 	rsb	r2, r3, #7
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2200      	movs	r2, #0
 8004682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	69b8      	ldr	r0, [r7, #24]
 8004692:	f000 fbfd 	bl	8004e90 <pxPortInitialiseStack>
 8004696:	4602      	mov	r2, r0
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a8:	bf00      	nop
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046b8:	f000 fd10 	bl	80050dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046bc:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <prvAddNewTaskToReadyList+0xb8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	4a29      	ldr	r2, [pc, #164]	; (8004768 <prvAddNewTaskToReadyList+0xb8>)
 80046c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046c6:	4b29      	ldr	r3, [pc, #164]	; (800476c <prvAddNewTaskToReadyList+0xbc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046ce:	4a27      	ldr	r2, [pc, #156]	; (800476c <prvAddNewTaskToReadyList+0xbc>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <prvAddNewTaskToReadyList+0xb8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d110      	bne.n	80046fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046dc:	f000 fab8 	bl	8004c50 <prvInitialiseTaskLists>
 80046e0:	e00d      	b.n	80046fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <prvAddNewTaskToReadyList+0xc0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <prvAddNewTaskToReadyList+0xbc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d802      	bhi.n	80046fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <prvAddNewTaskToReadyList+0xbc>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <prvAddNewTaskToReadyList+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <prvAddNewTaskToReadyList+0xc4>)
 8004706:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <prvAddNewTaskToReadyList+0xc8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <prvAddNewTaskToReadyList+0xc8>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <prvAddNewTaskToReadyList+0xcc>)
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7ff fe11 	bl	8004358 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004736:	f000 fcff 	bl	8005138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <prvAddNewTaskToReadyList+0xc0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <prvAddNewTaskToReadyList+0xbc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d207      	bcs.n	8004760 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004750:	4b0b      	ldr	r3, [pc, #44]	; (8004780 <prvAddNewTaskToReadyList+0xd0>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000194 	.word	0x20000194
 800476c:	20000094 	.word	0x20000094
 8004770:	200001a0 	.word	0x200001a0
 8004774:	200001b0 	.word	0x200001b0
 8004778:	2000019c 	.word	0x2000019c
 800477c:	20000098 	.word	0x20000098
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <vTaskDelay+0x60>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <vTaskDelay+0x2e>
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	e7fe      	b.n	80047b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80047b2:	f000 f879 	bl	80048a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047b6:	2100      	movs	r1, #0
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb03 	bl	8004dc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047be:	f000 f881 	bl	80048c4 <xTaskResumeAll>
 80047c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <vTaskDelay+0x64>)
 80047cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200001bc 	.word	0x200001bc
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	; 0x28
 80047f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047fa:	463a      	mov	r2, r7
 80047fc:	1d39      	adds	r1, r7, #4
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f002 fe3e 	bl	8007484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	9202      	str	r2, [sp, #8]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	2300      	movs	r3, #0
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	460a      	mov	r2, r1
 800481a:	491d      	ldr	r1, [pc, #116]	; (8004890 <vTaskStartScheduler+0xa4>)
 800481c:	481d      	ldr	r0, [pc, #116]	; (8004894 <vTaskStartScheduler+0xa8>)
 800481e:	f7ff fe22 	bl	8004466 <xTaskCreateStatic>
 8004822:	4602      	mov	r2, r0
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <vTaskStartScheduler+0xac>)
 8004826:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <vTaskStartScheduler+0xac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e001      	b.n	800483a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d115      	bne.n	800486c <vTaskStartScheduler+0x80>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <vTaskStartScheduler+0xb0>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <vTaskStartScheduler+0xb4>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004860:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <vTaskStartScheduler+0xb8>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004866:	f000 fb9b 	bl	8004fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486a:	e00d      	b.n	8004888 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d109      	bne.n	8004888 <vTaskStartScheduler+0x9c>
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
 8004886:	e7fe      	b.n	8004886 <vTaskStartScheduler+0x9a>
}
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	08009c60 	.word	0x08009c60
 8004894:	08004c21 	.word	0x08004c21
 8004898:	200001b8 	.word	0x200001b8
 800489c:	200001b4 	.word	0x200001b4
 80048a0:	200001a0 	.word	0x200001a0
 80048a4:	20000198 	.word	0x20000198

080048a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	200001bc 	.word	0x200001bc

080048c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <xTaskResumeAll+0x114>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <xTaskResumeAll+0x2a>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	e7fe      	b.n	80048ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048ee:	f000 fbf5 	bl	80050dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048f2:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <xTaskResumeAll+0x114>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4a37      	ldr	r2, [pc, #220]	; (80049d8 <xTaskResumeAll+0x114>)
 80048fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <xTaskResumeAll+0x114>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d161      	bne.n	80049c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <xTaskResumeAll+0x118>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05d      	beq.n	80049c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490c:	e02e      	b.n	800496c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <xTaskResumeAll+0x11c>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3318      	adds	r3, #24
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fd79 	bl	8004412 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3304      	adds	r3, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fd74 	bl	8004412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	2201      	movs	r2, #1
 8004930:	409a      	lsls	r2, r3
 8004932:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <xTaskResumeAll+0x120>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <xTaskResumeAll+0x120>)
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <xTaskResumeAll+0x124>)
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7ff fd00 	bl	8004358 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	4b23      	ldr	r3, [pc, #140]	; (80049ec <xTaskResumeAll+0x128>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004966:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <xTaskResumeAll+0x12c>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <xTaskResumeAll+0x11c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1cc      	bne.n	800490e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800497a:	f000 fa03 	bl	8004d84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <xTaskResumeAll+0x130>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800498a:	f000 f837 	bl	80049fc <xTaskIncrementTick>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004994:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <xTaskResumeAll+0x12c>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3b01      	subs	r3, #1
 800499e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f1      	bne.n	800498a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80049a6:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <xTaskResumeAll+0x130>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <xTaskResumeAll+0x12c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d009      	beq.n	80049c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049b4:	2301      	movs	r3, #1
 80049b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <xTaskResumeAll+0x134>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049c8:	f000 fbb6 	bl	8005138 <vPortExitCritical>

	return xAlreadyYielded;
 80049cc:	68bb      	ldr	r3, [r7, #8]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200001bc 	.word	0x200001bc
 80049dc:	20000194 	.word	0x20000194
 80049e0:	20000154 	.word	0x20000154
 80049e4:	2000019c 	.word	0x2000019c
 80049e8:	20000098 	.word	0x20000098
 80049ec:	20000094 	.word	0x20000094
 80049f0:	200001a8 	.word	0x200001a8
 80049f4:	200001a4 	.word	0x200001a4
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a06:	4b4e      	ldr	r3, [pc, #312]	; (8004b40 <xTaskIncrementTick+0x144>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 8087 	bne.w	8004b1e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a10:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a18:	4a4a      	ldr	r2, [pc, #296]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11f      	bne.n	8004a64 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <xTaskIncrementTick+0x46>
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	e7fe      	b.n	8004a40 <xTaskIncrementTick+0x44>
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3e      	ldr	r2, [pc, #248]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4a3e      	ldr	r2, [pc, #248]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	f000 f990 	bl	8004d84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a64:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d348      	bcc.n	8004b00 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	601a      	str	r2, [r3, #0]
					break;
 8004a80:	e03e      	b.n	8004b00 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d203      	bcs.n	8004aa2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a9a:	4a2e      	ldr	r2, [pc, #184]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004aa0:	e02e      	b.n	8004b00 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fcb3 	bl	8004412 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3318      	adds	r3, #24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fcaa 	bl	8004412 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <xTaskIncrementTick+0x160>)
 8004ade:	441a      	add	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7ff fc36 	bl	8004358 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <xTaskIncrementTick+0x164>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3b9      	bcc.n	8004a6e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afe:	e7b6      	b.n	8004a6e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b00:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <xTaskIncrementTick+0x164>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	4915      	ldr	r1, [pc, #84]	; (8004b5c <xTaskIncrementTick+0x160>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d907      	bls.n	8004b28 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e004      	b.n	8004b28 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <xTaskIncrementTick+0x168>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <xTaskIncrementTick+0x168>)
 8004b26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <xTaskIncrementTick+0x16c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b34:	697b      	ldr	r3, [r7, #20]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200001bc 	.word	0x200001bc
 8004b44:	20000198 	.word	0x20000198
 8004b48:	2000014c 	.word	0x2000014c
 8004b4c:	20000150 	.word	0x20000150
 8004b50:	200001ac 	.word	0x200001ac
 8004b54:	200001b4 	.word	0x200001b4
 8004b58:	2000019c 	.word	0x2000019c
 8004b5c:	20000098 	.word	0x20000098
 8004b60:	20000094 	.word	0x20000094
 8004b64:	200001a4 	.word	0x200001a4
 8004b68:	200001a8 	.word	0x200001a8

08004b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <vTaskSwitchContext+0xa0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b7a:	4b25      	ldr	r3, [pc, #148]	; (8004c10 <vTaskSwitchContext+0xa4>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b80:	e03e      	b.n	8004c00 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004b82:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <vTaskSwitchContext+0xa4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b88:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <vTaskSwitchContext+0xa8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	fab3 f383 	clz	r3, r3
 8004b94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	f1c3 031f 	rsb	r3, r3, #31
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	491e      	ldr	r1, [pc, #120]	; (8004c18 <vTaskSwitchContext+0xac>)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	607b      	str	r3, [r7, #4]
 8004bc4:	e7fe      	b.n	8004bc4 <vTaskSwitchContext+0x58>
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4a11      	ldr	r2, [pc, #68]	; (8004c18 <vTaskSwitchContext+0xac>)
 8004bd2:	4413      	add	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	3308      	adds	r3, #8
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d104      	bne.n	8004bf6 <vTaskSwitchContext+0x8a>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <vTaskSwitchContext+0xb0>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	200001bc 	.word	0x200001bc
 8004c10:	200001a8 	.word	0x200001a8
 8004c14:	2000019c 	.word	0x2000019c
 8004c18:	20000098 	.word	0x20000098
 8004c1c:	20000094 	.word	0x20000094

08004c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c28:	f000 f852 	bl	8004cd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <prvIdleTask+0x28>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d9f9      	bls.n	8004c28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <prvIdleTask+0x2c>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c44:	e7f0      	b.n	8004c28 <prvIdleTask+0x8>
 8004c46:	bf00      	nop
 8004c48:	20000098 	.word	0x20000098
 8004c4c:	e000ed04 	.word	0xe000ed04

08004c50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c56:	2300      	movs	r3, #0
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	e00c      	b.n	8004c76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4a12      	ldr	r2, [pc, #72]	; (8004cb0 <prvInitialiseTaskLists+0x60>)
 8004c68:	4413      	add	r3, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fb47 	bl	80042fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3301      	adds	r3, #1
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b06      	cmp	r3, #6
 8004c7a:	d9ef      	bls.n	8004c5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c7c:	480d      	ldr	r0, [pc, #52]	; (8004cb4 <prvInitialiseTaskLists+0x64>)
 8004c7e:	f7ff fb3e 	bl	80042fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c82:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <prvInitialiseTaskLists+0x68>)
 8004c84:	f7ff fb3b 	bl	80042fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c88:	480c      	ldr	r0, [pc, #48]	; (8004cbc <prvInitialiseTaskLists+0x6c>)
 8004c8a:	f7ff fb38 	bl	80042fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c8e:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <prvInitialiseTaskLists+0x70>)
 8004c90:	f7ff fb35 	bl	80042fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c94:	480b      	ldr	r0, [pc, #44]	; (8004cc4 <prvInitialiseTaskLists+0x74>)
 8004c96:	f7ff fb32 	bl	80042fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <prvInitialiseTaskLists+0x78>)
 8004c9c:	4a05      	ldr	r2, [pc, #20]	; (8004cb4 <prvInitialiseTaskLists+0x64>)
 8004c9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <prvInitialiseTaskLists+0x7c>)
 8004ca2:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <prvInitialiseTaskLists+0x68>)
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000098 	.word	0x20000098
 8004cb4:	20000124 	.word	0x20000124
 8004cb8:	20000138 	.word	0x20000138
 8004cbc:	20000154 	.word	0x20000154
 8004cc0:	20000168 	.word	0x20000168
 8004cc4:	20000180 	.word	0x20000180
 8004cc8:	2000014c 	.word	0x2000014c
 8004ccc:	20000150 	.word	0x20000150

08004cd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd6:	e019      	b.n	8004d0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cd8:	f000 fa00 	bl	80050dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <prvCheckTasksWaitingTermination+0x4c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fb92 	bl	8004412 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <prvCheckTasksWaitingTermination+0x50>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <prvCheckTasksWaitingTermination+0x50>)
 8004cf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <prvCheckTasksWaitingTermination+0x54>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <prvCheckTasksWaitingTermination+0x54>)
 8004d00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d02:	f000 fa19 	bl	8005138 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f80e 	bl	8004d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <prvCheckTasksWaitingTermination+0x54>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e1      	bne.n	8004cd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20000168 	.word	0x20000168
 8004d20:	20000194 	.word	0x20000194
 8004d24:	2000017c 	.word	0x2000017c

08004d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fb6a 	bl	8005418 <vPortFree>
				vPortFree( pxTCB );
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb67 	bl	8005418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d4a:	e017      	b.n	8004d7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d103      	bne.n	8004d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fb5e 	bl	8005418 <vPortFree>
	}
 8004d5c:	e00e      	b.n	8004d7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d009      	beq.n	8004d7c <prvDeleteTCB+0x54>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e7fe      	b.n	8004d7a <prvDeleteTCB+0x52>
	}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <prvResetNextTaskUnblockTime+0x38>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d104      	bne.n	8004d9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004d96:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d9c:	e008      	b.n	8004db0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <prvResetNextTaskUnblockTime+0x38>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	2000014c 	.word	0x2000014c
 8004dc0:	200001b4 	.word	0x200001b4

08004dc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dce:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fb19 	bl	8004412 <uxListRemove>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	2201      	movs	r2, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43da      	mvns	r2, r3
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d10a      	bne.n	8004e1c <prvAddCurrentTaskToDelayedList+0x58>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	481a      	ldr	r0, [pc, #104]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e16:	f7ff fa9f 	bl	8004358 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e1a:	e026      	b.n	8004e6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e24:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d209      	bcs.n	8004e48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e34:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7ff faad 	bl	80043a0 <vListInsert>
}
 8004e46:	e010      	b.n	8004e6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff faa3 	bl	80043a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d202      	bcs.n	8004e6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6013      	str	r3, [r2, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000198 	.word	0x20000198
 8004e78:	20000094 	.word	0x20000094
 8004e7c:	2000019c 	.word	0x2000019c
 8004e80:	20000180 	.word	0x20000180
 8004e84:	20000150 	.word	0x20000150
 8004e88:	2000014c 	.word	0x2000014c
 8004e8c:	200001b4 	.word	0x200001b4

08004e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3b04      	subs	r3, #4
 8004ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b04      	subs	r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <pxPortInitialiseStack+0x64>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b14      	subs	r3, #20
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b04      	subs	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f06f 0202 	mvn.w	r2, #2
 8004ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b20      	subs	r3, #32
 8004ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	08004ef9 	.word	0x08004ef9

08004ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f02:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <prvTaskExitError+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d009      	beq.n	8004f20 <prvTaskExitError+0x28>
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e7fe      	b.n	8004f1e <prvTaskExitError+0x26>
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f32:	bf00      	nop
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0fc      	beq.n	8004f34 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000008 	.word	0x20000008
 8004f4c:	00000000 	.word	0x00000000

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <pxCurrentTCBConst2>)
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6808      	ldr	r0, [r1, #0]
 8004f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5a:	f380 8809 	msr	PSP, r0
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	4770      	bx	lr
 8004f6c:	f3af 8000 	nop.w

08004f70 <pxCurrentTCBConst2>:
 8004f70:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <prvPortStartFirstTask+0x24>)
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f380 8808 	msr	MSP, r0
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8814 	msr	CONTROL, r0
 8004f8a:	b662      	cpsie	i
 8004f8c:	b661      	cpsie	f
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	df00      	svc	0
 8004f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f9a:	bf00      	nop
 8004f9c:	e000ed08 	.word	0xe000ed08

08004fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fa6:	4b44      	ldr	r3, [pc, #272]	; (80050b8 <xPortStartScheduler+0x118>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a44      	ldr	r2, [pc, #272]	; (80050bc <xPortStartScheduler+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d109      	bne.n	8004fc4 <xPortStartScheduler+0x24>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e7fe      	b.n	8004fc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fc4:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <xPortStartScheduler+0x118>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <xPortStartScheduler+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d109      	bne.n	8004fe2 <xPortStartScheduler+0x42>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e7fe      	b.n	8004fe0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fe2:	4b38      	ldr	r3, [pc, #224]	; (80050c4 <xPortStartScheduler+0x124>)
 8004fe4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b30      	ldr	r3, [pc, #192]	; (80050c8 <xPortStartScheduler+0x128>)
 8005008:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800500a:	4b30      	ldr	r3, [pc, #192]	; (80050cc <xPortStartScheduler+0x12c>)
 800500c:	2207      	movs	r2, #7
 800500e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005010:	e009      	b.n	8005026 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <xPortStartScheduler+0x12c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <xPortStartScheduler+0x12c>)
 800501a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b80      	cmp	r3, #128	; 0x80
 8005030:	d0ef      	beq.n	8005012 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005032:	4b26      	ldr	r3, [pc, #152]	; (80050cc <xPortStartScheduler+0x12c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1c3 0307 	rsb	r3, r3, #7
 800503a:	2b04      	cmp	r3, #4
 800503c:	d009      	beq.n	8005052 <xPortStartScheduler+0xb2>
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	e7fe      	b.n	8005050 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005052:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <xPortStartScheduler+0x12c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <xPortStartScheduler+0x12c>)
 800505a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <xPortStartScheduler+0x12c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <xPortStartScheduler+0x12c>)
 8005066:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <xPortStartScheduler+0x130>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <xPortStartScheduler+0x130>)
 8005076:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800507a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <xPortStartScheduler+0x130>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <xPortStartScheduler+0x130>)
 8005082:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005086:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005088:	f000 f8d6 	bl	8005238 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <xPortStartScheduler+0x134>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005092:	f000 f8f5 	bl	8005280 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <xPortStartScheduler+0x138>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a0f      	ldr	r2, [pc, #60]	; (80050d8 <xPortStartScheduler+0x138>)
 800509c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050a2:	f7ff ff69 	bl	8004f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050a6:	f7ff fd61 	bl	8004b6c <vTaskSwitchContext>
	prvTaskExitError();
 80050aa:	f7ff ff25 	bl	8004ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	e000ed00 	.word	0xe000ed00
 80050bc:	410fc271 	.word	0x410fc271
 80050c0:	410fc270 	.word	0x410fc270
 80050c4:	e000e400 	.word	0xe000e400
 80050c8:	200001c0 	.word	0x200001c0
 80050cc:	200001c4 	.word	0x200001c4
 80050d0:	e000ed20 	.word	0xe000ed20
 80050d4:	20000008 	.word	0x20000008
 80050d8:	e000ef34 	.word	0xe000ef34

080050dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <vPortEnterCritical+0x54>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <vPortEnterCritical+0x54>)
 80050fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <vPortEnterCritical+0x54>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d10e      	bne.n	8005124 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <vPortEnterCritical+0x58>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <vPortEnterCritical+0x48>
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	e7fe      	b.n	8005122 <vPortEnterCritical+0x46>
	}
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000008 	.word	0x20000008
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <vPortExitCritical+0x4c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <vPortExitCritical+0x22>
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	e7fe      	b.n	8005158 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800515a:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <vPortExitCritical+0x4c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3b01      	subs	r3, #1
 8005160:	4a08      	ldr	r2, [pc, #32]	; (8005184 <vPortExitCritical+0x4c>)
 8005162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005164:	4b07      	ldr	r3, [pc, #28]	; (8005184 <vPortExitCritical+0x4c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <vPortExitCritical+0x3e>
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008
	...

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7ff fcd4 	bl	8004b6c <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005210:	f7ff fbf4 	bl	80049fc <xTaskIncrementTick>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <SysTick_Handler+0x3c>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	2300      	movs	r3, #0
 8005224:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	e000ed04 	.word	0xe000ed04

08005238 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <vPortSetupTimerInterrupt+0x34>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <vPortSetupTimerInterrupt+0x38>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <vPortSetupTimerInterrupt+0x3c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <vPortSetupTimerInterrupt+0x40>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	099b      	lsrs	r3, r3, #6
 8005254:	4a09      	ldr	r2, [pc, #36]	; (800527c <vPortSetupTimerInterrupt+0x44>)
 8005256:	3b01      	subs	r3, #1
 8005258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <vPortSetupTimerInterrupt+0x34>)
 800525c:	2207      	movs	r2, #7
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e010 	.word	0xe000e010
 8005270:	e000e018 	.word	0xe000e018
 8005274:	20000010 	.word	0x20000010
 8005278:	10624dd3 	.word	0x10624dd3
 800527c:	e000e014 	.word	0xe000e014

08005280 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005280:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005290 <vPortEnableVFP+0x10>
 8005284:	6801      	ldr	r1, [r0, #0]
 8005286:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800528a:	6001      	str	r1, [r0, #0]
 800528c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800528e:	bf00      	nop
 8005290:	e000ed88 	.word	0xe000ed88

08005294 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052a0:	f7ff fb02 	bl	80048a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052a4:	4b57      	ldr	r3, [pc, #348]	; (8005404 <pvPortMalloc+0x170>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052ac:	f000 f90c 	bl	80054c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052b0:	4b55      	ldr	r3, [pc, #340]	; (8005408 <pvPortMalloc+0x174>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f040 808c 	bne.w	80053d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01c      	beq.n	80052fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80052c4:	2208      	movs	r2, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d013      	beq.n	80052fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f023 0307 	bic.w	r3, r3, #7
 80052dc:	3308      	adds	r3, #8
 80052de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <pvPortMalloc+0x6a>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e7fe      	b.n	80052fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d068      	beq.n	80053d6 <pvPortMalloc+0x142>
 8005304:	4b41      	ldr	r3, [pc, #260]	; (800540c <pvPortMalloc+0x178>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d863      	bhi.n	80053d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800530e:	4b40      	ldr	r3, [pc, #256]	; (8005410 <pvPortMalloc+0x17c>)
 8005310:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005312:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <pvPortMalloc+0x17c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005318:	e004      	b.n	8005324 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d903      	bls.n	8005336 <pvPortMalloc+0xa2>
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f1      	bne.n	800531a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005336:	4b33      	ldr	r3, [pc, #204]	; (8005404 <pvPortMalloc+0x170>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	429a      	cmp	r2, r3
 800533e:	d04a      	beq.n	80053d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	4413      	add	r3, r2
 8005348:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	2308      	movs	r3, #8
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	429a      	cmp	r2, r3
 8005360:	d91e      	bls.n	80053a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <pvPortMalloc+0xf4>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e7fe      	b.n	8005386 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800539a:	69b8      	ldr	r0, [r7, #24]
 800539c:	f000 f8f6 	bl	800558c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053a0:	4b1a      	ldr	r3, [pc, #104]	; (800540c <pvPortMalloc+0x178>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <pvPortMalloc+0x178>)
 80053ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ae:	4b17      	ldr	r3, [pc, #92]	; (800540c <pvPortMalloc+0x178>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b18      	ldr	r3, [pc, #96]	; (8005414 <pvPortMalloc+0x180>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d203      	bcs.n	80053c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <pvPortMalloc+0x178>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <pvPortMalloc+0x180>)
 80053c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <pvPortMalloc+0x174>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053d6:	f7ff fa75 	bl	80048c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d009      	beq.n	80053f8 <pvPortMalloc+0x164>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	e7fe      	b.n	80053f6 <pvPortMalloc+0x162>
	return pvReturn;
 80053f8:	69fb      	ldr	r3, [r7, #28]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3728      	adds	r7, #40	; 0x28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20003dd0 	.word	0x20003dd0
 8005408:	20003ddc 	.word	0x20003ddc
 800540c:	20003dd4 	.word	0x20003dd4
 8005410:	20003dc8 	.word	0x20003dc8
 8005414:	20003dd8 	.word	0x20003dd8

08005418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d046      	beq.n	80054b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800542a:	2308      	movs	r3, #8
 800542c:	425b      	negs	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <vPortFree+0xa8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <vPortFree+0x42>
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e7fe      	b.n	8005458 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <vPortFree+0x5e>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	e7fe      	b.n	8005474 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <vPortFree+0xa8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4013      	ands	r3, r2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d019      	beq.n	80054b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d115      	bne.n	80054b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <vPortFree+0xa8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800549c:	f7ff fa04 	bl	80048a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <vPortFree+0xac>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	4a06      	ldr	r2, [pc, #24]	; (80054c4 <vPortFree+0xac>)
 80054ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ae:	6938      	ldr	r0, [r7, #16]
 80054b0:	f000 f86c 	bl	800558c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054b4:	f7ff fa06 	bl	80048c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20003ddc 	.word	0x20003ddc
 80054c4:	20003dd4 	.word	0x20003dd4

080054c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d4:	4b27      	ldr	r3, [pc, #156]	; (8005574 <prvHeapInit+0xac>)
 80054d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00c      	beq.n	80054fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3307      	adds	r3, #7
 80054e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <prvHeapInit+0xac>)
 80054f8:	4413      	add	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005500:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <prvHeapInit+0xb0>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <prvHeapInit+0xb0>)
 8005508:	2200      	movs	r2, #0
 800550a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005514:	2208      	movs	r2, #8
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0307 	bic.w	r3, r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <prvHeapInit+0xb4>)
 8005528:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <prvHeapInit+0xb4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <prvHeapInit+0xb4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <prvHeapInit+0xb4>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <prvHeapInit+0xb8>)
 8005556:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4a09      	ldr	r2, [pc, #36]	; (8005584 <prvHeapInit+0xbc>)
 800555e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <prvHeapInit+0xc0>)
 8005562:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005566:	601a      	str	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	200001c8 	.word	0x200001c8
 8005578:	20003dc8 	.word	0x20003dc8
 800557c:	20003dd0 	.word	0x20003dd0
 8005580:	20003dd8 	.word	0x20003dd8
 8005584:	20003dd4 	.word	0x20003dd4
 8005588:	20003ddc 	.word	0x20003ddc

0800558c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005594:	4b28      	ldr	r3, [pc, #160]	; (8005638 <prvInsertBlockIntoFreeList+0xac>)
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e002      	b.n	80055a0 <prvInsertBlockIntoFreeList+0x14>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d8f7      	bhi.n	800559a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4413      	add	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d108      	bne.n	80055ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d118      	bne.n	8005614 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b15      	ldr	r3, [pc, #84]	; (800563c <prvInsertBlockIntoFreeList+0xb0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d00d      	beq.n	800560a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e008      	b.n	800561c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <prvInsertBlockIntoFreeList+0xb0>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e003      	b.n	800561c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	429a      	cmp	r2, r3
 8005622:	d002      	beq.n	800562a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20003dc8 	.word	0x20003dc8
 800563c:	20003dd0 	.word	0x20003dd0

08005640 <AGVUI_Open>:
	tmp[cnt++] = '!';
	tmp[cnt++] = '\0';
}

void AGVUI_Open( Agvui_t * a, UART_HandleTypeDef * huart )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	a->huart = huart;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	601a      	str	r2, [r3, #0]
	a->rx_length = 16;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2210      	movs	r2, #16
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	SET_BIT( huart->Instance->CR3, USART_CR3_DMAR );
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005666:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT( huart, UART_IT_IDLE );
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0210 	orr.w	r2, r2, #16
 8005676:	60da      	str	r2, [r3, #12]
	__HAL_DMA_DISABLE( huart->hdmarx );
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
	while ( huart->hdmarx->Instance->CR & DMA_SxCR_EN )
 800568c:	e009      	b.n	80056a2 <AGVUI_Open+0x62>
	{
		__HAL_DMA_DISABLE( huart->hdmarx );
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
	while ( huart->hdmarx->Instance->CR & DMA_SxCR_EN )
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ed      	bne.n	800568e <AGVUI_Open+0x4e>
	}
	huart->hdmarx->Instance->PAR = ( uint32_t ) & ( huart->Instance->DR );
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	609a      	str	r2, [r3, #8]
	huart->hdmarx->Instance->M0AR = ( uint32_t )( a->rx_data1 );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60da      	str	r2, [r3, #12]
	huart->hdmarx->Instance->M1AR = ( uint32_t )( a->rx_data2 );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f103 025f 	add.w	r2, r3, #95	; 0x5f
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]
	huart->hdmarx->Instance->NDTR = a->rx_length * 2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e2:	005a      	lsls	r2, r3, #1
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
	SET_BIT( huart->hdmarx->Instance->CR, DMA_SxCR_DBM );
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80056fe:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE( huart->hdmarx );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <AGVUI_RxUpdate>:

void AGVUI_RxUpdate( Agvui_t * a )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	static uint8_t i;

	if ( a->huart->Instance->SR & UART_FLAG_IDLE ) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8106 	beq.w	8005946 <AGVUI_RxUpdate+0x226>

		static uint16_t this_time_rx_len = 0;
		static UART_HandleTypeDef * huart;
		huart = a->huart;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a84      	ldr	r2, [pc, #528]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005740:	6013      	str	r3, [r2, #0]
		__HAL_UART_CLEAR_PEFLAG( huart );
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	4b82      	ldr	r3, [pc, #520]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	4b7f      	ldr	r3, [pc, #508]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
		if ( ( huart->hdmarx->Instance->CR & DMA_SxCR_CT ) == RESET )
 800575c:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <AGVUI_RxUpdate+0x230>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d165      	bne.n	800583a <AGVUI_RxUpdate+0x11a>
		{
			__HAL_DMA_DISABLE( huart->hdmarx );
 800576e:	4b78      	ldr	r3, [pc, #480]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b75      	ldr	r3, [pc, #468]	; (8005950 <AGVUI_RxUpdate+0x230>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

			this_time_rx_len = a->rx_length * 2 - huart->hdmarx->Instance->NDTR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	b29b      	uxth	r3, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	4b6c      	ldr	r3, [pc, #432]	; (8005954 <AGVUI_RxUpdate+0x234>)
 80057a4:	801a      	strh	r2, [r3, #0]
			huart->hdmarx->Instance->NDTR = a->rx_length * 2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ac:	005a      	lsls	r2, r3, #1
 80057ae:	4b68      	ldr	r3, [pc, #416]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	605a      	str	r2, [r3, #4]
			huart->hdmarx->Instance->CR |= DMA_SxCR_CT;
 80057b8:	4b65      	ldr	r3, [pc, #404]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b63      	ldr	r3, [pc, #396]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80057ce:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE( huart->hdmarx );
 80057d0:	4b5f      	ldr	r3, [pc, #380]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

			if ( this_time_rx_len == a->rx_length )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	4b58      	ldr	r3, [pc, #352]	; (8005954 <AGVUI_RxUpdate+0x234>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	f040 8084 	bne.w	8005902 <AGVUI_RxUpdate+0x1e2>
			{
				for ( i = 0; i < a->rx_length; i ++ ) a->rx_addr[i] = a->rx_data2[i];
 80057fa:	4b57      	ldr	r3, [pc, #348]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e013      	b.n	800582a <AGVUI_RxUpdate+0x10a>
 8005802:	4b55      	ldr	r3, [pc, #340]	; (8005958 <AGVUI_RxUpdate+0x238>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	4b53      	ldr	r3, [pc, #332]	; (8005958 <AGVUI_RxUpdate+0x238>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	440b      	add	r3, r1
 800581a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800581e:	4b4e      	ldr	r3, [pc, #312]	; (8005958 <AGVUI_RxUpdate+0x238>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	b2da      	uxtb	r2, r3
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <AGVUI_RxUpdate+0x238>)
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8005830:	4b49      	ldr	r3, [pc, #292]	; (8005958 <AGVUI_RxUpdate+0x238>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d8e4      	bhi.n	8005802 <AGVUI_RxUpdate+0xe2>
 8005838:	e063      	b.n	8005902 <AGVUI_RxUpdate+0x1e2>
			}
		}

		else
		{
			__HAL_DMA_DISABLE( huart->hdmarx );
 800583a:	4b45      	ldr	r3, [pc, #276]	; (8005950 <AGVUI_RxUpdate+0x230>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]

			this_time_rx_len = a->rx_length * 2 - huart->hdmarx->Instance->NDTR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	b29b      	uxth	r3, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	b29a      	uxth	r2, r3
 800586e:	4b39      	ldr	r3, [pc, #228]	; (8005954 <AGVUI_RxUpdate+0x234>)
 8005870:	801a      	strh	r2, [r3, #0]
			huart->hdmarx->Instance->NDTR = a->rx_length * 2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005878:	005a      	lsls	r2, r3, #1
 800587a:	4b35      	ldr	r3, [pc, #212]	; (8005950 <AGVUI_RxUpdate+0x230>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
			huart->hdmarx->Instance->CR &= ~( DMA_SxCR_CT );
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4b30      	ldr	r3, [pc, #192]	; (8005950 <AGVUI_RxUpdate+0x230>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800589a:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE( huart->hdmarx );
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <AGVUI_RxUpdate+0x230>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <AGVUI_RxUpdate+0x230>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

			if ( this_time_rx_len == a->rx_length ) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	4b25      	ldr	r3, [pc, #148]	; (8005954 <AGVUI_RxUpdate+0x234>)
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d11e      	bne.n	8005902 <AGVUI_RxUpdate+0x1e2>
				for ( i = 0; i < a->rx_length; i ++ ) a->rx_addr[i] = a->rx_data1[i];
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e013      	b.n	80058f4 <AGVUI_RxUpdate+0x1d4>
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	4b21      	ldr	r3, [pc, #132]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	440b      	add	r3, r1
 80058e4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <AGVUI_RxUpdate+0x238>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d8e4      	bhi.n	80058cc <AGVUI_RxUpdate+0x1ac>
			}
		}

		/* 接收到一帧数据 */
		int * pi = (int *)a->rx_addr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	337f      	adds	r3, #127	; 0x7f
 8005906:	617b      	str	r3, [r7, #20]
		a->head = *pi;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	611a      	str	r2, [r3, #16]
		float * pf = (float *)(a->rx_addr+4);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	337f      	adds	r3, #127	; 0x7f
 8005914:	3304      	adds	r3, #4
 8005916:	613b      	str	r3, [r7, #16]
		a->params[0] = *pf;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	615a      	str	r2, [r3, #20]
		pf = (float *)(a->rx_addr + 8);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	337f      	adds	r3, #127	; 0x7f
 8005924:	3308      	adds	r3, #8
 8005926:	613b      	str	r3, [r7, #16]
		a->params[1] = *pf;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
		pf = (float *)(a->rx_addr + 12);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	337f      	adds	r3, #127	; 0x7f
 8005934:	330c      	adds	r3, #12
 8005936:	613b      	str	r3, [r7, #16]
		a->params[2] = *pf;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	61da      	str	r2, [r3, #28]
		AGVUI_Callback(a);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f002 f8a1 	bl	8007a88 <AGVUI_Callback>
	}
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20003de0 	.word	0x20003de0
 8005954:	20003de4 	.word	0x20003de4
 8005958:	20003de6 	.word	0x20003de6

0800595c <AGVUI_GetHead>:
{

}

int AGVUI_GetHead( Agvui_t * a )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	return a->head;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <AGVUI_GetParams>:

float * AGVUI_GetParams( Agvui_t * a )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	return a->params;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3314      	adds	r3, #20
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <AGVUI_SetTxDataAdd>:

void AGVUI_SetTxDataAdd( Agvui_t * a, void * posx, void * posy)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
	a->posx_add = posx;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	609a      	str	r2, [r3, #8]
	a->posy_add = posy;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059b6:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <MX_CAN1_Init+0x68>)
 80059b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80059ba:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059bc:	2205      	movs	r2, #5
 80059be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80059c0:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80059c6:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80059d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80059da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059de:	2200      	movs	r2, #0
 80059e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <MX_CAN1_Init+0x64>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005a00:	4804      	ldr	r0, [pc, #16]	; (8005a14 <MX_CAN1_Init+0x64>)
 8005a02:	f7fb fa7f 	bl	8000f04 <HAL_CAN_Init>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005a0c:	f002 f976 	bl	8007cfc <Error_Handler>
  }

}
 8005a10:	bf00      	nop
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200040c0 	.word	0x200040c0
 8005a18:	40006400 	.word	0x40006400

08005a1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <HAL_CAN_MspInit+0x94>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d133      	bne.n	8005aa6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <HAL_CAN_MspInit+0x98>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a76:	2303      	movs	r3, #3
 8005a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a82:	2303      	movs	r3, #3
 8005a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005a86:	2309      	movs	r3, #9
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a8a:	f107 0314 	add.w	r3, r7, #20
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4809      	ldr	r0, [pc, #36]	; (8005ab8 <HAL_CAN_MspInit+0x9c>)
 8005a92:	f7fc fb6f 	bl	8002174 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005a96:	2200      	movs	r2, #0
 8005a98:	2105      	movs	r1, #5
 8005a9a:	2014      	movs	r0, #20
 8005a9c:	f7fc f858 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005aa0:	2014      	movs	r0, #20
 8005aa2:	f7fc f871 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3728      	adds	r7, #40	; 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40006400 	.word	0x40006400
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	40020c00 	.word	0x40020c00

08005abc <dev_init>:

uint32_t times = 0;
uint32_t systicks = 0;

void dev_init( void )
{
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	b0fa      	sub	sp, #488	; 0x1e8
 8005ac0:	af02      	add	r7, sp, #8
	//motor init
	S = SPDM_Open(&hcan1, 0x200);
 8005ac2:	4c63      	ldr	r4, [pc, #396]	; (8005c50 <dev_init+0x194>)
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	4962      	ldr	r1, [pc, #392]	; (8005c54 <dev_init+0x198>)
 8005acc:	4618      	mov	r0, r3
 8005ace:	f002 fab9 	bl	8008044 <SPDM_Open>
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8005adc:	461a      	mov	r2, r3
 8005ade:	f003 fc37 	bl	8009350 <memcpy>
	SPDM_SetDir(&S, -1, 1, 1, -1);
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	2301      	movs	r3, #1
 8005aea:	2201      	movs	r2, #1
 8005aec:	f04f 31ff 	mov.w	r1, #4294967295
 8005af0:	4857      	ldr	r0, [pc, #348]	; (8005c50 <dev_init+0x194>)
 8005af2:	f003 f865 	bl	8008bc0 <SPDM_SetDir>
	float ctrlParams[4][4] = {
 8005af6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f003 fc31 	bl	8009366 <memset>
 8005b04:	4b54      	ldr	r3, [pc, #336]	; (8005c58 <dev_init+0x19c>)
 8005b06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005b0a:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <dev_init+0x19c>)
 8005b0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005b10:	4b51      	ldr	r3, [pc, #324]	; (8005c58 <dev_init+0x19c>)
 8005b12:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005b16:	4b50      	ldr	r3, [pc, #320]	; (8005c58 <dev_init+0x19c>)
 8005b18:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005b1c:	4b4f      	ldr	r3, [pc, #316]	; (8005c5c <dev_init+0x1a0>)
 8005b1e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005b22:	4b4e      	ldr	r3, [pc, #312]	; (8005c5c <dev_init+0x1a0>)
 8005b24:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8005b28:	4b4c      	ldr	r3, [pc, #304]	; (8005c5c <dev_init+0x1a0>)
 8005b2a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005b2e:	4b4b      	ldr	r3, [pc, #300]	; (8005c5c <dev_init+0x1a0>)
 8005b30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005b34:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <dev_init+0x1a4>)
 8005b36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005b3a:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <dev_init+0x1a4>)
 8005b3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005b40:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <dev_init+0x1a4>)
 8005b42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <dev_init+0x1a4>)
 8005b48:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	{600.f,     600.f,    	600.f,  	600.f},
	{60.f,      60.f,    	60.f,    	60.f},
	{1000.f,    1000.f,   	1000.f,    	1000.f}
	};
	int16_t outputSat[4] = {10000, 10000, 10000, 10000};
 8005b4c:	4a45      	ldr	r2, [pc, #276]	; (8005c64 <dev_init+0x1a8>)
 8005b4e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b56:	e883 0003 	stmia.w	r3, {r0, r1}
	float exCtrlParams[3][4] = {
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <dev_init+0x1ac>)
 8005b5c:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8005b60:	461d      	mov	r5, r3
 8005b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{17.f,      17.f,    	17.f,    	17.f},
	{3.f,       3.f,    	3.f,    	3.f},
	{0.3f,      0.3f,    	0.3f,    	0.3f}
	};
	SPDM_CtrlParams(&S, ctrlParams[0], ctrlParams[1], ctrlParams[2], outputSat);
 8005b72:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005b76:	f103 0020 	add.w	r0, r3, #32
 8005b7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005b7e:	f103 0210 	add.w	r2, r3, #16
 8005b82:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8005b86:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4830      	ldr	r0, [pc, #192]	; (8005c50 <dev_init+0x194>)
 8005b90:	f002 fed8 	bl	8008944 <SPDM_CtrlParams>
	SPDM_ExCtrlParams(&S, exCtrlParams[0], exCtrlParams[1], exCtrlParams[2]);
 8005b94:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005b98:	f103 0020 	add.w	r0, r3, #32
 8005b9c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005ba0:	f103 0210 	add.w	r2, r3, #16
 8005ba4:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4829      	ldr	r0, [pc, #164]	; (8005c50 <dev_init+0x194>)
 8005bac:	f002 ff26 	bl	80089fc <SPDM_ExCtrlParams>

	//mpu 6500
	while (IMU_CheckSuccess(&I) != HAL_OK)
 8005bb0:	e011      	b.n	8005bd6 <dev_init+0x11a>
	{
		I = IMU_Open(&hspi5);
 8005bb2:	4c2e      	ldr	r4, [pc, #184]	; (8005c6c <dev_init+0x1b0>)
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	492e      	ldr	r1, [pc, #184]	; (8005c70 <dev_init+0x1b4>)
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fec1 	bl	8007940 <IMU_Open>
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	461d      	mov	r5, r3
 8005bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005bd2:	e884 0003 	stmia.w	r4, {r0, r1}
	while (IMU_CheckSuccess(&I) != HAL_OK)
 8005bd6:	4825      	ldr	r0, [pc, #148]	; (8005c6c <dev_init+0x1b0>)
 8005bd8:	f001 ff34 	bl	8007a44 <IMU_CheckSuccess>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e7      	bne.n	8005bb2 <dev_init+0xf6>
	}
	IMU_SetBoardState(&I, IMU_BOARD_UP);
 8005be2:	2101      	movs	r1, #1
 8005be4:	4821      	ldr	r0, [pc, #132]	; (8005c6c <dev_init+0x1b0>)
 8005be6:	f001 ff3e 	bl	8007a66 <IMU_SetBoardState>

	//set the position pid parameters
	pospid.inc = 2.5;
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <dev_init+0x1b8>)
 8005bec:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <dev_init+0x1bc>)
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
	pospid.lastUkd[0] = 0;
 8005bf0:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <dev_init+0x1b8>)
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	619a      	str	r2, [r3, #24]
	pospid.lastUkd[1] = 0;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <dev_init+0x1b8>)
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
	pospid.lastErr[0] = 0;
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <dev_init+0x1b8>)
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	621a      	str	r2, [r3, #32]
	pospid.lastErr[1] = 0;
 8005c08:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <dev_init+0x1b8>)
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	625a      	str	r2, [r3, #36]	; 0x24
	pospid.rough = ROUGH_CONV;
 8005c10:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <dev_init+0x1b8>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gainx = 0.9;
 8005c18:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <dev_init+0x1c0>)
 8005c1a:	4a19      	ldr	r2, [pc, #100]	; (8005c80 <dev_init+0x1c4>)
 8005c1c:	601a      	str	r2, [r3, #0]
	gainy = 0.968;
 8005c1e:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <dev_init+0x1c8>)
 8005c20:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <dev_init+0x1cc>)
 8005c22:	601a      	str	r2, [r3, #0]

	// receive and transmit with uart7
	R = RXD_Open(&huart7,(uint8_t*)&rec, 10);
 8005c24:	4c19      	ldr	r4, [pc, #100]	; (8005c8c <dev_init+0x1d0>)
 8005c26:	4638      	mov	r0, r7
 8005c28:	230a      	movs	r3, #10
 8005c2a:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <dev_init+0x1d4>)
 8005c2c:	4919      	ldr	r1, [pc, #100]	; (8005c94 <dev_init+0x1d8>)
 8005c2e:	f002 f86c 	bl	8007d0a <RXD_Open>
 8005c32:	463b      	mov	r3, r7
 8005c34:	4620      	mov	r0, r4
 8005c36:	4619      	mov	r1, r3
 8005c38:	235c      	movs	r3, #92	; 0x5c
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f003 fb88 	bl	8009350 <memcpy>
	RXD_Enable(&R);
 8005c40:	4812      	ldr	r0, [pc, #72]	; (8005c8c <dev_init+0x1d0>)
 8005c42:	f002 f882 	bl	8007d4a <RXD_Enable>
}
 8005c46:	bf00      	nop
 8005c48:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c50:	20004114 	.word	0x20004114
 8005c54:	200040c0 	.word	0x200040c0
 8005c58:	44160000 	.word	0x44160000
 8005c5c:	42700000 	.word	0x42700000
 8005c60:	447a0000 	.word	0x447a0000
 8005c64:	08009c68 	.word	0x08009c68
 8005c68:	08009c70 	.word	0x08009c70
 8005c6c:	200042f8 	.word	0x200042f8
 8005c70:	2000448c 	.word	0x2000448c
 8005c74:	20004380 	.word	0x20004380
 8005c78:	40200000 	.word	0x40200000
 8005c7c:	20004330 	.word	0x20004330
 8005c80:	3f666666 	.word	0x3f666666
 8005c84:	200040e8 	.word	0x200040e8
 8005c88:	3f77ced9 	.word	0x3f77ced9
 8005c8c:	2000429c 	.word	0x2000429c
 8005c90:	2000435c 	.word	0x2000435c
 8005c94:	20004524 	.word	0x20004524

08005c98 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
    SPDM_RxUpdate( &S, hcan );
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4803      	ldr	r0, [pc, #12]	; (8005cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8005ca4:	f002 fa50 	bl	8008148 <SPDM_RxUpdate>
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20004114 	.word	0x20004114

08005cb4 <RXD_Callback>:

void RXD_Callback(RXD_TypeDef * rxd)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	if (rxd == &R) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <RXD_Callback+0x20>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d102      	bne.n	8005cca <RXD_Callback+0x16>
		datarec_callback(rec);
 8005cc4:	4804      	ldr	r0, [pc, #16]	; (8005cd8 <RXD_Callback+0x24>)
 8005cc6:	f000 f809 	bl	8005cdc <datarec_callback>
	}
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2000429c 	.word	0x2000429c
 8005cd8:	2000435c 	.word	0x2000435c

08005cdc <datarec_callback>:

void datarec_callback(const uint8_t * phead)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart7,(uint8_t*)phead,10,0xffff);
 8005ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ce8:	220a      	movs	r2, #10
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4803      	ldr	r0, [pc, #12]	; (8005cfc <datarec_callback+0x20>)
 8005cee:	f7fd fe28 	bl	8003942 <HAL_UART_Transmit>
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20004524 	.word	0x20004524

08005d00 <arm_calc_thread>:

void arm_calc_thread( void const * argument )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	uint8_t string[11];
	sprintf((char*)string, "helloworld");
 8005d08:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <arm_calc_thread+0x34>)
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d10:	c303      	stmia	r3!, {r0, r1}
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	3302      	adds	r3, #2
 8005d16:	0c12      	lsrs	r2, r2, #16
 8005d18:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		HAL_UART_Transmit(&huart7,string,10,0xffff);
 8005d1a:	f107 010c 	add.w	r1, r7, #12
 8005d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d22:	220a      	movs	r2, #10
 8005d24:	4804      	ldr	r0, [pc, #16]	; (8005d38 <arm_calc_thread+0x38>)
 8005d26:	f7fd fe0c 	bl	8003942 <HAL_UART_Transmit>
		osDelay(1000); // 挂起1000ms
 8005d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d2e:	f7fe fad2 	bl	80042d6 <osDelay>
		HAL_UART_Transmit(&huart7,string,10,0xffff);
 8005d32:	e7f2      	b.n	8005d1a <arm_calc_thread+0x1a>
 8005d34:	08009ca0 	.word	0x08009ca0
 8005d38:	20004524 	.word	0x20004524
 8005d3c:	00000000 	.word	0x00000000

08005d40 <kalman_thread>:
	}
}

void kalman_thread( void const * argument )
{
 8005d40:	b5b0      	push	{r4, r5, r7, lr}
 8005d42:	f5ad 6d45 	sub.w	sp, sp, #3152	; 0xc50
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	6018      	str	r0, [r3, #0]
	uint8_t i;

	double T = 0.001 / 0.98;
 8005d4c:	f20f 646c 	addw	r4, pc, #1644	; 0x66c
 8005d50:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d54:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8005d58:	e9c2 3400 	strd	r3, r4, [r2]

	float A_initval[] = {
 8005d5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005d60:	f507 623b 	add.w	r2, r7, #2992	; 0xbb0
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005d6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d6e:	f7fa fe95 	bl	8000a9c <__aeabi_d2f>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f607 32b4 	addw	r2, r7, #2996	; 0xbb4
 8005d78:	6013      	str	r3, [r2, #0]
		1,		T,		T*T/2,	0,		0,		0,
 8005d7a:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 8005d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d8a:	f7fa fbed 	bl	8000568 <__aeabi_dmul>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	4618      	mov	r0, r3
 8005d94:	4621      	mov	r1, r4
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d9e:	f7fa fd0d 	bl	80007bc <__aeabi_ddiv>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	4618      	mov	r0, r3
 8005da8:	4621      	mov	r1, r4
 8005daa:	f7fa fe77 	bl	8000a9c <__aeabi_d2f>
 8005dae:	4603      	mov	r3, r0
	float A_initval[] = {
 8005db0:	f607 32b8 	addw	r2, r7, #3000	; 0xbb8
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	f607 32c4 	addw	r2, r7, #3012	; 0xbc4
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	f607 32c8 	addw	r2, r7, #3016	; 0xbc8
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005de2:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005df0:	f7fa fe54 	bl	8000a9c <__aeabi_d2f>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f507 623d 	add.w	r2, r7, #3024	; 0xbd0
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	f607 32d4 	addw	r2, r7, #3028	; 0xbd4
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	f607 32dc 	addw	r2, r7, #3036	; 0xbdc
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	f607 32e4 	addw	r2, r7, #3044	; 0xbe4
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e32:	f607 32e8 	addw	r2, r7, #3048	; 0xbe8
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	f607 32ec 	addw	r2, r7, #3052	; 0xbec
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	f507 623f 	add.w	r2, r7, #3056	; 0xbf0
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f04f 0300 	mov.w	r3, #0
 8005e5a:	f607 32f8 	addw	r2, r7, #3064	; 0xbf8
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	f607 32fc 	addw	r2, r7, #3068	; 0xbfc
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e78:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e86:	f7fa fe09 	bl	8000a9c <__aeabi_d2f>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8005e90:	6013      	str	r3, [r2, #0]
		0, 		1,		T,		0,		0,		0,
		0,		0,		1,		0,		0,		0,
		0,		0,		0,		1,		T,		T*T/2,
 8005e92:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 8005e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea2:	f7fa fb61 	bl	8000568 <__aeabi_dmul>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	4618      	mov	r0, r3
 8005eac:	4621      	mov	r1, r4
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eb6:	f7fa fc81 	bl	80007bc <__aeabi_ddiv>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f7fa fdeb 	bl	8000a9c <__aeabi_d2f>
 8005ec6:	4603      	mov	r3, r0
	float A_initval[] = {
 8005ec8:	f607 420c 	addw	r2, r7, #3084	; 0xc0c
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	f607 4214 	addw	r2, r7, #3092	; 0xc14
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	f607 4218 	addw	r2, r7, #3096	; 0xc18
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	f607 421c 	addw	r2, r7, #3100	; 0xc1c
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005efa:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f08:	f7fa fdc8 	bl	8000a9c <__aeabi_d2f>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	f607 4234 	addw	r2, r7, #3124	; 0xc34
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	f607 4238 	addw	r2, r7, #3128	; 0xc38
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005f4a:	f607 423c 	addw	r2, r7, #3132	; 0xc3c
 8005f4e:	6013      	str	r3, [r2, #0]
		0,		0,		0,		0,		1,		T,
		0,		0,		0,		0,		0,		1
	};
	float Xk_initval[] = {0,0,0,0,0,0};
 8005f50:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	611a      	str	r2, [r3, #16]
 8005f60:	615a      	str	r2, [r3, #20]
	float Z_initval[] = {0,0,0,0};
 8005f62:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	605a      	str	r2, [r3, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
 8005f6e:	60da      	str	r2, [r3, #12]
	float H_initval[] = {
 8005f70:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8005f74:	4618      	mov	r0, r3
 8005f76:	2360      	movs	r3, #96	; 0x60
 8005f78:	461a      	mov	r2, r3
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	f003 f9f3 	bl	8009366 <memset>
 8005f80:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8005f84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8005f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f92:	621a      	str	r2, [r3, #32]
 8005f94:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8005f98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8005f9e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8005fa2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fa6:	65da      	str	r2, [r3, #92]	; 0x5c
		0,1,0,0,0,0,
		0,0,1,0,0,0,
		0,0,0,0,1,0,
		0,0,0,0,0,1
	};
	float P_initval[] = {
 8005fa8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fac:	4618      	mov	r0, r3
 8005fae:	2390      	movs	r3, #144	; 0x90
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f003 f9d7 	bl	8009366 <memset>
 8005fb8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fca:	61da      	str	r2, [r3, #28]
 8005fcc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8005fd6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
 8005fe0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fe4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fe8:	671a      	str	r2, [r3, #112]	; 0x70
 8005fea:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005fee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		0,0,1,0,0,0,
		0,0,0,1,0,0,
		0,0,0,0,1,0,
		0,0,0,0,0,1,
	};
	float Q_initval[] = {
 8005ff6:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	2390      	movs	r3, #144	; 0x90
 8005ffe:	461a      	mov	r2, r3
 8006000:	2100      	movs	r1, #0
 8006002:	f003 f9b0 	bl	8009366 <memset>
 8006006:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800600a:	4ae7      	ldr	r2, [pc, #924]	; (80063a8 <kalman_thread+0x668>)
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006012:	4ae6      	ldr	r2, [pc, #920]	; (80063ac <kalman_thread+0x66c>)
 8006014:	61da      	str	r2, [r3, #28]
 8006016:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800601a:	4ae5      	ldr	r2, [pc, #916]	; (80063b0 <kalman_thread+0x670>)
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
 800601e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006022:	4ae1      	ldr	r2, [pc, #900]	; (80063a8 <kalman_thread+0x668>)
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
 8006026:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800602a:	4ae0      	ldr	r2, [pc, #896]	; (80063ac <kalman_thread+0x66c>)
 800602c:	671a      	str	r2, [r3, #112]	; 0x70
 800602e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006032:	4adf      	ldr	r2, [pc, #892]	; (80063b0 <kalman_thread+0x670>)
 8006034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		0, 0, 1e-5, 0, 0, 0,
		0, 0, 0, 1e-3, 0, 0,
		0, 0, 0, 0, 1e-7, 0,
		0, 0, 0, 0, 0, 1e-5
	};
	float R_initval[] = {
 8006038:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800603c:	4add      	ldr	r2, [pc, #884]	; (80063b4 <kalman_thread+0x674>)
 800603e:	461c      	mov	r4, r3
 8006040:	4615      	mov	r5, r2
 8006042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800604c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0, 0, 1.2e-5, 0,
		0, 0, 0, 7.5e-5
	};

	// 当前状态，上一时刻状态，先验状态
	CREATE_MATRIX_ONSTACK(6,1,Xk,Xk_initval); //当前时刻状态
 8006056:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800605a:	2206      	movs	r2, #6
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006062:	2201      	movs	r2, #1
 8006064:	705a      	strb	r2, [r3, #1]
 8006066:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800606a:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 800606e:	605a      	str	r2, [r3, #4]
 8006070:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8006074:	f607 3398 	addw	r3, r7, #2968	; 0xb98
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fcc2 	bl	8006a04 <setMatrix>
	CREATE_MATRIX_ONSTACK(6,1,X_,NULL);
 8006080:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006084:	2206      	movs	r2, #6
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800608c:	2201      	movs	r2, #1
 800608e:	705a      	strb	r2, [r3, #1]
 8006090:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006094:	f607 1288 	addw	r2, r7, #2440	; 0x988
 8006098:	605a      	str	r2, [r3, #4]

	// 当前误差协方差，上一时刻误差协方差，先验误差协方差
	CREATE_MATRIX_ONSTACK(6,6,Pk,P_initval);
 800609a:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800609e:	2206      	movs	r2, #6
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80060a6:	2206      	movs	r2, #6
 80060a8:	705a      	strb	r2, [r3, #1]
 80060aa:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80060ae:	f507 620f 	add.w	r2, r7, #2288	; 0x8f0
 80060b2:	605a      	str	r2, [r3, #4]
 80060b4:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 80060b8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80060bc:	4611      	mov	r1, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fca0 	bl	8006a04 <setMatrix>
	CREATE_MATRIX_ONSTACK(6,6,P_,NULL);
 80060c4:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 80060c8:	2206      	movs	r2, #6
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 80060d0:	2206      	movs	r2, #6
 80060d2:	705a      	strb	r2, [r3, #1]
 80060d4:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 80060d8:	f607 0258 	addw	r2, r7, #2136	; 0x858
 80060dc:	605a      	str	r2, [r3, #4]

	// A,B,G,H
	CREATE_MATRIX_ONSTACK(6,6,A,A_initval); //状态转移矩阵
 80060de:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80060e2:	2206      	movs	r2, #6
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80060ea:	2206      	movs	r2, #6
 80060ec:	705a      	strb	r2, [r3, #1]
 80060ee:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80060f2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80060f6:	605a      	str	r2, [r3, #4]
 80060f8:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 80060fc:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc7e 	bl	8006a04 <setMatrix>
	CREATE_MATRIX_ONSTACK(4,6,H,H_initval); //观测矩阵
 8006108:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800610c:	2204      	movs	r2, #4
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8006114:	2206      	movs	r2, #6
 8006116:	705a      	strb	r2, [r3, #1]
 8006118:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800611c:	f507 62eb 	add.w	r2, r7, #1880	; 0x758
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8006126:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 fc69 	bl	8006a04 <setMatrix>

	// 控制矩阵，观测矩阵
	CREATE_MATRIX_ONSTACK(4,1,Z,Z_initval); //观测结果
 8006132:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006136:	2204      	movs	r2, #4
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800613e:	2201      	movs	r2, #1
 8006140:	705a      	strb	r2, [r3, #1]
 8006142:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006146:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 8006150:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fc54 	bl	8006a04 <setMatrix>

	// 过程噪声协方差矩阵，量测噪声协方差矩阵
	CREATE_MATRIX_ONSTACK(6,6,Q,Q_initval); //过程噪声
 800615c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8006160:	2206      	movs	r2, #6
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8006168:	2206      	movs	r2, #6
 800616a:	705a      	strb	r2, [r3, #1]
 800616c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8006170:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	f507 62e7 	add.w	r2, r7, #1848	; 0x738
 800617a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800617e:	4611      	mov	r1, r2
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fc3f 	bl	8006a04 <setMatrix>
	CREATE_MATRIX_ONSTACK(4,4,R,R_initval); //测量噪声
 8006186:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800618a:	2204      	movs	r2, #4
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8006192:	2204      	movs	r2, #4
 8006194:	705a      	strb	r2, [r3, #1]
 8006196:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800619a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80061a4:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fc2a 	bl	8006a04 <setMatrix>

	// 卡尔曼增益矩阵
	CREATE_MATRIX_ONSTACK(6,4,Kk,NULL);
 80061b0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80061b4:	2206      	movs	r2, #6
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80061bc:	2204      	movs	r2, #4
 80061be:	705a      	strb	r2, [r3, #1]
 80061c0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80061c4:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 80061c8:	605a      	str	r2, [r3, #4]

	// 用于暂存转置矩阵
	CREATE_MATRIX_ONSTACK(6,6,Atrans,NULL);
 80061ca:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80061ce:	2206      	movs	r2, #6
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80061d6:	2206      	movs	r2, #6
 80061d8:	705a      	strb	r2, [r3, #1]
 80061da:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80061de:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80061e2:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(6,4,Htrans,NULL);
 80061e4:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061e8:	2206      	movs	r2, #6
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061f0:	2204      	movs	r2, #4
 80061f2:	705a      	strb	r2, [r3, #1]
 80061f4:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061f8:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80061fc:	605a      	str	r2, [r3, #4]
	transMatrix(&A,&Atrans);
 80061fe:	f507 62be 	add.w	r2, r7, #1520	; 0x5f0
 8006202:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fc27 	bl	8006a5c <transMatrix>
	transMatrix(&H,&Htrans);
 800620e:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 8006212:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fc1f 	bl	8006a5c <transMatrix>

	// 单位阵
	CREATE_MATRIX_ONSTACK(6,6,EYE,P_initval);
 800621e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8006222:	2206      	movs	r2, #6
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800622a:	2206      	movs	r2, #6
 800622c:	705a      	strb	r2, [r3, #1]
 800622e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8006232:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8006236:	605a      	str	r2, [r3, #4]
 8006238:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800623c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fbde 	bl	8006a04 <setMatrix>

	// 公式二所用的缓冲矩阵
	CREATE_MATRIX_ONSTACK(6,6,TMP21,NULL);
 8006248:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800624c:	2206      	movs	r2, #6
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8006254:	2206      	movs	r2, #6
 8006256:	705a      	strb	r2, [r3, #1]
 8006258:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800625c:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8006260:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(6,6,TMP22,NULL);
 8006262:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8006266:	2206      	movs	r2, #6
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800626e:	2206      	movs	r2, #6
 8006270:	705a      	strb	r2, [r3, #1]
 8006272:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8006276:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800627a:	605a      	str	r2, [r3, #4]

	// 公式三所用的缓冲矩阵
	CREATE_MATRIX_ONSTACK(6,4,TMP31,NULL);
 800627c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006280:	2206      	movs	r2, #6
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006288:	2204      	movs	r2, #4
 800628a:	705a      	strb	r2, [r3, #1]
 800628c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006290:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8006294:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(4,6,TMP32,NULL);
 8006296:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800629a:	2204      	movs	r2, #4
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80062a2:	2206      	movs	r2, #6
 80062a4:	705a      	strb	r2, [r3, #1]
 80062a6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80062aa:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80062ae:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(4,4,TMP33,NULL);
 80062b0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80062b4:	2204      	movs	r2, #4
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80062bc:	2204      	movs	r2, #4
 80062be:	705a      	strb	r2, [r3, #1]
 80062c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80062c4:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80062c8:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(4,4,TMP34,NULL);
 80062ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80062ce:	2204      	movs	r2, #4
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80062d6:	2204      	movs	r2, #4
 80062d8:	705a      	strb	r2, [r3, #1]
 80062da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80062de:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80062e2:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(4,4,TMP35,NULL);
 80062e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80062e8:	2204      	movs	r2, #4
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80062f0:	2204      	movs	r2, #4
 80062f2:	705a      	strb	r2, [r3, #1]
 80062f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80062f8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80062fc:	605a      	str	r2, [r3, #4]

	// 公式四所用的缓冲矩阵
	CREATE_MATRIX_ONSTACK(4,1,TMP41,NULL);
 80062fe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006302:	2204      	movs	r2, #4
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800630a:	2201      	movs	r2, #1
 800630c:	705a      	strb	r2, [r3, #1]
 800630e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8006312:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8006316:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(4,1,TMP42,NULL);
 8006318:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800631c:	2204      	movs	r2, #4
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8006324:	2201      	movs	r2, #1
 8006326:	705a      	strb	r2, [r3, #1]
 8006328:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800632c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8006330:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(6,1,TMP43,NULL);
 8006332:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006336:	2206      	movs	r2, #6
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800633e:	2201      	movs	r2, #1
 8006340:	705a      	strb	r2, [r3, #1]
 8006342:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006346:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800634a:	605a      	str	r2, [r3, #4]

	// 公式五所用的缓冲矩阵
	CREATE_MATRIX_ONSTACK(6,6,TMP51,NULL);
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	2206      	movs	r2, #6
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	2206      	movs	r2, #6
 800635a:	705a      	strb	r2, [r3, #1]
 800635c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006360:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006364:	605a      	str	r2, [r3, #4]
	CREATE_MATRIX_ONSTACK(6,6,TMP52,NULL);
 8006366:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800636a:	2206      	movs	r2, #6
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006372:	2206      	movs	r2, #6
 8006374:	705a      	strb	r2, [r3, #1]
 8006376:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800637a:	f107 0208 	add.w	r2, r7, #8
 800637e:	605a      	str	r2, [r3, #4]

	osDelay(500);
 8006380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006384:	f7fd ffa7 	bl	80042d6 <osDelay>

	while (1)
	{

		/* 获取当前时刻观测加速度 */
		observe.ax = -I.ay;
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <kalman_thread+0x678>)
 800638a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800638e:	4618      	mov	r0, r3
 8006390:	4621      	mov	r1, r4
 8006392:	f7fa fb83 	bl	8000a9c <__aeabi_d2f>
 8006396:	4603      	mov	r3, r0
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef1 7a67 	vneg.f32	s15, s15
 80063a0:	e010      	b.n	80063c4 <kalman_thread+0x684>
 80063a2:	bf00      	nop
 80063a4:	f3af 8000 	nop.w
 80063a8:	3a83126f 	.word	0x3a83126f
 80063ac:	33d6bf95 	.word	0x33d6bf95
 80063b0:	3727c5ac 	.word	0x3727c5ac
 80063b4:	08009cac 	.word	0x08009cac
 80063b8:	200042f8 	.word	0x200042f8
 80063bc:	ec259dc8 	.word	0xec259dc8
 80063c0:	3f50b7e6 	.word	0x3f50b7e6
 80063c4:	4bc5      	ldr	r3, [pc, #788]	; (80066dc <kalman_thread+0x99c>)
 80063c6:	edc3 7a02 	vstr	s15, [r3, #8]
		observe.ay = I.ax;
 80063ca:	4bc5      	ldr	r3, [pc, #788]	; (80066e0 <kalman_thread+0x9a0>)
 80063cc:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80063d0:	4618      	mov	r0, r3
 80063d2:	4621      	mov	r1, r4
 80063d4:	f7fa fb62 	bl	8000a9c <__aeabi_d2f>
 80063d8:	4602      	mov	r2, r0
 80063da:	4bc0      	ldr	r3, [pc, #768]	; (80066dc <kalman_thread+0x99c>)
 80063dc:	60da      	str	r2, [r3, #12]

		/* 获取当前时刻观测速度 */
		for (i = 0; i < 4; i ++)
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 3c4f 	strb.w	r3, [r7, #3151]	; 0xc4f
 80063e4:	e029      	b.n	800643a <kalman_thread+0x6fa>
		{
			vel[i] = S.velocity[i] * 8.9e-5f * S.dir[i];
 80063e6:	f897 3c4f 	ldrb.w	r3, [r7, #3151]	; 0xc4f
 80063ea:	4abe      	ldr	r2, [pc, #760]	; (80066e4 <kalman_thread+0x9a4>)
 80063ec:	3304      	adds	r3, #4
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fe:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80066e8 <kalman_thread+0x9a8>
 8006402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006406:	f897 3c4f 	ldrb.w	r3, [r7, #3151]	; 0xc4f
 800640a:	4ab6      	ldr	r2, [pc, #728]	; (80066e4 <kalman_thread+0x9a4>)
 800640c:	3394      	adds	r3, #148	; 0x94
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	4413      	add	r3, r2
 8006412:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800641e:	f897 3c4f 	ldrb.w	r3, [r7, #3151]	; 0xc4f
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	4ab1      	ldr	r2, [pc, #708]	; (80066ec <kalman_thread+0x9ac>)
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < 4; i ++)
 8006430:	f897 3c4f 	ldrb.w	r3, [r7, #3151]	; 0xc4f
 8006434:	3301      	adds	r3, #1
 8006436:	f887 3c4f 	strb.w	r3, [r7, #3151]	; 0xc4f
 800643a:	f897 3c4f 	ldrb.w	r3, [r7, #3151]	; 0xc4f
 800643e:	2b03      	cmp	r3, #3
 8006440:	d9d1      	bls.n	80063e6 <kalman_thread+0x6a6>
		}
		observe.vy = (vel[0] + vel[1] + vel[2] + vel[3]) / 4.f;
 8006442:	4baa      	ldr	r3, [pc, #680]	; (80066ec <kalman_thread+0x9ac>)
 8006444:	ed93 7a00 	vldr	s14, [r3]
 8006448:	4ba8      	ldr	r3, [pc, #672]	; (80066ec <kalman_thread+0x9ac>)
 800644a:	edd3 7a01 	vldr	s15, [r3, #4]
 800644e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006452:	4ba6      	ldr	r3, [pc, #664]	; (80066ec <kalman_thread+0x9ac>)
 8006454:	edd3 7a02 	vldr	s15, [r3, #8]
 8006458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800645c:	4ba3      	ldr	r3, [pc, #652]	; (80066ec <kalman_thread+0x9ac>)
 800645e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006466:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800646a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800646e:	4b9b      	ldr	r3, [pc, #620]	; (80066dc <kalman_thread+0x99c>)
 8006470:	edc3 7a05 	vstr	s15, [r3, #20]
		observe.vx = (vel[3] - vel[2] + vel[1] - vel[0]) / 4.f;
 8006474:	4b9d      	ldr	r3, [pc, #628]	; (80066ec <kalman_thread+0x9ac>)
 8006476:	ed93 7a03 	vldr	s14, [r3, #12]
 800647a:	4b9c      	ldr	r3, [pc, #624]	; (80066ec <kalman_thread+0x9ac>)
 800647c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006484:	4b99      	ldr	r3, [pc, #612]	; (80066ec <kalman_thread+0x9ac>)
 8006486:	edd3 7a01 	vldr	s15, [r3, #4]
 800648a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800648e:	4b97      	ldr	r3, [pc, #604]	; (80066ec <kalman_thread+0x9ac>)
 8006490:	edd3 7a00 	vldr	s15, [r3]
 8006494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006498:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800649c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064a0:	4b8e      	ldr	r3, [pc, #568]	; (80066dc <kalman_thread+0x99c>)
 80064a2:	edc3 7a04 	vstr	s15, [r3, #16]

		/* 准备好观测向量 */
		Z_initval[0] = observe.vx;
 80064a6:	4b8d      	ldr	r3, [pc, #564]	; (80066dc <kalman_thread+0x99c>)
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f607 3288 	addw	r2, r7, #2952	; 0xb88
 80064ae:	6013      	str	r3, [r2, #0]
		Z_initval[1] = observe.ax;
 80064b0:	4b8a      	ldr	r3, [pc, #552]	; (80066dc <kalman_thread+0x99c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f607 328c 	addw	r2, r7, #2956	; 0xb8c
 80064b8:	6013      	str	r3, [r2, #0]
		Z_initval[2] = observe.vy;
 80064ba:	4b88      	ldr	r3, [pc, #544]	; (80066dc <kalman_thread+0x99c>)
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f507 6239 	add.w	r2, r7, #2960	; 0xb90
 80064c2:	6013      	str	r3, [r2, #0]
		Z_initval[3] = observe.ay;
 80064c4:	4b85      	ldr	r3, [pc, #532]	; (80066dc <kalman_thread+0x99c>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f607 3294 	addw	r2, r7, #2964	; 0xb94
 80064cc:	6013      	str	r3, [r2, #0]
		setMatrix(Z_initval,&Z);
 80064ce:	f507 62ea 	add.w	r2, r7, #1872	; 0x750
 80064d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fa93 	bl	8006a04 <setMatrix>

		/* X_ = A*Xkprv */
		multiMatrix(&A,&Xk,&X_);
 80064de:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 80064e2:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 80064e6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 ff40 	bl	8007370 <multiMatrix>

		/* P_ = A*Pkprv*AT + Q */
		multiMatrix(&A,&Pk,&TMP21);
 80064f0:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80064f4:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 80064f8:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 ff37 	bl	8007370 <multiMatrix>
		multiMatrix(&TMP21,&Atrans,&TMP22); // TMP2=A*Pkprv*AT
 8006502:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8006506:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 800650a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800650e:	4618      	mov	r0, r3
 8006510:	f000 ff2e 	bl	8007370 <multiMatrix>
		addMatrix(&TMP22,&Q,&P_);
 8006514:	f607 02e8 	addw	r2, r7, #2280	; 0x8e8
 8006518:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800651c:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fe95 	bl	8007250 <addMatrix>

		/* Kk = P_*HT*(H*P_*HT + R)-1 */
		multiMatrix(&P_,&Htrans,&TMP31); // TMP1=P_*HT
 8006526:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800652a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800652e:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 8006532:	4618      	mov	r0, r3
 8006534:	f000 ff1c 	bl	8007370 <multiMatrix>
		multiMatrix(&H,&P_,&TMP32); //TMP2=H*P_
 8006538:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800653c:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8006540:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8006544:	4618      	mov	r0, r3
 8006546:	f000 ff13 	bl	8007370 <multiMatrix>
		multiMatrix(&TMP32,&Htrans,&TMP33); //TMP3=H*P_*HT
 800654a:	f507 7216 	add.w	r2, r7, #600	; 0x258
 800654e:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8006552:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ff0a 	bl	8007370 <multiMatrix>
		addMatrix(&TMP33,&R,&TMP34); //TMP4=H*P_*HT+R
 800655c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8006560:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8006564:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fe71 	bl	8007250 <addMatrix>
		invMatrix(&TMP34,&TMP35); //TMP5=(H*P_*HT+R)-1
 800656e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8006572:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fabd 	bl	8006af8 <invMatrix>
		multiMatrix(&TMP31,&TMP35,&Kk);
 800657e:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 8006582:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8006586:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fef0 	bl	8007370 <multiMatrix>

		/* Xk = X_ + Kk(Zk - H*X_) */
		multiMatrix(&H,&X_,&TMP41); // TMP1=H*X_
 8006590:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8006594:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8006598:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fee7 	bl	8007370 <multiMatrix>
		subMatrix(&Z,&TMP41,&TMP42); // TMP2=Zk - H*X_
 80065a2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80065a6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80065aa:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fe96 	bl	80072e0 <subMatrix>
		multiMatrix(&Kk,&TMP42,&TMP43); // TMP3=Kk*(Zk - H*X_)
 80065b4:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80065b8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80065bc:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fed5 	bl	8007370 <multiMatrix>
		addMatrix(&X_,&TMP43,&Xk); // Xk = X_ + Kk*(Zk - H*X_)
 80065c6:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80065ca:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80065ce:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fe3c 	bl	8007250 <addMatrix>

		/* Pk = (I - Kk*H)*P_ */
		multiMatrix(&Kk,&H,&TMP51); // TMP1=Kk*H
 80065d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065dc:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 80065e0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fec3 	bl	8007370 <multiMatrix>
		subMatrix(&EYE,&TMP51,&TMP52); // TMP2=I - Kk*H
 80065ea:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80065ee:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80065f2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fe72 	bl	80072e0 <subMatrix>
		multiMatrix(&TMP52,&P_,&Pk); // Pk=(I - Kk*H)*P_
 80065fc:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8006600:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8006604:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006608:	4618      	mov	r0, r3
 800660a:	f000 feb1 	bl	8007370 <multiMatrix>

		if (fix_cmd == FIX_TRUE)
 800660e:	4b38      	ldr	r3, [pc, #224]	; (80066f0 <kalman_thread+0x9b0>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d12b      	bne.n	800666e <kalman_thread+0x92e>
		{
			fix_cmd = FIX_FALSE;
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <kalman_thread+0x9b0>)
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
			Xk.element[0] = 0;
 800661c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
			Xk.element[3] = 0;
 8006628:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	330c      	adds	r3, #12
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
			Xk.element[1] = 0;
 8006636:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
			Xk.element[2] = 0;
 8006644:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	3308      	adds	r3, #8
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
			Xk.element[4] = 0;
 8006652:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	3310      	adds	r3, #16
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
			Xk.element[5] = 0;
 8006660:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	3314      	adds	r3, #20
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
		}

		estimate.x  = Xk.element[0] * gainx;
 800666e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	ed93 7a00 	vldr	s14, [r3]
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <kalman_thread+0x9b4>)
 800667a:	edd3 7a00 	vldr	s15, [r3]
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <kalman_thread+0x9b8>)
 8006684:	edc3 7a00 	vstr	s15, [r3]
		estimate.vx = Xk.element[1];
 8006688:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <kalman_thread+0x9b8>)
 8006692:	6113      	str	r3, [r2, #16]
		estimate.ax = Xk.element[2];
 8006694:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <kalman_thread+0x9b8>)
 800669e:	6093      	str	r3, [r2, #8]
		estimate.y  = Xk.element[3] * gainy;
 80066a0:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	330c      	adds	r3, #12
 80066a8:	ed93 7a00 	vldr	s14, [r3]
 80066ac:	4b13      	ldr	r3, [pc, #76]	; (80066fc <kalman_thread+0x9bc>)
 80066ae:	edd3 7a00 	vldr	s15, [r3]
 80066b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <kalman_thread+0x9b8>)
 80066b8:	edc3 7a01 	vstr	s15, [r3, #4]
		estimate.vy = Xk.element[4];
 80066bc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <kalman_thread+0x9b8>)
 80066c6:	6153      	str	r3, [r2, #20]
		estimate.ay = Xk.element[5];
 80066c8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	4a09      	ldr	r2, [pc, #36]	; (80066f8 <kalman_thread+0x9b8>)
 80066d2:	60d3      	str	r3, [r2, #12]

		osDelay(1);
 80066d4:	2001      	movs	r0, #1
 80066d6:	f7fd fdfe 	bl	80042d6 <osDelay>
		observe.ax = -I.ay;
 80066da:	e655      	b.n	8006388 <kalman_thread+0x648>
 80066dc:	200040ec 	.word	0x200040ec
 80066e0:	200042f8 	.word	0x200042f8
 80066e4:	20004114 	.word	0x20004114
 80066e8:	38baa583 	.word	0x38baa583
 80066ec:	2000427c 	.word	0x2000427c
 80066f0:	2000000c 	.word	0x2000000c
 80066f4:	20004330 	.word	0x20004330
 80066f8:	20004334 	.word	0x20004334
 80066fc:	200040e8 	.word	0x200040e8

08006700 <spdm_thread>:
	}
}

void spdm_thread( void const * argument )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af02      	add	r7, sp, #8
 8006706:	6078      	str	r0, [r7, #4]
	while (1)
	{
		SPDM_CalcPid(&S);
 8006708:	480d      	ldr	r0, [pc, #52]	; (8006740 <spdm_thread+0x40>)
 800670a:	f001 fdbf 	bl	800828c <SPDM_CalcPid>
		SPDM_SendCmd(&S, S.volt[0], S.volt[1], S.volt[2], S.volt[3]);
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <spdm_thread+0x40>)
 8006710:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006714:	b219      	sxth	r1, r3
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <spdm_thread+0x40>)
 8006718:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800671c:	b21a      	sxth	r2, r3
 800671e:	4b08      	ldr	r3, [pc, #32]	; (8006740 <spdm_thread+0x40>)
 8006720:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006724:	b218      	sxth	r0, r3
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <spdm_thread+0x40>)
 8006728:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800672c:	b21b      	sxth	r3, r3
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4603      	mov	r3, r0
 8006732:	4803      	ldr	r0, [pc, #12]	; (8006740 <spdm_thread+0x40>)
 8006734:	f002 f9bc 	bl	8008ab0 <SPDM_SendCmd>
		osDelay(1);
 8006738:	2001      	movs	r0, #1
 800673a:	f7fd fdcc 	bl	80042d6 <osDelay>
		SPDM_CalcPid(&S);
 800673e:	e7e3      	b.n	8006708 <spdm_thread+0x8>
 8006740:	20004114 	.word	0x20004114

08006744 <pospid_calc_thread>:
	}
}

void pospid_calc_thread(void const * argument)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	float kp0, kp1;
	uint8_t mark, i;

	while (1)
	{
		if (pospid.rough == ROUGH_CONV)
 800674c:	4b75      	ldr	r3, [pc, #468]	; (8006924 <pospid_calc_thread+0x1e0>)
 800674e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	d117      	bne.n	8006786 <pospid_calc_thread+0x42>
		{
			SPDM_CmdVel(&S,\
 8006756:	4b74      	ldr	r3, [pc, #464]	; (8006928 <pospid_calc_thread+0x1e4>)
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	4b72      	ldr	r3, [pc, #456]	; (8006928 <pospid_calc_thread+0x1e4>)
 800675e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006762:	4b71      	ldr	r3, [pc, #452]	; (8006928 <pospid_calc_thread+0x1e4>)
 8006764:	edd3 6a02 	vldr	s13, [r3, #8]
 8006768:	4b6f      	ldr	r3, [pc, #444]	; (8006928 <pospid_calc_thread+0x1e4>)
 800676a:	ed93 6a03 	vldr	s12, [r3, #12]
 800676e:	eef0 1a46 	vmov.f32	s3, s12
 8006772:	eeb0 1a66 	vmov.f32	s2, s13
 8006776:	eef0 0a47 	vmov.f32	s1, s14
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	486b      	ldr	r0, [pc, #428]	; (800692c <pospid_calc_thread+0x1e8>)
 8006780:	f002 f973 	bl	8008a6a <SPDM_CmdVel>
 8006784:	e0c9      	b.n	800691a <pospid_calc_thread+0x1d6>
				fix_vel[3]\
			);
		}
		else
		{
			if (pospid.cnt < 300)
 8006786:	4b67      	ldr	r3, [pc, #412]	; (8006924 <pospid_calc_thread+0x1e0>)
 8006788:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800678c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8006930 <pospid_calc_thread+0x1ec>
 8006790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006798:	d50a      	bpl.n	80067b0 <pospid_calc_thread+0x6c>
			{
				pospid.cnt += pospid.inc;
 800679a:	4b62      	ldr	r3, [pc, #392]	; (8006924 <pospid_calc_thread+0x1e0>)
 800679c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80067a0:	4b60      	ldr	r3, [pc, #384]	; (8006924 <pospid_calc_thread+0x1e0>)
 80067a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80067a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067aa:	4b5e      	ldr	r3, [pc, #376]	; (8006924 <pospid_calc_thread+0x1e0>)
 80067ac:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			}
			kp0 = pospid.cnt * 1.f;
 80067b0:	4b5c      	ldr	r3, [pc, #368]	; (8006924 <pospid_calc_thread+0x1e0>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	623b      	str	r3, [r7, #32]
			kp1 = pospid.cnt * 1.f;
 80067b6:	4b5b      	ldr	r3, [pc, #364]	; (8006924 <pospid_calc_thread+0x1e0>)
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	61fb      	str	r3, [r7, #28]


			errx = goalx - estimate.x;
 80067bc:	4b5d      	ldr	r3, [pc, #372]	; (8006934 <pospid_calc_thread+0x1f0>)
 80067be:	ed93 7a00 	vldr	s14, [r3]
 80067c2:	4b5d      	ldr	r3, [pc, #372]	; (8006938 <pospid_calc_thread+0x1f4>)
 80067c4:	edd3 7a00 	vldr	s15, [r3]
 80067c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067cc:	edc7 7a06 	vstr	s15, [r7, #24]
			erry = goaly - estimate.y;
 80067d0:	4b5a      	ldr	r3, [pc, #360]	; (800693c <pospid_calc_thread+0x1f8>)
 80067d2:	ed93 7a00 	vldr	s14, [r3]
 80067d6:	4b58      	ldr	r3, [pc, #352]	; (8006938 <pospid_calc_thread+0x1f4>)
 80067d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80067dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e0:	edc7 7a05 	vstr	s15, [r7, #20]

			forward = kp1 * erry;
 80067e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80067e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80067ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f0:	edc7 7a04 	vstr	s15, [r7, #16]
			offset = kp0 * errx;
 80067f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80067f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	edc7 7a03 	vstr	s15, [r7, #12]

			rough_vel[0] = forward - offset;
 8006804:	ed97 7a04 	vldr	s14, [r7, #16]
 8006808:	edd7 7a03 	vldr	s15, [r7, #12]
 800680c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006810:	4b4b      	ldr	r3, [pc, #300]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006812:	edc3 7a00 	vstr	s15, [r3]
			rough_vel[1] = forward + offset;
 8006816:	ed97 7a04 	vldr	s14, [r7, #16]
 800681a:	edd7 7a03 	vldr	s15, [r7, #12]
 800681e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006822:	4b47      	ldr	r3, [pc, #284]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006824:	edc3 7a01 	vstr	s15, [r3, #4]
			rough_vel[2] = forward - offset;
 8006828:	ed97 7a04 	vldr	s14, [r7, #16]
 800682c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006834:	4b42      	ldr	r3, [pc, #264]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006836:	edc3 7a02 	vstr	s15, [r3, #8]
			rough_vel[3] = forward + offset;
 800683a:	ed97 7a04 	vldr	s14, [r7, #16]
 800683e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006846:	4b3e      	ldr	r3, [pc, #248]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006848:	edc3 7a03 	vstr	s15, [r3, #12]

			/* 检查是否有粗略移动速度 */
			if (pospid.rough == ROUGH_DIV)
 800684c:	4b35      	ldr	r3, [pc, #212]	; (8006924 <pospid_calc_thread+0x1e0>)
 800684e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006852:	2b01      	cmp	r3, #1
 8006854:	d14a      	bne.n	80068ec <pospid_calc_thread+0x1a8>
			{
				mark = 1;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				for (i = 0; i < 4; i ++)
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006862:	e023      	b.n	80068ac <pospid_calc_thread+0x168>
				{
					if (rough_vel[i] > ROUGH_ERROR || rough_vel[i] < -ROUGH_ERROR)
 8006864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006868:	4a35      	ldr	r2, [pc, #212]	; (8006940 <pospid_calc_thread+0x1fc>)
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	edd3 7a00 	vldr	s15, [r3]
 8006872:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006944 <pospid_calc_thread+0x200>
 8006876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800687a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687e:	dc0d      	bgt.n	800689c <pospid_calc_thread+0x158>
 8006880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006884:	4a2e      	ldr	r2, [pc, #184]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	edd3 7a00 	vldr	s15, [r3]
 800688e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006948 <pospid_calc_thread+0x204>
 8006892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689a:	d502      	bpl.n	80068a2 <pospid_calc_thread+0x15e>
					{
						mark = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for (i = 0; i < 4; i ++)
 80068a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068a6:	3301      	adds	r3, #1
 80068a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80068ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d9d7      	bls.n	8006864 <pospid_calc_thread+0x120>
					}
				}

				if (mark == 1)
 80068b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d117      	bne.n	80068ec <pospid_calc_thread+0x1a8>
				{
					uint8_t cmd[4];
					cmd[1] = '@';
 80068bc:	2340      	movs	r3, #64	; 0x40
 80068be:	727b      	strb	r3, [r7, #9]
					cmd[2] = '1';
 80068c0:	2331      	movs	r3, #49	; 0x31
 80068c2:	72bb      	strb	r3, [r7, #10]
					cmd[3] = '!';
 80068c4:	2321      	movs	r3, #33	; 0x21
 80068c6:	72fb      	strb	r3, [r7, #11]
					cmd[4] = '\n';
 80068c8:	230a      	movs	r3, #10
 80068ca:	733b      	strb	r3, [r7, #12]
					pospid.rough = ROUGH_CONV;
 80068cc:	4b15      	ldr	r3, [pc, #84]	; (8006924 <pospid_calc_thread+0x1e0>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					HAL_UART_Transmit(&huart8, cmd, 4, 0xffff);
 80068d4:	f107 0108 	add.w	r1, r7, #8
 80068d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068dc:	2204      	movs	r2, #4
 80068de:	481b      	ldr	r0, [pc, #108]	; (800694c <pospid_calc_thread+0x208>)
 80068e0:	f7fd f82f 	bl	8003942 <HAL_UART_Transmit>
					pospid.cnt = 0;
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <pospid_calc_thread+0x1e0>)
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	62da      	str	r2, [r3, #44]	; 0x2c
				}
			}

			/* 还在粗略移动 */
			SPDM_CmdVel(&S,\
 80068ec:	4b14      	ldr	r3, [pc, #80]	; (8006940 <pospid_calc_thread+0x1fc>)
 80068ee:	edd3 7a00 	vldr	s15, [r3]
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <pospid_calc_thread+0x1fc>)
 80068f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80068f8:	4b11      	ldr	r3, [pc, #68]	; (8006940 <pospid_calc_thread+0x1fc>)
 80068fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80068fe:	4b10      	ldr	r3, [pc, #64]	; (8006940 <pospid_calc_thread+0x1fc>)
 8006900:	ed93 6a03 	vldr	s12, [r3, #12]
 8006904:	eef0 1a46 	vmov.f32	s3, s12
 8006908:	eeb0 1a66 	vmov.f32	s2, s13
 800690c:	eef0 0a47 	vmov.f32	s1, s14
 8006910:	eeb0 0a67 	vmov.f32	s0, s15
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <pospid_calc_thread+0x1e8>)
 8006916:	f002 f8a8 	bl	8008a6a <SPDM_CmdVel>
				rough_vel[2],\
				rough_vel[3]\
			);
		}

		osDelay(10);
 800691a:	200a      	movs	r0, #10
 800691c:	f7fd fcdb 	bl	80042d6 <osDelay>
		if (pospid.rough == ROUGH_CONV)
 8006920:	e714      	b.n	800674c <pospid_calc_thread+0x8>
 8006922:	bf00      	nop
 8006924:	20004380 	.word	0x20004380
 8006928:	2000434c 	.word	0x2000434c
 800692c:	20004114 	.word	0x20004114
 8006930:	43960000 	.word	0x43960000
 8006934:	20003de8 	.word	0x20003de8
 8006938:	20004334 	.word	0x20004334
 800693c:	20003dec 	.word	0x20003dec
 8006940:	20004104 	.word	0x20004104
 8006944:	3dcccccd 	.word	0x3dcccccd
 8006948:	bdcccccd 	.word	0xbdcccccd
 800694c:	20004624 	.word	0x20004624

08006950 <imu_thread>:
	}
}

void imu_thread(void const * argument)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	while ( 1 )
	{
		IMU_GetData(&I);
 8006958:	4803      	ldr	r0, [pc, #12]	; (8006968 <imu_thread+0x18>)
 800695a:	f000 ff8b 	bl	8007874 <IMU_GetData>
		osDelay(1);
 800695e:	2001      	movs	r0, #1
 8006960:	f7fd fcb9 	bl	80042d6 <osDelay>
		IMU_GetData(&I);
 8006964:	e7f8      	b.n	8006958 <imu_thread+0x8>
 8006966:	bf00      	nop
 8006968:	200042f8 	.word	0x200042f8

0800696c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	4b10      	ldr	r3, [pc, #64]	; (80069b8 <MX_DMA_Init+0x4c>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <MX_DMA_Init+0x4c>)
 800697c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006980:	6313      	str	r3, [r2, #48]	; 0x30
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <MX_DMA_Init+0x4c>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800698a:	607b      	str	r3, [r7, #4]
 800698c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	2105      	movs	r1, #5
 8006992:	200e      	movs	r0, #14
 8006994:	f7fb f8dc 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006998:	200e      	movs	r0, #14
 800699a:	f7fb f8f5 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800699e:	2200      	movs	r2, #0
 80069a0:	2105      	movs	r1, #5
 80069a2:	2011      	movs	r0, #17
 80069a4:	f7fb f8d4 	bl	8001b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80069a8:	2011      	movs	r0, #17
 80069aa:	f7fb f8ed 	bl	8001b88 <HAL_NVIC_EnableIRQ>

}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023800 	.word	0x40023800

080069bc <isFiniteNumber>:
#include <stdio.h>
#include <stdlib.h>
#include <float.h>
#include "easyMatrix.h"

int isFiniteNumber(double d) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	ed87 0b00 	vstr	d0, [r7]
    return (d<=DBL_MAX&&d>=-DBL_MAX);
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	4b0d      	ldr	r3, [pc, #52]	; (8006a00 <isFiniteNumber+0x44>)
 80069cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d0:	f7fa f846 	bl	8000a60 <__aeabi_dcmple>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00c      	beq.n	80069f4 <isFiniteNumber+0x38>
 80069da:	f04f 32ff 	mov.w	r2, #4294967295
 80069de:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80069e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069e6:	f7fa f845 	bl	8000a74 <__aeabi_dcmpge>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <isFiniteNumber+0x38>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <isFiniteNumber+0x3a>
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	7fefffff 	.word	0x7fefffff

08006a04 <setMatrix>:
struct easyMatrix* setMatrix(DATA_TYPE * const a,struct easyMatrix* c) {
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    uint8 x = c->rows;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	74fb      	strb	r3, [r7, #19]
    uint8 y = c->cols;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	74bb      	strb	r3, [r7, #18]
    int t = x*y;
 8006a1a:	7cfb      	ldrb	r3, [r7, #19]
 8006a1c:	7cba      	ldrb	r2, [r7, #18]
 8006a1e:	fb02 f303 	mul.w	r3, r2, r3
 8006a22:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<t;++i) {
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e00d      	b.n	8006a46 <setMatrix+0x42>
        c->element[i] = a[i];
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	601a      	str	r2, [r3, #0]
    for(int i=0;i<t;++i) {
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3301      	adds	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	dbed      	blt.n	8006a2a <setMatrix+0x26>
    }
    return c;
 8006a4e:	683b      	ldr	r3, [r7, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <transMatrix>:
    }
    return c;
}

struct easyMatrix* transMatrix(struct easyMatrix* const a,
                               struct easyMatrix* c) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
    if(a->rows != c->cols) return NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <transMatrix+0x1a>
 8006a72:	2300      	movs	r3, #0
 8006a74:	e039      	b.n	8006aea <transMatrix+0x8e>
    if(a->cols != c->rows) return NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	785a      	ldrb	r2, [r3, #1]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d001      	beq.n	8006a86 <transMatrix+0x2a>
 8006a82:	2300      	movs	r3, #0
 8006a84:	e031      	b.n	8006aea <transMatrix+0x8e>
    int index = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
    int index_src = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
    for(uint8 ii=0;ii<a->cols;++ii) {
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	e024      	b.n	8006ade <transMatrix+0x82>
        index_src=ii;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	613b      	str	r3, [r7, #16]
        for(uint8 jj=0;jj<a->rows;++jj) {
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]
 8006a9c:	e017      	b.n	8006ace <transMatrix+0x72>
            //c->element[index] = a->element[jj*a->cols+ii];
            c->element[index] = a->element[index_src];
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	601a      	str	r2, [r3, #0]
            index++;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
            index_src+=a->cols;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
        for(uint8 jj=0;jj<a->rows;++jj) {
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	3301      	adds	r3, #1
 8006acc:	73bb      	strb	r3, [r7, #14]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	7bba      	ldrb	r2, [r7, #14]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d3e2      	bcc.n	8006a9e <transMatrix+0x42>
    for(uint8 ii=0;ii<a->cols;++ii) {
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	3301      	adds	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	7bfa      	ldrb	r2, [r7, #15]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d3d5      	bcc.n	8006a94 <transMatrix+0x38>
        }
    }
    return c;
 8006ae8:	683b      	ldr	r3, [r7, #0]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <invMatrix>:
    DELETE_DYNAMIC_MATRIX(ret);
    return out;
}

DATA_TYPE invMatrix(struct easyMatrix *const in ,
                    struct easyMatrix * out) {
 8006af8:	b5b0      	push	{r4, r5, r7, lr}
 8006afa:	b096      	sub	sp, #88	; 0x58
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	466b      	mov	r3, sp
 8006b04:	461d      	mov	r5, r3
    if(in->cols!=in->rows) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	785a      	ldrb	r2, [r3, #1]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d005      	beq.n	8006b1e <invMatrix+0x26>
        printf("ERROR:invMatrix cols and rows not equal!\n");
 8006b12:	48a4      	ldr	r0, [pc, #656]	; (8006da4 <invMatrix+0x2ac>)
 8006b14:	f002 fd34 	bl	8009580 <puts>
        return 0;
 8006b18:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8006da8 <invMatrix+0x2b0>
 8006b1c:	e13c      	b.n	8006d98 <invMatrix+0x2a0>
    };
    if(in->rows != out->cols||in->cols != out->rows) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	781a      	ldrb	r2, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d105      	bne.n	8006b36 <invMatrix+0x3e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	785a      	ldrb	r2, [r3, #1]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d005      	beq.n	8006b42 <invMatrix+0x4a>
        printf("ERROR:input matrix and output matrix does not match!\n");
 8006b36:	489d      	ldr	r0, [pc, #628]	; (8006dac <invMatrix+0x2b4>)
 8006b38:	f002 fd22 	bl	8009580 <puts>
        return 0;
 8006b3c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8006da8 <invMatrix+0x2b0>
 8006b40:	e12a      	b.n	8006d98 <invMatrix+0x2a0>
    };
    uint8 N = in->cols;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    CREATE_MATRIX_ONSTACK(N,N,L,NULL);
 8006b4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b4e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006b52:	fb02 f003 	mul.w	r0, r2, r3
 8006b56:	1e43      	subs	r3, r0, #1
 8006b58:	653b      	str	r3, [r7, #80]	; 0x50
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	f04f 0400 	mov.w	r4, #0
 8006b6a:	0154      	lsls	r4, r2, #5
 8006b6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b70:	014b      	lsls	r3, r1, #5
 8006b72:	4603      	mov	r3, r0
 8006b74:	4619      	mov	r1, r3
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	f04f 0400 	mov.w	r4, #0
 8006b82:	0154      	lsls	r4, r2, #5
 8006b84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b88:	014b      	lsls	r3, r1, #5
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	3303      	adds	r3, #3
 8006b90:	3307      	adds	r3, #7
 8006b92:	08db      	lsrs	r3, r3, #3
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	ebad 0d03 	sub.w	sp, sp, r3
 8006b9a:	466b      	mov	r3, sp
 8006b9c:	3303      	adds	r3, #3
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ba8:	f887 3020 	strb.w	r3, [r7, #32]
 8006bac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
    CREATE_MATRIX_ONSTACK(N,N,LINV,NULL);
 8006bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bbc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006bc0:	fb02 f003 	mul.w	r0, r2, r3
 8006bc4:	1e43      	subs	r3, r0, #1
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc8:	4603      	mov	r3, r0
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	f04f 0300 	mov.w	r3, #0
 8006bd4:	f04f 0400 	mov.w	r4, #0
 8006bd8:	0154      	lsls	r4, r2, #5
 8006bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bde:	014b      	lsls	r3, r1, #5
 8006be0:	4603      	mov	r3, r0
 8006be2:	4619      	mov	r1, r3
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	f04f 0400 	mov.w	r4, #0
 8006bf0:	0154      	lsls	r4, r2, #5
 8006bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bf6:	014b      	lsls	r3, r1, #5
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	3303      	adds	r3, #3
 8006bfe:	3307      	adds	r3, #7
 8006c00:	08db      	lsrs	r3, r3, #3
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	ebad 0d03 	sub.w	sp, sp, r3
 8006c08:	466b      	mov	r3, sp
 8006c0a:	3303      	adds	r3, #3
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c16:	763b      	strb	r3, [r7, #24]
 8006c18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c1c:	767b      	strb	r3, [r7, #25]
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	61fb      	str	r3, [r7, #28]
    CREATE_MATRIX_ONSTACK(N,N,U,NULL);
 8006c22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c26:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006c2a:	fb02 f003 	mul.w	r0, r2, r3
 8006c2e:	1e43      	subs	r3, r0, #1
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
 8006c32:	4603      	mov	r3, r0
 8006c34:	4619      	mov	r1, r3
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	f04f 0400 	mov.w	r4, #0
 8006c42:	0154      	lsls	r4, r2, #5
 8006c44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c48:	014b      	lsls	r3, r1, #5
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	f04f 0400 	mov.w	r4, #0
 8006c5a:	0154      	lsls	r4, r2, #5
 8006c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c60:	014b      	lsls	r3, r1, #5
 8006c62:	4603      	mov	r3, r0
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	3303      	adds	r3, #3
 8006c68:	3307      	adds	r3, #7
 8006c6a:	08db      	lsrs	r3, r3, #3
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	ebad 0d03 	sub.w	sp, sp, r3
 8006c72:	466b      	mov	r3, sp
 8006c74:	3303      	adds	r3, #3
 8006c76:	089b      	lsrs	r3, r3, #2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c80:	743b      	strb	r3, [r7, #16]
 8006c82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c86:	747b      	strb	r3, [r7, #17]
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	617b      	str	r3, [r7, #20]
    CREATE_MATRIX_ONSTACK(N,N,UINV,NULL);
 8006c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c90:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006c94:	fb02 f003 	mul.w	r0, r2, r3
 8006c98:	1e43      	subs	r3, r0, #1
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	f04f 0400 	mov.w	r4, #0
 8006cac:	0154      	lsls	r4, r2, #5
 8006cae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cb2:	014b      	lsls	r3, r1, #5
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	f04f 0400 	mov.w	r4, #0
 8006cc4:	0154      	lsls	r4, r2, #5
 8006cc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cca:	014b      	lsls	r3, r1, #5
 8006ccc:	4603      	mov	r3, r0
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	3303      	adds	r3, #3
 8006cd2:	3307      	adds	r3, #7
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	ebad 0d03 	sub.w	sp, sp, r3
 8006cdc:	466b      	mov	r3, sp
 8006cde:	3303      	adds	r3, #3
 8006ce0:	089b      	lsrs	r3, r3, #2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ce6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cea:	723b      	strb	r3, [r7, #8]
 8006cec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cf0:	727b      	strb	r3, [r7, #9]
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	60fb      	str	r3, [r7, #12]
    getLUMatrix(in,&L,&U);
 8006cf6:	f107 0210 	add.w	r2, r7, #16
 8006cfa:	f107 0320 	add.w	r3, r7, #32
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f857 	bl	8006db4 <getLUMatrix>
    invLMatrix(&L,&LINV);
 8006d06:	f107 0218 	add.w	r2, r7, #24
 8006d0a:	f107 0320 	add.w	r3, r7, #32
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 f959 	bl	8006fc8 <invLMatrix>
    invUMatrix(&U,&UINV);
 8006d16:	f107 0208 	add.w	r2, r7, #8
 8006d1a:	f107 0310 	add.w	r3, r7, #16
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f9e9 	bl	80070f8 <invUMatrix>
    multiMatrix(&UINV,&LINV,out);
 8006d26:	f107 0118 	add.w	r1, r7, #24
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb1d 	bl	8007370 <multiMatrix>
    double s = 1;
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	4c1d      	ldr	r4, [pc, #116]	; (8006db0 <invMatrix+0x2b8>)
 8006d3c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    for(int i=0;i<N;i++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d44:	e01b      	b.n	8006d7e <invMatrix+0x286>
    s *= U.element[i*N+i];
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7f9 fbac 	bl	80004b8 <__aeabi_f2d>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	461a      	mov	r2, r3
 8006d66:	4623      	mov	r3, r4
 8006d68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006d6c:	f7f9 fbfc 	bl	8000568 <__aeabi_dmul>
 8006d70:	4603      	mov	r3, r0
 8006d72:	460c      	mov	r4, r1
 8006d74:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    for(int i=0;i<N;i++)
 8006d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d84:	429a      	cmp	r2, r3
 8006d86:	dbde      	blt.n	8006d46 <invMatrix+0x24e>
    DATA_TYPE scale = detMatrix(in);
    if(scale<1e-5&&scale>-1e-5) return 0.0;
    scale = 1/scale;
    scaleMatrix(scale,out,out);
    */
    return isFiniteNumber(s);
 8006d88:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8006d8c:	f7ff fe16 	bl	80069bc <isFiniteNumber>
 8006d90:	ee07 0a90 	vmov	s15, r0
 8006d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d98:	46ad      	mov	sp, r5
}
 8006d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d9e:	3758      	adds	r7, #88	; 0x58
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bdb0      	pop	{r4, r5, r7, pc}
 8006da4:	08009cec 	.word	0x08009cec
 8006da8:	00000000 	.word	0x00000000
 8006dac:	08009d18 	.word	0x08009d18
 8006db0:	3ff00000 	.word	0x3ff00000

08006db4 <getLUMatrix>:

struct easyMatrix* getLUMatrix(struct easyMatrix* const A,
                               struct easyMatrix* L,
                               struct easyMatrix* U) {
 8006db4:	b480      	push	{r7}
 8006db6:	b091      	sub	sp, #68	; 0x44
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
    int row=0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
    DATA_TYPE s = 0;
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint8 N = A->cols;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	76fb      	strb	r3, [r7, #27]
    int t = N*N;
 8006dd0:	7efb      	ldrb	r3, [r7, #27]
 8006dd2:	7efa      	ldrb	r2, [r7, #27]
 8006dd4:	fb02 f303 	mul.w	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]
    for(int i =0;i<t;i++) {
 8006dda:	2300      	movs	r3, #0
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dde:	e010      	b.n	8006e02 <getLUMatrix+0x4e>
        L->element[i] = 1e-20;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	4a76      	ldr	r2, [pc, #472]	; (8006fc4 <getLUMatrix+0x210>)
 8006dec:	601a      	str	r2, [r3, #0]
        U->element[i] = 1e-20;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	4a72      	ldr	r2, [pc, #456]	; (8006fc4 <getLUMatrix+0x210>)
 8006dfa:	601a      	str	r2, [r3, #0]
    for(int i =0;i<t;i++) {
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	3301      	adds	r3, #1
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dbea      	blt.n	8006de0 <getLUMatrix+0x2c>
    }
    for(int i=0;i<N;i++) {
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0e:	e00e      	b.n	8006e2e <getLUMatrix+0x7a>
        L->element[i*N+i] = 1.0;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	7efb      	ldrb	r3, [r7, #27]
 8006e16:	3301      	adds	r3, #1
 8006e18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006e26:	601a      	str	r2, [r3, #0]
    for(int i=0;i<N;i++) {
 8006e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2e:	7efb      	ldrb	r3, [r7, #27]
 8006e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e32:	429a      	cmp	r2, r3
 8006e34:	dbec      	blt.n	8006e10 <getLUMatrix+0x5c>
    }
    for(int i=0;i<N;i++) {
 8006e36:	2300      	movs	r3, #0
 8006e38:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3a:	e0b6      	b.n	8006faa <getLUMatrix+0x1f6>
        for(int j=i;j<N;j++) {
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e40:	e04b      	b.n	8006eda <getLUMatrix+0x126>
            s = 0.0;
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
            for(int k=0;k<i;++k) {
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4c:	e022      	b.n	8006e94 <getLUMatrix+0xe0>
                s+=L->element[i*N+k]*U->element[k*N+j];
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	7efb      	ldrb	r3, [r7, #27]
 8006e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e56:	fb01 f103 	mul.w	r1, r1, r3
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	440b      	add	r3, r1
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	ed93 7a00 	vldr	s14, [r3]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	7efb      	ldrb	r3, [r7, #27]
 8006e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6e:	fb01 f103 	mul.w	r1, r1, r3
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	440b      	add	r3, r1
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	edd3 7a00 	vldr	s15, [r3]
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            for(int k=0;k<i;++k) {
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	3301      	adds	r3, #1
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	dbd8      	blt.n	8006e4e <getLUMatrix+0x9a>
            }
            U->element[i*N+j]= A->element[i*N+j] - s;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	7efb      	ldrb	r3, [r7, #27]
 8006ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea4:	fb01 f103 	mul.w	r1, r1, r3
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	440b      	add	r3, r1
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	ed93 7a00 	vldr	s14, [r3]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	7efb      	ldrb	r3, [r7, #27]
 8006eba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ebc:	fb01 f103 	mul.w	r1, r1, r3
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	440b      	add	r3, r1
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ed0:	edc3 7a00 	vstr	s15, [r3]
        for(int j=i;j<N;j++) {
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eda:	7efb      	ldrb	r3, [r7, #27]
 8006edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	dbaf      	blt.n	8006e42 <getLUMatrix+0x8e>
        }
        for (int j = i + 1;j < N;j++) {
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	e058      	b.n	8006f9c <getLUMatrix+0x1e8>
            s = 0.0;
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
            for (int k = 0; k < i; k++)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	e022      	b.n	8006f3c <getLUMatrix+0x188>
            {
                s += L->element[j*N+k] * U->element[k*N+i];
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	7efb      	ldrb	r3, [r7, #27]
 8006efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006efe:	fb01 f103 	mul.w	r1, r1, r3
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	440b      	add	r3, r1
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	ed93 7a00 	vldr	s14, [r3]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	7efb      	ldrb	r3, [r7, #27]
 8006f14:	6a39      	ldr	r1, [r7, #32]
 8006f16:	fb01 f103 	mul.w	r1, r1, r3
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	440b      	add	r3, r1
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f32:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            for (int k = 0; k < i; k++)
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	6a3a      	ldr	r2, [r7, #32]
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	429a      	cmp	r2, r3
 8006f42:	dbd8      	blt.n	8006ef6 <getLUMatrix+0x142>
            }
            L->element[j*N+i] = (A->element[j*N+i] - s) / U->element[i*N+i];      //°´ÁÐ¼ÆËãlÖµ
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	7efb      	ldrb	r3, [r7, #27]
 8006f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f4c:	fb01 f103 	mul.w	r1, r1, r3
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	440b      	add	r3, r1
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	ed93 7a00 	vldr	s14, [r3]
 8006f5c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006f60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	7efb      	ldrb	r3, [r7, #27]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f6e:	fb01 f303 	mul.w	r3, r1, r3
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	ed93 7a00 	vldr	s14, [r3]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	7efb      	ldrb	r3, [r7, #27]
 8006f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f82:	fb01 f103 	mul.w	r1, r1, r3
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	440b      	add	r3, r1
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f92:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1;j < N;j++) {
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	3301      	adds	r3, #1
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9c:	7efb      	ldrb	r3, [r7, #27]
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	dba2      	blt.n	8006eea <getLUMatrix+0x136>
    for(int i=0;i<N;i++) {
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006faa:	7efb      	ldrb	r3, [r7, #27]
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	f6ff af44 	blt.w	8006e3c <getLUMatrix+0x88>
        }
    }
    return L;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 }
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3744      	adds	r7, #68	; 0x44
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	1e3ce508 	.word	0x1e3ce508

08006fc8 <invLMatrix>:

struct easyMatrix* invLMatrix(struct easyMatrix* const L,
                              struct easyMatrix* L_inv) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
    uint8 N = L->cols;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	74fb      	strb	r3, [r7, #19]
    if(N!=L->rows) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	7cfa      	ldrb	r2, [r7, #19]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d004      	beq.n	8006fec <invLMatrix+0x24>
        printf("L matrix is not a sqare matrix!\n");
 8006fe2:	4843      	ldr	r0, [pc, #268]	; (80070f0 <invLMatrix+0x128>)
 8006fe4:	f002 facc 	bl	8009580 <puts>
        return NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e07d      	b.n	80070e8 <invLMatrix+0x120>
    }
    DATA_TYPE s;
    int t = N*N;
 8006fec:	7cfb      	ldrb	r3, [r7, #19]
 8006fee:	7cfa      	ldrb	r2, [r7, #19]
 8006ff0:	fb02 f303 	mul.w	r3, r2, r3
 8006ff4:	60fb      	str	r3, [r7, #12]
    for(int i =0;i<t;i++) {
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e009      	b.n	8007010 <invLMatrix+0x48>
        L_inv->element[i] = 1e-13;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	4a3b      	ldr	r2, [pc, #236]	; (80070f4 <invLMatrix+0x12c>)
 8007008:	601a      	str	r2, [r3, #0]
    for(int i =0;i<t;i++) {
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3301      	adds	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	dbf1      	blt.n	8006ffc <invLMatrix+0x34>
    }
    for (uint8 i = 0;i < N;i++)  {
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]
 800701c:	e00e      	b.n	800703c <invLMatrix+0x74>
        L_inv->element[i*N+i] = 1;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	7cfb      	ldrb	r3, [r7, #19]
 8007024:	3301      	adds	r3, #1
 8007026:	7df9      	ldrb	r1, [r7, #23]
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007034:	601a      	str	r2, [r3, #0]
    for (uint8 i = 0;i < N;i++)  {
 8007036:	7dfb      	ldrb	r3, [r7, #23]
 8007038:	3301      	adds	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
 800703c:	7dfa      	ldrb	r2, [r7, #23]
 800703e:	7cfb      	ldrb	r3, [r7, #19]
 8007040:	429a      	cmp	r2, r3
 8007042:	d3ec      	bcc.n	800701e <invLMatrix+0x56>
    }
    for (uint8 i= 1;i < N;i++) {
 8007044:	2301      	movs	r3, #1
 8007046:	75bb      	strb	r3, [r7, #22]
 8007048:	e049      	b.n	80070de <invLMatrix+0x116>
        for (uint8 j = 0;j < i;j++) {
 800704a:	2300      	movs	r3, #0
 800704c:	757b      	strb	r3, [r7, #21]
 800704e:	e03f      	b.n	80070d0 <invLMatrix+0x108>
            s = 0;
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
            for (uint8 k = 0;k < i;k++) {
 8007056:	2300      	movs	r3, #0
 8007058:	753b      	strb	r3, [r7, #20]
 800705a:	e022      	b.n	80070a2 <invLMatrix+0xda>
                s += L->element[i*N+k] * L_inv->element[k*N+j];
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	7dbb      	ldrb	r3, [r7, #22]
 8007062:	7cf9      	ldrb	r1, [r7, #19]
 8007064:	fb01 f103 	mul.w	r1, r1, r3
 8007068:	7d3b      	ldrb	r3, [r7, #20]
 800706a:	440b      	add	r3, r1
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	ed93 7a00 	vldr	s14, [r3]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	7d3b      	ldrb	r3, [r7, #20]
 800707a:	7cf9      	ldrb	r1, [r7, #19]
 800707c:	fb01 f103 	mul.w	r1, r1, r3
 8007080:	7d7b      	ldrb	r3, [r7, #21]
 8007082:	440b      	add	r3, r1
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	edd3 7a00 	vldr	s15, [r3]
 800708c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007090:	ed97 7a07 	vldr	s14, [r7, #28]
 8007094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007098:	edc7 7a07 	vstr	s15, [r7, #28]
            for (uint8 k = 0;k < i;k++) {
 800709c:	7d3b      	ldrb	r3, [r7, #20]
 800709e:	3301      	adds	r3, #1
 80070a0:	753b      	strb	r3, [r7, #20]
 80070a2:	7d3a      	ldrb	r2, [r7, #20]
 80070a4:	7dbb      	ldrb	r3, [r7, #22]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d3d8      	bcc.n	800705c <invLMatrix+0x94>
            }
            L_inv->element[i*N+j] = -s;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	7cf9      	ldrb	r1, [r7, #19]
 80070b2:	fb01 f103 	mul.w	r1, r1, r3
 80070b6:	7d7b      	ldrb	r3, [r7, #21]
 80070b8:	440b      	add	r3, r1
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	edd7 7a07 	vldr	s15, [r7, #28]
 80070c2:	eef1 7a67 	vneg.f32	s15, s15
 80070c6:	edc3 7a00 	vstr	s15, [r3]
        for (uint8 j = 0;j < i;j++) {
 80070ca:	7d7b      	ldrb	r3, [r7, #21]
 80070cc:	3301      	adds	r3, #1
 80070ce:	757b      	strb	r3, [r7, #21]
 80070d0:	7d7a      	ldrb	r2, [r7, #21]
 80070d2:	7dbb      	ldrb	r3, [r7, #22]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d3bb      	bcc.n	8007050 <invLMatrix+0x88>
    for (uint8 i= 1;i < N;i++) {
 80070d8:	7dbb      	ldrb	r3, [r7, #22]
 80070da:	3301      	adds	r3, #1
 80070dc:	75bb      	strb	r3, [r7, #22]
 80070de:	7dba      	ldrb	r2, [r7, #22]
 80070e0:	7cfb      	ldrb	r3, [r7, #19]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3b1      	bcc.n	800704a <invLMatrix+0x82>
        }
    }
    return L_inv;
 80070e6:	683b      	ldr	r3, [r7, #0]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	08009d50 	.word	0x08009d50
 80070f4:	29e12e13 	.word	0x29e12e13

080070f8 <invUMatrix>:
struct easyMatrix* invUMatrix(struct easyMatrix* const U,
                              struct easyMatrix* U_inv) {
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
    uint8 N = U->cols;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	73bb      	strb	r3, [r7, #14]
    DATA_TYPE s;
    int t = N*N;
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	7bba      	ldrb	r2, [r7, #14]
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	60bb      	str	r3, [r7, #8]
    for(int i =0;i<t;i++) {
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e009      	b.n	800712c <invUMatrix+0x34>
        U_inv->element[i] = 1e-13;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	4a4a      	ldr	r2, [pc, #296]	; (800724c <invUMatrix+0x154>)
 8007124:	601a      	str	r2, [r3, #0]
    for(int i =0;i<t;i++) {
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	3301      	adds	r3, #1
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	dbf1      	blt.n	8007118 <invUMatrix+0x20>
    }
    for (uint8 i = 0;i < N;i++)                    //°´ÁÐÐò£¬ÁÐÄÚ°´ÕÕ´ÓÏÂµ½ÉÏ£¬¼ÆËãuµÄÄæ¾ØÕó
 8007134:	2300      	movs	r3, #0
 8007136:	75fb      	strb	r3, [r7, #23]
 8007138:	e01c      	b.n	8007174 <invUMatrix+0x7c>
    {
        U_inv->element[i*N+i] = 1 / U->element[i*N+i];
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	3301      	adds	r3, #1
 8007142:	7df9      	ldrb	r1, [r7, #23]
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	ed93 7a00 	vldr	s14, [r3]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	3301      	adds	r3, #1
 8007158:	7df9      	ldrb	r1, [r7, #23]
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716a:	edc3 7a00 	vstr	s15, [r3]
    for (uint8 i = 0;i < N;i++)                    //°´ÁÐÐò£¬ÁÐÄÚ°´ÕÕ´ÓÏÂµ½ÉÏ£¬¼ÆËãuµÄÄæ¾ØÕó
 800716e:	7dfb      	ldrb	r3, [r7, #23]
 8007170:	3301      	adds	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
 8007174:	7dfa      	ldrb	r2, [r7, #23]
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	429a      	cmp	r2, r3
 800717a:	d3de      	bcc.n	800713a <invUMatrix+0x42>
    }
    for (uint8 i = 1;i < N;i++) {
 800717c:	2301      	movs	r3, #1
 800717e:	75bb      	strb	r3, [r7, #22]
 8007180:	e058      	b.n	8007234 <invUMatrix+0x13c>
        for (int j = i - 1;j >=0;j--) {
 8007182:	7dbb      	ldrb	r3, [r7, #22]
 8007184:	3b01      	subs	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e04e      	b.n	8007228 <invUMatrix+0x130>
            s = 0;
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	61fb      	str	r3, [r7, #28]
            for (uint8 k = j + 1;k <= i;k++) {
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	3301      	adds	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	e022      	b.n	80071e0 <invUMatrix+0xe8>
                s += U->element[j*N+k] * U_inv->element[k*N+i];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	6939      	ldr	r1, [r7, #16]
 80071a2:	fb01 f103 	mul.w	r1, r1, r3
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	440b      	add	r3, r1
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	ed93 7a00 	vldr	s14, [r3]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	7bb9      	ldrb	r1, [r7, #14]
 80071ba:	fb01 f103 	mul.w	r1, r1, r3
 80071be:	7dbb      	ldrb	r3, [r7, #22]
 80071c0:	440b      	add	r3, r1
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	edd3 7a00 	vldr	s15, [r3]
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80071d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
            for (uint8 k = j + 1;k <= i;k++) {
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	3301      	adds	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	7bfa      	ldrb	r2, [r7, #15]
 80071e2:	7dbb      	ldrb	r3, [r7, #22]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d9d8      	bls.n	800719a <invUMatrix+0xa2>
            }
            U_inv->element[j*N+i] = -s / U->element[j*N+j];
 80071e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80071ec:	eef1 6a67 	vneg.f32	s13, s15
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	3301      	adds	r3, #1
 80071f8:	6939      	ldr	r1, [r7, #16]
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	ed93 7a00 	vldr	s14, [r3]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	6939      	ldr	r1, [r7, #16]
 800720e:	fb01 f103 	mul.w	r1, r1, r3
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	440b      	add	r3, r1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i - 1;j >=0;j--) {
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3b01      	subs	r3, #1
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	daad      	bge.n	800718a <invUMatrix+0x92>
    for (uint8 i = 1;i < N;i++) {
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	3301      	adds	r3, #1
 8007232:	75bb      	strb	r3, [r7, #22]
 8007234:	7dba      	ldrb	r2, [r7, #22]
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	429a      	cmp	r2, r3
 800723a:	d3a2      	bcc.n	8007182 <invUMatrix+0x8a>
        }
    }
    return U_inv;
 800723c:	683b      	ldr	r3, [r7, #0]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	29e12e13 	.word	0x29e12e13

08007250 <addMatrix>:
    }
    DELETE_DYNAMIC_MATRIX(ret);
    return result;
}

struct easyMatrix* addMatrix(const struct easyMatrix* const a,const struct easyMatrix* const b, struct easyMatrix* c) {
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
    if(a->cols != b->cols) return NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	785a      	ldrb	r2, [r3, #1]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <addMatrix+0x1c>
 8007268:	2300      	movs	r3, #0
 800726a:	e033      	b.n	80072d4 <addMatrix+0x84>
    if(a->rows != b->rows) return NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d001      	beq.n	800727c <addMatrix+0x2c>
 8007278:	2300      	movs	r3, #0
 800727a:	e02b      	b.n	80072d4 <addMatrix+0x84>
    struct easyMatrix* obj = (struct easyMatrix*)a;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	61bb      	str	r3, [r7, #24]
    int t = obj->rows*obj->cols;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	fb03 f302 	mul.w	r3, r3, r2
 800728e:	617b      	str	r3, [r7, #20]
    for(int i=0;i<t;++i) {
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
 8007294:	e019      	b.n	80072ca <addMatrix+0x7a>
        c->element[i] = obj->element[i]+b->element[i];
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	ed93 7a00 	vldr	s14, [r3]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	edd3 7a00 	vldr	s15, [r3]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c0:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<t;++i) {
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3301      	adds	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	dbe1      	blt.n	8007296 <addMatrix+0x46>
    }
    return c;
 80072d2:	687b      	ldr	r3, [r7, #4]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3724      	adds	r7, #36	; 0x24
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <subMatrix>:

struct easyMatrix* subMatrix(struct easyMatrix* const a,
                             struct easyMatrix* const b,
                             struct easyMatrix* c) {
 80072e0:	b480      	push	{r7}
 80072e2:	b089      	sub	sp, #36	; 0x24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
    if(a->cols != b->cols) return NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	785a      	ldrb	r2, [r3, #1]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <subMatrix+0x1c>
 80072f8:	2300      	movs	r3, #0
 80072fa:	e033      	b.n	8007364 <subMatrix+0x84>
    if(a->rows != b->rows) return NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	781a      	ldrb	r2, [r3, #0]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d001      	beq.n	800730c <subMatrix+0x2c>
 8007308:	2300      	movs	r3, #0
 800730a:	e02b      	b.n	8007364 <subMatrix+0x84>
    struct easyMatrix* obj = (struct easyMatrix*)a;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	61bb      	str	r3, [r7, #24]
    int t = obj->rows*obj->cols;
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	fb03 f302 	mul.w	r3, r3, r2
 800731e:	617b      	str	r3, [r7, #20]
    for(int i=0;i<t;++i) {
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	e019      	b.n	800735a <subMatrix+0x7a>
        c->element[i] = obj->element[i]-b->element[i];
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	ed93 7a00 	vldr	s14, [r3]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	edd3 7a00 	vldr	s15, [r3]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007350:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0;i<t;++i) {
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	dbe1      	blt.n	8007326 <subMatrix+0x46>
    }
    return c;
 8007362:	687b      	ldr	r3, [r7, #4]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3724      	adds	r7, #36	; 0x24
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <multiMatrix>:
    return b;
}

struct easyMatrix* multiMatrix(struct easyMatrix* const a,
                               struct easyMatrix* const b,
                               struct easyMatrix* c) {
 8007370:	b480      	push	{r7}
 8007372:	b08b      	sub	sp, #44	; 0x2c
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
    if(NULL==c) return NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <multiMatrix+0x16>
 8007382:	2300      	movs	r3, #0
 8007384:	e078      	b.n	8007478 <multiMatrix+0x108>
    if(c == a || c == b) return NULL;
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	429a      	cmp	r2, r3
 800738c:	d003      	beq.n	8007396 <multiMatrix+0x26>
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d101      	bne.n	800739a <multiMatrix+0x2a>
 8007396:	2300      	movs	r3, #0
 8007398:	e06e      	b.n	8007478 <multiMatrix+0x108>
    if(a->cols != b->rows) return NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	785a      	ldrb	r2, [r3, #1]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d001      	beq.n	80073aa <multiMatrix+0x3a>
 80073a6:	2300      	movs	r3, #0
 80073a8:	e066      	b.n	8007478 <multiMatrix+0x108>
    int count = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
    int t_cnt = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	623b      	str	r3, [r7, #32]
    int z_cnt = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
    uint8 x = a->rows;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	763b      	strb	r3, [r7, #24]
    uint8 y = a->cols;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	75fb      	strb	r3, [r7, #23]
    uint8 z = b->cols;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	75bb      	strb	r3, [r7, #22]
    for(uint8 i = 0;i<x;++i) {
 80073c8:	2300      	movs	r3, #0
 80073ca:	76fb      	strb	r3, [r7, #27]
 80073cc:	e04f      	b.n	800746e <multiMatrix+0xfe>
        for(uint8 k = 0;k<z;++k) {
 80073ce:	2300      	movs	r3, #0
 80073d0:	76bb      	strb	r3, [r7, #26]
 80073d2:	e041      	b.n	8007458 <multiMatrix+0xe8>
            c->element[count] = 0;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
            z_cnt = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
            for(uint8 j = 0;j<y;++j) {
 80073e8:	2300      	movs	r3, #0
 80073ea:	767b      	strb	r3, [r7, #25]
 80073ec:	e02a      	b.n	8007444 <multiMatrix+0xd4>
                c->element[count] += a->element[t_cnt+j]*b->element[z_cnt+k];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	ed93 7a00 	vldr	s14, [r3]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	7e79      	ldrb	r1, [r7, #25]
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	440b      	add	r3, r1
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	edd3 6a00 	vldr	s13, [r3]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	7eb9      	ldrb	r1, [r7, #26]
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	440b      	add	r3, r1
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	edd3 7a00 	vldr	s15, [r3]
 8007420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007432:	edc3 7a00 	vstr	s15, [r3]
                z_cnt += z;
 8007436:	7dbb      	ldrb	r3, [r7, #22]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	61fb      	str	r3, [r7, #28]
            for(uint8 j = 0;j<y;++j) {
 800743e:	7e7b      	ldrb	r3, [r7, #25]
 8007440:	3301      	adds	r3, #1
 8007442:	767b      	strb	r3, [r7, #25]
 8007444:	7e7a      	ldrb	r2, [r7, #25]
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	429a      	cmp	r2, r3
 800744a:	d3d0      	bcc.n	80073ee <multiMatrix+0x7e>
            }
            count++;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	3301      	adds	r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
        for(uint8 k = 0;k<z;++k) {
 8007452:	7ebb      	ldrb	r3, [r7, #26]
 8007454:	3301      	adds	r3, #1
 8007456:	76bb      	strb	r3, [r7, #26]
 8007458:	7eba      	ldrb	r2, [r7, #26]
 800745a:	7dbb      	ldrb	r3, [r7, #22]
 800745c:	429a      	cmp	r2, r3
 800745e:	d3b9      	bcc.n	80073d4 <multiMatrix+0x64>
        }
        t_cnt+=y;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	4413      	add	r3, r2
 8007466:	623b      	str	r3, [r7, #32]
    for(uint8 i = 0;i<x;++i) {
 8007468:	7efb      	ldrb	r3, [r7, #27]
 800746a:	3301      	adds	r3, #1
 800746c:	76fb      	strb	r3, [r7, #27]
 800746e:	7efa      	ldrb	r2, [r7, #27]
 8007470:	7e3b      	ldrb	r3, [r7, #24]
 8007472:	429a      	cmp	r2, r3
 8007474:	d3ab      	bcc.n	80073ce <multiMatrix+0x5e>
    }
    return c;
 8007476:	687b      	ldr	r3, [r7, #4]
}
 8007478:	4618      	mov	r0, r3
 800747a:	372c      	adds	r7, #44	; 0x2c
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4a06      	ldr	r2, [pc, #24]	; (80074b4 <vApplicationGetIdleTaskMemory+0x30>)
 800749a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2280      	movs	r2, #128	; 0x80
 80074a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	20003df0 	.word	0x20003df0
 80074b4:	20003e44 	.word	0x20003e44

080074b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80074b8:	b5b0      	push	{r4, r5, r7, lr}
 80074ba:	b0aa      	sub	sp, #168	; 0xa8
 80074bc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80074be:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <MX_FREERTOS_Init+0xf0>)
 80074c0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80074c4:	461d      	mov	r5, r3
 80074c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80074d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fc feb0 	bl	800423e <osThreadCreate>
 80074de:	4602      	mov	r2, r0
 80074e0:	4b32      	ldr	r3, [pc, #200]	; (80075ac <MX_FREERTOS_Init+0xf4>)
 80074e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of spdm */
  osThreadDef(spdm, spdm_thread, osPriorityHigh, 0, 128);
 80074e4:	4b32      	ldr	r3, [pc, #200]	; (80075b0 <MX_FREERTOS_Init+0xf8>)
 80074e6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80074ea:	461d      	mov	r5, r3
 80074ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spdmHandle = osThreadCreate(osThread(spdm), NULL);
 80074f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fc fe9d 	bl	800423e <osThreadCreate>
 8007504:	4602      	mov	r2, r0
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <MX_FREERTOS_Init+0xfc>)
 8007508:	601a      	str	r2, [r3, #0]

  /* definition and creation of kalman */
  osThreadDef(kalman, kalman_thread, osPriorityHigh, 0, 1024);
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <MX_FREERTOS_Init+0x100>)
 800750c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8007510:	461d      	mov	r5, r3
 8007512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800751a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  kalmanHandle = osThreadCreate(osThread(kalman), NULL);
 800751e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f7fc fe8a 	bl	800423e <osThreadCreate>
 800752a:	4602      	mov	r2, r0
 800752c:	4b23      	ldr	r3, [pc, #140]	; (80075bc <MX_FREERTOS_Init+0x104>)
 800752e:	601a      	str	r2, [r3, #0]

  /* definition and creation of pospid */
  osThreadDef(pospid, pospid_calc_thread, osPriorityHigh, 0, 128);
 8007530:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <MX_FREERTOS_Init+0x108>)
 8007532:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8007536:	461d      	mov	r5, r3
 8007538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800753a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pospidHandle = osThreadCreate(osThread(pospid), NULL);
 8007544:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f7fc fe77 	bl	800423e <osThreadCreate>
 8007550:	4602      	mov	r2, r0
 8007552:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <MX_FREERTOS_Init+0x10c>)
 8007554:	601a      	str	r2, [r3, #0]

  /* definition and creation of imu */
  osThreadDef(imu, imu_thread, osPriorityHigh, 0, 128);
 8007556:	4b1c      	ldr	r3, [pc, #112]	; (80075c8 <MX_FREERTOS_Init+0x110>)
 8007558:	f107 041c 	add.w	r4, r7, #28
 800755c:	461d      	mov	r5, r3
 800755e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuHandle = osThreadCreate(osThread(imu), NULL);
 800756a:	f107 031c 	add.w	r3, r7, #28
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fe64 	bl	800423e <osThreadCreate>
 8007576:	4602      	mov	r2, r0
 8007578:	4b14      	ldr	r3, [pc, #80]	; (80075cc <MX_FREERTOS_Init+0x114>)
 800757a:	601a      	str	r2, [r3, #0]

  /* definition and creation of arm */
  osThreadDef(arm, arm_calc_thread, osPriorityHigh, 0, 128);
 800757c:	4b14      	ldr	r3, [pc, #80]	; (80075d0 <MX_FREERTOS_Init+0x118>)
 800757e:	463c      	mov	r4, r7
 8007580:	461d      	mov	r5, r3
 8007582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800758a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armHandle = osThreadCreate(osThread(arm), NULL);
 800758e:	463b      	mov	r3, r7
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fc fe53 	bl	800423e <osThreadCreate>
 8007598:	4602      	mov	r2, r0
 800759a:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <MX_FREERTOS_Init+0x11c>)
 800759c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800759e:	bf00      	nop
 80075a0:	37a8      	adds	r7, #168	; 0xa8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bdb0      	pop	{r4, r5, r7, pc}
 80075a6:	bf00      	nop
 80075a8:	08009de8 	.word	0x08009de8
 80075ac:	200043b4 	.word	0x200043b4
 80075b0:	08009e0c 	.word	0x08009e0c
 80075b4:	200043b8 	.word	0x200043b8
 80075b8:	08009e30 	.word	0x08009e30
 80075bc:	200043c8 	.word	0x200043c8
 80075c0:	08009e54 	.word	0x08009e54
 80075c4:	200043c4 	.word	0x200043c4
 80075c8:	08009e74 	.word	0x08009e74
 80075cc:	200043c0 	.word	0x200043c0
 80075d0:	08009e94 	.word	0x08009e94
 80075d4:	200043bc 	.word	0x200043bc

080075d8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80075e0:	2001      	movs	r0, #1
 80075e2:	f7fc fe78 	bl	80042d6 <osDelay>
 80075e6:	e7fb      	b.n	80075e0 <StartDefaultTask+0x8>

080075e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ee:	f107 0314 	add.w	r3, r7, #20
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	605a      	str	r2, [r3, #4]
 80075f8:	609a      	str	r2, [r3, #8]
 80075fa:	60da      	str	r2, [r3, #12]
 80075fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007608:	f043 0310 	orr.w	r3, r3, #16
 800760c:	6313      	str	r3, [r2, #48]	; 0x30
 800760e:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	4b26      	ldr	r3, [pc, #152]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	6313      	str	r3, [r2, #48]	; 0x30
 800762a:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <MX_GPIO_Init+0xd0>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	4b1f      	ldr	r3, [pc, #124]	; (80076b8 <MX_GPIO_Init+0xd0>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007640:	f043 0308 	orr.w	r3, r3, #8
 8007644:	6313      	str	r3, [r2, #48]	; 0x30
 8007646:	4b1c      	ldr	r3, [pc, #112]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <MX_GPIO_Init+0xd0>)
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	607b      	str	r3, [r7, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007678:	f043 0320 	orr.w	r3, r3, #32
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <MX_GPIO_Init+0xd0>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 800768a:	2200      	movs	r2, #0
 800768c:	2140      	movs	r1, #64	; 0x40
 800768e:	480b      	ldr	r0, [pc, #44]	; (80076bc <MX_GPIO_Init+0xd4>)
 8007690:	f7fa ff1a 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007694:	2340      	movs	r3, #64	; 0x40
 8007696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007698:	2301      	movs	r3, #1
 800769a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769c:	2300      	movs	r3, #0
 800769e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a0:	2300      	movs	r3, #0
 80076a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	4619      	mov	r1, r3
 80076aa:	4804      	ldr	r0, [pc, #16]	; (80076bc <MX_GPIO_Init+0xd4>)
 80076ac:	f7fa fd62 	bl	8002174 <HAL_GPIO_Init>

}
 80076b0:	bf00      	nop
 80076b2:	3728      	adds	r7, #40	; 0x28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40023800 	.word	0x40023800
 80076bc:	40021400 	.word	0x40021400

080076c0 <MPU_ReadByte>:
} mpu_data;

static uint8_t mpu_buff[14];

/* 从MPU的寄存器中读取一个数据 */
uint8_t MPU_ReadByte(IMU_TypeDef* I, uint8_t const reg) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
	MPU_NSS_LOW;
 80076cc:	2200      	movs	r2, #0
 80076ce:	2140      	movs	r1, #64	; 0x40
 80076d0:	4816      	ldr	r0, [pc, #88]	; (800772c <MPU_ReadByte+0x6c>)
 80076d2:	f7fa fef9 	bl	80024c8 <HAL_GPIO_WritePin>
	I->tx = reg | 0x80;
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	721a      	strb	r2, [r3, #8]
	HAL_SPI_TransmitReceive(I->spi, &I->tx, &I->rx, 1, 55);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6858      	ldr	r0, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0108 	add.w	r1, r3, #8
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0209 	add.w	r2, r3, #9
 80076f2:	2337      	movs	r3, #55	; 0x37
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2301      	movs	r3, #1
 80076f8:	f7fb fc49 	bl	8002f8e <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(I->spi, &I->tx, &I->rx, 1, 55);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6858      	ldr	r0, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0108 	add.w	r1, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f103 0209 	add.w	r2, r3, #9
 800770c:	2337      	movs	r3, #55	; 0x37
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2301      	movs	r3, #1
 8007712:	f7fb fc3c 	bl	8002f8e <HAL_SPI_TransmitReceive>
	MPU_NSS_HIGH;
 8007716:	2201      	movs	r2, #1
 8007718:	2140      	movs	r1, #64	; 0x40
 800771a:	4804      	ldr	r0, [pc, #16]	; (800772c <MPU_ReadByte+0x6c>)
 800771c:	f7fa fed4 	bl	80024c8 <HAL_GPIO_WritePin>
	return I->rx;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7a5b      	ldrb	r3, [r3, #9]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40021400 	.word	0x40021400

08007730 <MPU_WriteByte>:

/* 向MPU的寄存器中写入一个数据 */
uint8_t MPU_WriteByte(IMU_TypeDef* I, uint8_t const reg, uint8_t const data) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
 800773c:	4613      	mov	r3, r2
 800773e:	70bb      	strb	r3, [r7, #2]
	MPU_NSS_LOW;
 8007740:	2200      	movs	r2, #0
 8007742:	2140      	movs	r1, #64	; 0x40
 8007744:	4817      	ldr	r0, [pc, #92]	; (80077a4 <MPU_WriteByte+0x74>)
 8007746:	f7fa febf 	bl	80024c8 <HAL_GPIO_WritePin>
	I->tx = reg & 0x7f;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	b2da      	uxtb	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	721a      	strb	r2, [r3, #8]
	HAL_SPI_TransmitReceive(I->spi, &I->tx, &I->rx, 1, 55);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6858      	ldr	r0, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f103 0108 	add.w	r1, r3, #8
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f103 0209 	add.w	r2, r3, #9
 8007766:	2337      	movs	r3, #55	; 0x37
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	f7fb fc0f 	bl	8002f8e <HAL_SPI_TransmitReceive>
	I->tx = data;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	78ba      	ldrb	r2, [r7, #2]
 8007774:	721a      	strb	r2, [r3, #8]
	HAL_SPI_TransmitReceive(I->spi, &I->tx, &I->rx, 1, 55);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6858      	ldr	r0, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f103 0108 	add.w	r1, r3, #8
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0209 	add.w	r2, r3, #9
 8007786:	2337      	movs	r3, #55	; 0x37
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2301      	movs	r3, #1
 800778c:	f7fb fbff 	bl	8002f8e <HAL_SPI_TransmitReceive>
	MPU_NSS_HIGH;
 8007790:	2201      	movs	r2, #1
 8007792:	2140      	movs	r1, #64	; 0x40
 8007794:	4803      	ldr	r0, [pc, #12]	; (80077a4 <MPU_WriteByte+0x74>)
 8007796:	f7fa fe97 	bl	80024c8 <HAL_GPIO_WritePin>
	return 0;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40021400 	.word	0x40021400

080077a8 <MPU_ReadBytes>:

/* 从MPU的寄存器中读取多个数据 */
uint8_t MPU_ReadBytes(IMU_TypeDef* I, uint8_t const regAddr, uint8_t* pData, uint8_t len) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	461a      	mov	r2, r3
 80077b4:	460b      	mov	r3, r1
 80077b6:	72fb      	strb	r3, [r7, #11]
 80077b8:	4613      	mov	r3, r2
 80077ba:	72bb      	strb	r3, [r7, #10]
	MPU_NSS_LOW;
 80077bc:	2200      	movs	r2, #0
 80077be:	2140      	movs	r1, #64	; 0x40
 80077c0:	4818      	ldr	r0, [pc, #96]	; (8007824 <MPU_ReadBytes+0x7c>)
 80077c2:	f7fa fe81 	bl	80024c8 <HAL_GPIO_WritePin>
	I->tx = regAddr | 0x80;
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	721a      	strb	r2, [r3, #8]
	I->tx_buff[0] = I->tx;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	7a1a      	ldrb	r2, [r3, #8]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	729a      	strb	r2, [r3, #10]
	HAL_SPI_TransmitReceive(I->spi, &I->tx, &I->rx, 1, 55);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6858      	ldr	r0, [r3, #4]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f103 0108 	add.w	r1, r3, #8
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f103 0209 	add.w	r2, r3, #9
 80077ea:	2337      	movs	r3, #55	; 0x37
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2301      	movs	r3, #1
 80077f0:	f7fb fbcd 	bl	8002f8e <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(I->spi, I->tx_buff, pData, len, 55);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6858      	ldr	r0, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f103 010a 	add.w	r1, r3, #10
 80077fe:	7abb      	ldrb	r3, [r7, #10]
 8007800:	b29a      	uxth	r2, r3
 8007802:	2337      	movs	r3, #55	; 0x37
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f7fb fbc0 	bl	8002f8e <HAL_SPI_TransmitReceive>
	MPU_NSS_HIGH;
 800780e:	2201      	movs	r2, #1
 8007810:	2140      	movs	r1, #64	; 0x40
 8007812:	4804      	ldr	r0, [pc, #16]	; (8007824 <MPU_ReadBytes+0x7c>)
 8007814:	f7fa fe58 	bl	80024c8 <HAL_GPIO_WritePin>
	return 0;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	40021400 	.word	0x40021400

08007828 <mpu_set_gyro_fsr>:

/* 设置imu的角速度测量范围 */
static uint8_t mpu_set_gyro_fsr(IMU_TypeDef* I, uint8_t fsr) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
	return MPU_WriteByte(I, MPU6500_GYRO_CONFIG, fsr << 3);
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	b2db      	uxtb	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	211b      	movs	r1, #27
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff ff76 	bl	8007730 <MPU_WriteByte>
 8007844:	4603      	mov	r3, r0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <mpu_set_accel_fsr>:

/* 设置imu的加速度测量范围 */
static uint8_t mpu_set_accel_fsr(IMU_TypeDef* I, uint8_t fsr) {
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
	return MPU_WriteByte(I, MPU6500_ACCEL_CONFIG, fsr << 3);
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	211c      	movs	r1, #28
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7ff ff63 	bl	8007730 <MPU_WriteByte>
 800786a:	4603      	mov	r3, r0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <IMU_GetData>:

void IMU_GetData(IMU_TypeDef* I) {
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	MPU_ReadBytes(I, MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800787c:	230e      	movs	r3, #14
 800787e:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <IMU_GetData+0xc0>)
 8007880:	213b      	movs	r1, #59	; 0x3b
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff ff90 	bl	80077a8 <MPU_ReadBytes>

    mpu_data.ax   = mpu_buff[0] << 8 | mpu_buff[1];
 8007888:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <IMU_GetData+0xc0>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	b21a      	sxth	r2, r3
 8007890:	4b28      	ldr	r3, [pc, #160]	; (8007934 <IMU_GetData+0xc0>)
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	b21b      	sxth	r3, r3
 8007896:	4313      	orrs	r3, r2
 8007898:	b21a      	sxth	r2, r3
 800789a:	4b27      	ldr	r3, [pc, #156]	; (8007938 <IMU_GetData+0xc4>)
 800789c:	801a      	strh	r2, [r3, #0]
    mpu_data.ay   = mpu_buff[2] << 8 | mpu_buff[3];
 800789e:	4b25      	ldr	r3, [pc, #148]	; (8007934 <IMU_GetData+0xc0>)
 80078a0:	789b      	ldrb	r3, [r3, #2]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	b21a      	sxth	r2, r3
 80078a6:	4b23      	ldr	r3, [pc, #140]	; (8007934 <IMU_GetData+0xc0>)
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	b21b      	sxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b21a      	sxth	r2, r3
 80078b0:	4b21      	ldr	r3, [pc, #132]	; (8007938 <IMU_GetData+0xc4>)
 80078b2:	805a      	strh	r2, [r3, #2]
    mpu_data.az   = mpu_buff[4] << 8 | mpu_buff[5];
 80078b4:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <IMU_GetData+0xc0>)
 80078b6:	791b      	ldrb	r3, [r3, #4]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	b21a      	sxth	r2, r3
 80078bc:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <IMU_GetData+0xc0>)
 80078be:	795b      	ldrb	r3, [r3, #5]
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	4313      	orrs	r3, r2
 80078c4:	b21a      	sxth	r2, r3
 80078c6:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <IMU_GetData+0xc4>)
 80078c8:	809a      	strh	r2, [r3, #4]
    I->ax = (double)mpu_data.ax / (double)4096;
 80078ca:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <IMU_GetData+0xc4>)
 80078cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7f8 fddf 	bl	8000494 <__aeabi_i2d>
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	4b18      	ldr	r3, [pc, #96]	; (800793c <IMU_GetData+0xc8>)
 80078dc:	f7f8 ff6e 	bl	80007bc <__aeabi_ddiv>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	e9c2 3406 	strd	r3, r4, [r2, #24]
    I->ay = (double)mpu_data.ay / (double)4096;
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <IMU_GetData+0xc4>)
 80078ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f8 fdcf 	bl	8000494 <__aeabi_i2d>
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <IMU_GetData+0xc8>)
 80078fc:	f7f8 ff5e 	bl	80007bc <__aeabi_ddiv>
 8007900:	4603      	mov	r3, r0
 8007902:	460c      	mov	r4, r1
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	e9c2 3408 	strd	r3, r4, [r2, #32]
    I->az = (double)mpu_data.az / (double)4096;
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <IMU_GetData+0xc4>)
 800790c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f7f8 fdbf 	bl	8000494 <__aeabi_i2d>
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	4b08      	ldr	r3, [pc, #32]	; (800793c <IMU_GetData+0xc8>)
 800791c:	f7f8 ff4e 	bl	80007bc <__aeabi_ddiv>
 8007920:	4603      	mov	r3, r0
 8007922:	460c      	mov	r4, r1
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}
 8007932:	bf00      	nop
 8007934:	20004044 	.word	0x20004044
 8007938:	200043cc 	.word	0x200043cc
 800793c:	40b00000 	.word	0x40b00000

08007940 <IMU_Open>:


/* 载入一个IMU单元 */
IMU_TypeDef IMU_Open(SPI_HandleTypeDef* hspi) {
 8007940:	b5b0      	push	{r4, r5, r7, lr}
 8007942:	b098      	sub	sp, #96	; 0x60
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	IMU_TypeDef I;
	uint8_t MPU6500_Init_Data[10][2] = {
 8007950:	f107 030c 	add.w	r3, r7, #12
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	609a      	str	r2, [r3, #8]
 800795c:	60da      	str	r2, [r3, #12]
 800795e:	611a      	str	r2, [r3, #16]
 8007960:	236b      	movs	r3, #107	; 0x6b
 8007962:	733b      	strb	r3, [r7, #12]
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	737b      	strb	r3, [r7, #13]
 8007968:	236b      	movs	r3, #107	; 0x6b
 800796a:	73bb      	strb	r3, [r7, #14]
 800796c:	2303      	movs	r3, #3
 800796e:	73fb      	strb	r3, [r7, #15]
 8007970:	236c      	movs	r3, #108	; 0x6c
 8007972:	743b      	strb	r3, [r7, #16]
 8007974:	231a      	movs	r3, #26
 8007976:	74bb      	strb	r3, [r7, #18]
 8007978:	2304      	movs	r3, #4
 800797a:	74fb      	strb	r3, [r7, #19]
 800797c:	231b      	movs	r3, #27
 800797e:	753b      	strb	r3, [r7, #20]
 8007980:	2318      	movs	r3, #24
 8007982:	757b      	strb	r3, [r7, #21]
 8007984:	231c      	movs	r3, #28
 8007986:	75bb      	strb	r3, [r7, #22]
 8007988:	2310      	movs	r3, #16
 800798a:	75fb      	strb	r3, [r7, #23]
 800798c:	231d      	movs	r3, #29
 800798e:	763b      	strb	r3, [r7, #24]
 8007990:	2302      	movs	r3, #2
 8007992:	767b      	strb	r3, [r7, #25]
 8007994:	236a      	movs	r3, #106	; 0x6a
 8007996:	76bb      	strb	r3, [r7, #26]
 8007998:	2320      	movs	r3, #32
 800799a:	76fb      	strb	r3, [r7, #27]
			{ MPU6500_ACCEL_CONFIG, 0x10 },   /* +-2G */
			{ MPU6500_ACCEL_CONFIG_2, 0x02 }, /* enable LowPassFilter  Set Acc LPF */
			{ MPU6500_USER_CTRL, 0x20 } 	  /* Enable AUX */
	};

	HAL_Delay(100);
 800799c:	2064      	movs	r0, #100	; 0x64
 800799e:	f7f9 fa8f 	bl	8000ec0 <HAL_Delay>
	I.spi = hspi;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
	I.id = MPU_ReadByte(&I, MPU6500_WHO_AM_I);
 80079a6:	f107 0320 	add.w	r3, r7, #32
 80079aa:	2175      	movs	r1, #117	; 0x75
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fe87 	bl	80076c0 <MPU_ReadByte>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 3020 	strb.w	r3, [r7, #32]

	for (i = 0; i < 10; i++) {
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80079be:	e01c      	b.n	80079fa <IMU_Open+0xba>
		MPU_WriteByte(&I, MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 80079c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80079ca:	4413      	add	r3, r2
 80079cc:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 80079d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80079da:	4413      	add	r3, r2
 80079dc:	f813 2c53 	ldrb.w	r2, [r3, #-83]
 80079e0:	f107 0320 	add.w	r3, r7, #32
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fea3 	bl	8007730 <MPU_WriteByte>
		HAL_Delay(1);
 80079ea:	2001      	movs	r0, #1
 80079ec:	f7f9 fa68 	bl	8000ec0 <HAL_Delay>
	for (i = 0; i < 10; i++) {
 80079f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079f4:	3301      	adds	r3, #1
 80079f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80079fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d9de      	bls.n	80079c0 <IMU_Open+0x80>
	}

	mpu_set_gyro_fsr(&I, 3);
 8007a02:	f107 0320 	add.w	r3, r7, #32
 8007a06:	2103      	movs	r1, #3
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ff0d 	bl	8007828 <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(&I, 2);
 8007a0e:	f107 0320 	add.w	r3, r7, #32
 8007a12:	2102      	movs	r1, #2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff ff1a 	bl	800784e <mpu_set_accel_fsr>
	I.board_state = IMU_BOARD_DOWN;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	return I;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	461d      	mov	r5, r3
 8007a24:	f107 0420 	add.w	r4, r7, #32
 8007a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a38:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	3760      	adds	r7, #96	; 0x60
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bdb0      	pop	{r4, r5, r7, pc}

08007a44 <IMU_CheckSuccess>:

/* 检查IMU是否创建成功 */
uint8_t IMU_CheckSuccess(IMU_TypeDef* I) {
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	if (I->id == MPU6500_ID) return HAL_OK;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b70      	cmp	r3, #112	; 0x70
 8007a52:	d101      	bne.n	8007a58 <IMU_CheckSuccess+0x14>
 8007a54:	2300      	movs	r3, #0
 8007a56:	e000      	b.n	8007a5a <IMU_CheckSuccess+0x16>
	return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <IMU_SetBoardState>:

/* IMU_BOARD_UP/DOWN */
void IMU_SetBoardState(IMU_TypeDef* I, uint8_t board_state) {
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
	I->board_state = board_state;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
	...

08007a88 <AGVUI_Callback>:
//		osDelay(50);
//	}
//}

void AGVUI_Callback( Agvui_t * a )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	float * params = AGVUI_GetParams(a);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fd ff6f 	bl	8005974 <AGVUI_GetParams>
 8007a96:	6178      	str	r0, [r7, #20]

	/* 上位机发送目标XY位置 */
	if (AGVUI_GetHead(a) == 1)
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fd ff5f 	bl	800595c <AGVUI_GetHead>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d110      	bne.n	8007ac6 <AGVUI_Callback+0x3e>
	{
		goalx = params[0];
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a37      	ldr	r2, [pc, #220]	; (8007b88 <AGVUI_Callback+0x100>)
 8007aaa:	6013      	str	r3, [r2, #0]
		goaly = params[1];
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a36      	ldr	r2, [pc, #216]	; (8007b8c <AGVUI_Callback+0x104>)
 8007ab2:	6013      	str	r3, [r2, #0]
		pospid.cnt = 0;
 8007ab4:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <AGVUI_Callback+0x108>)
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c
		pospid.rough = ROUGH_DIV;
 8007abc:	4b34      	ldr	r3, [pc, #208]	; (8007b90 <AGVUI_Callback+0x108>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	/* 上位机发送修正指�???? */
	else if (AGVUI_GetHead(a) == 4)
	{
		fix_cmd = FIX_TRUE;
	}
}
 8007ac4:	e05b      	b.n	8007b7e <AGVUI_Callback+0xf6>
	else if (AGVUI_GetHead(a) == 2)
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fd ff48 	bl	800595c <AGVUI_GetHead>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d108      	bne.n	8007ae4 <AGVUI_Callback+0x5c>
		gainx = params[0];
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2f      	ldr	r2, [pc, #188]	; (8007b94 <AGVUI_Callback+0x10c>)
 8007ad8:	6013      	str	r3, [r2, #0]
		gainy = params[1];
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4a2e      	ldr	r2, [pc, #184]	; (8007b98 <AGVUI_Callback+0x110>)
 8007ae0:	6013      	str	r3, [r2, #0]
}
 8007ae2:	e04c      	b.n	8007b7e <AGVUI_Callback+0xf6>
	else if (AGVUI_GetHead(a) == 3)
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fd ff39 	bl	800595c <AGVUI_GetHead>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d13d      	bne.n	8007b6c <AGVUI_Callback+0xe4>
		forward = params[0];
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	613b      	str	r3, [r7, #16]
		offset = params[1];
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	60fb      	str	r3, [r7, #12]
		rotate = params[2];
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	60bb      	str	r3, [r7, #8]
		fix_vel[0] = forward - offset - rotate;
 8007b02:	ed97 7a04 	vldr	s14, [r7, #16]
 8007b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b16:	4b21      	ldr	r3, [pc, #132]	; (8007b9c <AGVUI_Callback+0x114>)
 8007b18:	edc3 7a00 	vstr	s15, [r3]
		fix_vel[1] = forward + offset + rotate;
 8007b1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b28:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b30:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <AGVUI_Callback+0x114>)
 8007b32:	edc3 7a01 	vstr	s15, [r3, #4]
		fix_vel[2] = forward - offset + rotate;
 8007b36:	ed97 7a04 	vldr	s14, [r7, #16]
 8007b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <AGVUI_Callback+0x114>)
 8007b4c:	edc3 7a02 	vstr	s15, [r3, #8]
		fix_vel[3] = forward + offset - rotate;
 8007b50:	ed97 7a04 	vldr	s14, [r7, #16]
 8007b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b64:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <AGVUI_Callback+0x114>)
 8007b66:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8007b6a:	e008      	b.n	8007b7e <AGVUI_Callback+0xf6>
	else if (AGVUI_GetHead(a) == 4)
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fd fef5 	bl	800595c <AGVUI_GetHead>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d102      	bne.n	8007b7e <AGVUI_Callback+0xf6>
		fix_cmd = FIX_TRUE;
 8007b78:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <AGVUI_Callback+0x118>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20003de8 	.word	0x20003de8
 8007b8c:	20003dec 	.word	0x20003dec
 8007b90:	20004380 	.word	0x20004380
 8007b94:	20004330 	.word	0x20004330
 8007b98:	200040e8 	.word	0x200040e8
 8007b9c:	2000434c 	.word	0x2000434c
 8007ba0:	2000000c 	.word	0x2000000c

08007ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ba8:	f7f9 f948 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007bac:	f000 f822 	bl	8007bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007bb0:	f7ff fd1a 	bl	80075e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007bb4:	f7fe feda 	bl	800696c <MX_DMA_Init>
  MX_CAN1_Init();
 8007bb8:	f7fd fefa 	bl	80059b0 <MX_CAN1_Init>
  MX_UART8_Init();
 8007bbc:	f001 fa58 	bl	8009070 <MX_UART8_Init>
  MX_SPI5_Init();
 8007bc0:	f001 f822 	bl	8008c08 <MX_SPI5_Init>
  MX_UART7_Init();
 8007bc4:	f001 fa2a 	bl	800901c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  dev_init();
 8007bc8:	f7fd ff78 	bl	8005abc <dev_init>

  AGVUI_Open( &A, &huart8 );
 8007bcc:	4906      	ldr	r1, [pc, #24]	; (8007be8 <main+0x44>)
 8007bce:	4807      	ldr	r0, [pc, #28]	; (8007bec <main+0x48>)
 8007bd0:	f7fd fd36 	bl	8005640 <AGVUI_Open>
  AGVUI_SetTxDataAdd( &A, (void*)&pospid.cnt, (void*)&pospid.cnt );
 8007bd4:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <main+0x4c>)
 8007bd6:	4906      	ldr	r1, [pc, #24]	; (8007bf0 <main+0x4c>)
 8007bd8:	4804      	ldr	r0, [pc, #16]	; (8007bec <main+0x48>)
 8007bda:	f7fd fed7 	bl	800598c <AGVUI_SetTxDataAdd>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8007bde:	f7ff fc6b 	bl	80074b8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8007be2:	f7fc fb25 	bl	8004230 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007be6:	e7fe      	b.n	8007be6 <main+0x42>
 8007be8:	20004624 	.word	0x20004624
 8007bec:	200043ec 	.word	0x200043ec
 8007bf0:	200043ac 	.word	0x200043ac

08007bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b094      	sub	sp, #80	; 0x50
 8007bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007bfa:	f107 0320 	add.w	r3, r7, #32
 8007bfe:	2230      	movs	r2, #48	; 0x30
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 fbaf 	bl	8009366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c08:	f107 030c 	add.w	r3, r7, #12
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	60da      	str	r2, [r3, #12]
 8007c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <SystemClock_Config+0xdc>)
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <SystemClock_Config+0xdc>)
 8007c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c26:	6413      	str	r3, [r2, #64]	; 0x40
 8007c28:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <SystemClock_Config+0xdc>)
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c34:	2300      	movs	r3, #0
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <SystemClock_Config+0xe0>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a25      	ldr	r2, [pc, #148]	; (8007cd4 <SystemClock_Config+0xe0>)
 8007c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <SystemClock_Config+0xe0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007c50:	2301      	movs	r3, #1
 8007c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8007c64:	2306      	movs	r3, #6
 8007c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007c68:	23b4      	movs	r3, #180	; 0xb4
 8007c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007c70:	2304      	movs	r3, #4
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c74:	f107 0320 	add.w	r3, r7, #32
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fa fc8f 	bl	800259c <HAL_RCC_OscConfig>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007c84:	f000 f83a 	bl	8007cfc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007c88:	f7fa fc38 	bl	80024fc <HAL_PWREx_EnableOverDrive>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007c92:	f000 f833 	bl	8007cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c96:	230f      	movs	r3, #15
 8007c98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007ca2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	2105      	movs	r1, #5
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fa fee1 	bl	8002a7c <HAL_RCC_ClockConfig>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007cc0:	f000 f81c 	bl	8007cfc <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8007cc4:	f7fa ffc0 	bl	8002c48 <HAL_RCC_EnableCSS>
}
 8007cc8:	bf00      	nop
 8007cca:	3750      	adds	r7, #80	; 0x50
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	40007000 	.word	0x40007000

08007cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a04      	ldr	r2, [pc, #16]	; (8007cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d101      	bne.n	8007cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007cea:	f7f9 f8c9 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40002000 	.word	0x40002000

08007cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007d00:	bf00      	nop
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <RXD_Open>:
#include "rxd.h"
#include "stdlib.h"
#include "string.h"


RXD_TypeDef RXD_Open(UART_HandleTypeDef* huart, uint8_t* rx_addr, uint8_t rx_length) {
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b09c      	sub	sp, #112	; 0x70
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	70fb      	strb	r3, [r7, #3]
	RXD_TypeDef R;
	memset(&R, 0, sizeof(RXD_TypeDef));
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	225c      	movs	r2, #92	; 0x5c
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fb20 	bl	8009366 <memset>
	R.huart = huart;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	617b      	str	r3, [r7, #20]
	R.rx_length = rx_length;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	763b      	strb	r3, [r7, #24]
	R.rx_addr = rx_addr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	66fb      	str	r3, [r7, #108]	; 0x6c
	return R;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f107 0314 	add.w	r3, r7, #20
 8007d3a:	225c      	movs	r2, #92	; 0x5c
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f001 fb07 	bl	8009350 <memcpy>
}
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	3770      	adds	r7, #112	; 0x70
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <RXD_Enable>:

void RXD_Enable(RXD_TypeDef* R) {
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* huart = R->huart;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]

	SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d66:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0210 	orr.w	r2, r2, #16
 8007d76:	60da      	str	r2, [r3, #12]
	__HAL_DMA_DISABLE(huart->hdmarx);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0201 	bic.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
	while (huart->hdmarx->Instance->CR & DMA_SxCR_EN) {
 8007d8c:	e009      	b.n	8007da2 <RXD_Enable+0x58>
		__HAL_DMA_DISABLE(huart->hdmarx);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
	while (huart->hdmarx->Instance->CR & DMA_SxCR_EN) {
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1ed      	bne.n	8007d8e <RXD_Enable+0x44>
	}
	huart->hdmarx->Instance->PAR = (uint32_t) & (huart->Instance->DR);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	609a      	str	r2, [r3, #8]
	huart->hdmarx->Instance->M0AR = (uint32_t)(R->rx_data1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	1d5a      	adds	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60da      	str	r2, [r3, #12]
	huart->hdmarx->Instance->M1AR = (uint32_t)(R->rx_data2);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	611a      	str	r2, [r3, #16]
	huart->hdmarx->Instance->NDTR = R->rx_length * 2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	005a      	lsls	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	605a      	str	r2, [r3, #4]
	SET_BIT(huart->hdmarx->Instance->CR, DMA_SxCR_DBM);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007dfa:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(huart->hdmarx);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0201 	orr.w	r2, r2, #1
 8007e0e:	601a      	str	r2, [r3, #0]
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <RXD_RxUpdate>:

__weak void RXD_Callback(RXD_TypeDef* R) {

}

void RXD_RxUpdate(RXD_TypeDef* R) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]

	static uint8_t i;

	if (R->huart->Instance->SR & UART_FLAG_IDLE) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80db 	beq.w	8007fec <RXD_RxUpdate+0x1d0>

		static uint16_t this_time_rx_len = 0;
		static UART_HandleTypeDef* huart;
		huart = R->huart;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a6e      	ldr	r2, [pc, #440]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e3c:	6013      	str	r3, [r2, #0]

		__HAL_UART_CLEAR_PEFLAG(huart);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	4b6c      	ldr	r3, [pc, #432]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	4b69      	ldr	r3, [pc, #420]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	68fb      	ldr	r3, [r7, #12]


		if ((huart->hdmarx->Instance->CR & DMA_SxCR_CT) == RESET) {
 8007e58:	4b66      	ldr	r3, [pc, #408]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d15f      	bne.n	8007f2a <RXD_RxUpdate+0x10e>

			__HAL_DMA_DISABLE(huart->hdmarx);
 8007e6a:	4b62      	ldr	r3, [pc, #392]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	4b5f      	ldr	r3, [pc, #380]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0201 	bic.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

			this_time_rx_len = R->rx_length * 2 - huart->hdmarx->Instance->NDTR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	791b      	ldrb	r3, [r3, #4]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	4b59      	ldr	r3, [pc, #356]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	4b56      	ldr	r3, [pc, #344]	; (8007ff8 <RXD_RxUpdate+0x1dc>)
 8007e9e:	801a      	strh	r2, [r3, #0]
			huart->hdmarx->Instance->NDTR = R->rx_length * 2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	791b      	ldrb	r3, [r3, #4]
 8007ea4:	005a      	lsls	r2, r3, #1
 8007ea6:	4b53      	ldr	r3, [pc, #332]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	605a      	str	r2, [r3, #4]
			huart->hdmarx->Instance->CR |= DMA_SxCR_CT;
 8007eb0:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b4e      	ldr	r3, [pc, #312]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007ec6:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(huart->hdmarx);
 8007ec8:	4b4a      	ldr	r3, [pc, #296]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b48      	ldr	r3, [pc, #288]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]

			if (this_time_rx_len == R->rx_length) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	791b      	ldrb	r3, [r3, #4]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	4b44      	ldr	r3, [pc, #272]	; (8007ff8 <RXD_RxUpdate+0x1dc>)
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d17b      	bne.n	8007fe6 <RXD_RxUpdate+0x1ca>
				for (i = 0; i < R->rx_length; i ++) R->rx_addr[i] = R->rx_data2[i];
 8007eee:	4b43      	ldr	r3, [pc, #268]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e012      	b.n	8007f1c <RXD_RxUpdate+0x100>
 8007ef6:	4b41      	ldr	r3, [pc, #260]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f00:	4a3e      	ldr	r2, [pc, #248]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	4413      	add	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	4b3a      	ldr	r3, [pc, #232]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	3301      	adds	r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	4b38      	ldr	r3, [pc, #224]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	791a      	ldrb	r2, [r3, #4]
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d8e6      	bhi.n	8007ef6 <RXD_RxUpdate+0xda>
 8007f28:	e05d      	b.n	8007fe6 <RXD_RxUpdate+0x1ca>
			}
		}

		else {
			__HAL_DMA_DISABLE(huart->hdmarx);
 8007f2a:	4b32      	ldr	r3, [pc, #200]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4b2f      	ldr	r3, [pc, #188]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

			this_time_rx_len = R->rx_length * 2 - huart->hdmarx->Instance->NDTR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	791b      	ldrb	r3, [r3, #4]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	4b29      	ldr	r3, [pc, #164]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	4b26      	ldr	r3, [pc, #152]	; (8007ff8 <RXD_RxUpdate+0x1dc>)
 8007f5e:	801a      	strh	r2, [r3, #0]
			huart->hdmarx->Instance->NDTR = R->rx_length * 2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	791b      	ldrb	r3, [r3, #4]
 8007f64:	005a      	lsls	r2, r3, #1
 8007f66:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	605a      	str	r2, [r3, #4]
			huart->hdmarx->Instance->CR &= ~(DMA_SxCR_CT);
 8007f70:	4b20      	ldr	r3, [pc, #128]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8007f86:	601a      	str	r2, [r3, #0]
			__HAL_DMA_ENABLE(huart->hdmarx);
 8007f88:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b18      	ldr	r3, [pc, #96]	; (8007ff4 <RXD_RxUpdate+0x1d8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

			if (this_time_rx_len == R->rx_length) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <RXD_RxUpdate+0x1dc>)
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d11b      	bne.n	8007fe6 <RXD_RxUpdate+0x1ca>
				for (i = 0; i < R->rx_length; i ++) R->rx_addr[i] = R->rx_data1[i];
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	e011      	b.n	8007fda <RXD_RxUpdate+0x1be>
 8007fb6:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc0:	4a0e      	ldr	r2, [pc, #56]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fc2:	7812      	ldrb	r2, [r2, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	440a      	add	r2, r1
 8007fca:	7952      	ldrb	r2, [r2, #5]
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fd8:	701a      	strb	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791a      	ldrb	r2, [r3, #4]
 8007fde:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <RXD_RxUpdate+0x1e0>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d8e7      	bhi.n	8007fb6 <RXD_RxUpdate+0x19a>
			}
		}

		/* 接收到一帧数据回调 */
		RXD_Callback(R);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fd fe64 	bl	8005cb4 <RXD_Callback>
	}
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20004054 	.word	0x20004054
 8007ff8:	20004058 	.word	0x20004058
 8007ffc:	2000405a 	.word	0x2000405a

08008000 <SPDM_CANFilterEnable>:

#define LIMIT 				(1e6)


/* 开启滤波器 */
static void SPDM_CANFilterEnable(CAN_HandleTypeDef* hcan) {
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	; 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8008018:	2300      	movs	r3, #0
 800801a:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800801c:	2300      	movs	r3, #0
 800801e:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8008020:	2301      	movs	r3, #1
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8008024:	2301      	movs	r3, #1
 8008026:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8008028:	231b      	movs	r3, #27
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8008030:	f107 0308 	add.w	r3, r7, #8
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 f860 	bl	80010fc <HAL_CAN_ConfigFilter>
}
 800803c:	bf00      	nop
 800803e:	3730      	adds	r7, #48	; 0x30
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <SPDM_Open>:

SPDM_TypeDef SPDM_Open(CAN_HandleTypeDef* hcan, uint16_t id_group) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b0de      	sub	sp, #376	; 0x178
 8008048:	af00      	add	r7, sp, #0
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	6018      	str	r0, [r3, #0]
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	1dbb      	adds	r3, r7, #6
 8008058:	801a      	strh	r2, [r3, #0]
	
	SPDM_TypeDef tmp;
	
	memset(&tmp, 0, sizeof(SPDM_TypeDef));
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f001 f97e 	bl	8009366 <memset>

	tmp.motor_can = hcan;
 800806a:	f107 0310 	add.w	r3, r7, #16
 800806e:	f107 0208 	add.w	r2, r7, #8
 8008072:	6812      	ldr	r2, [r2, #0]
 8008074:	601a      	str	r2, [r3, #0]
	tmp.motor_id_group = id_group;
 8008076:	f107 0310 	add.w	r3, r7, #16
 800807a:	1dba      	adds	r2, r7, #6
 800807c:	8812      	ldrh	r2, [r2, #0]
 800807e:	809a      	strh	r2, [r3, #4]
	
	SPDM_CANFilterEnable(hcan);
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f7ff ffbb 	bl	8008000 <SPDM_CANFilterEnable>
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	2102      	movs	r1, #2
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	f7f9 fa56 	bl	8001542 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(hcan);
 8008096:	f107 0308 	add.w	r3, r7, #8
 800809a:	6818      	ldr	r0, [r3, #0]
 800809c:	f7f9 f90e 	bl	80012bc <HAL_CAN_Start>
	
	return tmp;
 80080a0:	f107 030c 	add.w	r3, r7, #12
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	f107 0310 	add.w	r3, r7, #16
 80080aa:	4610      	mov	r0, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80080b2:	461a      	mov	r2, r3
 80080b4:	f001 f94c 	bl	8009350 <memcpy>
}
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <SPDM_GetRxMessage>:

void SPDM_GetRxMessage(uint32_t* pL, uint32_t* pH, uint8_t aData[]) {
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & *pL) >> CAN_RDL0R_DATA0_Pos);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & *pL) >> CAN_RDL0R_DATA1_Pos);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	0a1a      	lsrs	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3301      	adds	r3, #1
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & *pL) >> CAN_RDL0R_DATA2_Pos);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	0c1a      	lsrs	r2, r3, #16
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3302      	adds	r3, #2
 80080f4:	b2d2      	uxtb	r2, r2
 80080f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & *pL) >> CAN_RDL0R_DATA3_Pos);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	0e1a      	lsrs	r2, r3, #24
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3303      	adds	r3, #3
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & *pH) >> CAN_RDH0R_DATA4_Pos);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3304      	adds	r3, #4
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & *pH) >> CAN_RDH0R_DATA5_Pos);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	0a1a      	lsrs	r2, r3, #8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3305      	adds	r3, #5
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & *pH) >> CAN_RDH0R_DATA6_Pos);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	0c1a      	lsrs	r2, r3, #16
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3306      	adds	r3, #6
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & *pH) >> CAN_RDH0R_DATA7_Pos);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	0e1a      	lsrs	r2, r3, #24
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3307      	adds	r3, #7
 8008138:	b2d2      	uxtb	r2, r2
 800813a:	701a      	strb	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <SPDM_RxUpdate>:

/* 放在HAL_CAN_RxFifo0MsgPendingCallback中 */
void SPDM_RxUpdate(SPDM_TypeDef* M, CAN_HandleTypeDef* hcan) {
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]

	static uint16_t tmp;
	if (M->motor_can != hcan) return;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	f040 808f 	bne.w	800827c <SPDM_RxUpdate+0x134>
	tmp = (CAN_RI0R_STID & M->motor_can->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008168:	0d5b      	lsrs	r3, r3, #21
 800816a:	b29b      	uxth	r3, r3
 800816c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008170:	b29a      	uxth	r2, r3
 8008172:	4b45      	ldr	r3, [pc, #276]	; (8008288 <SPDM_RxUpdate+0x140>)
 8008174:	801a      	strh	r2, [r3, #0]
	
	/* 第一个电机 */
	if (tmp == 0x201) {
 8008176:	4b44      	ldr	r3, [pc, #272]	; (8008288 <SPDM_RxUpdate+0x140>)
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	f240 2201 	movw	r2, #513	; 0x201
 800817e:	4293      	cmp	r3, r2
 8008180:	d11a      	bne.n	80081b8 <SPDM_RxUpdate+0x70>
		M->dataL_buf[0] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDLR;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		M->dataH_buf[0] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDHR;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		M->active_channel[0] = 1;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0220 	orr.w	r2, r2, #32
 80081b4:	60da      	str	r2, [r3, #12]
 80081b6:	e062      	b.n	800827e <SPDM_RxUpdate+0x136>
	}
	
	/* 第二个电机 */
	else if (tmp == 0x202) {
 80081b8:	4b33      	ldr	r3, [pc, #204]	; (8008288 <SPDM_RxUpdate+0x140>)
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	f240 2202 	movw	r2, #514	; 0x202
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d11a      	bne.n	80081fa <SPDM_RxUpdate+0xb2>
		M->dataL_buf[1] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDLR;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		M->dataH_buf[1] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDHR;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		M->active_channel[1] = 1;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
		SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0220 	orr.w	r2, r2, #32
 80081f6:	60da      	str	r2, [r3, #12]
 80081f8:	e041      	b.n	800827e <SPDM_RxUpdate+0x136>
	}
	
	/* 第三个电机 */
	else if (tmp == 0x203) {
 80081fa:	4b23      	ldr	r3, [pc, #140]	; (8008288 <SPDM_RxUpdate+0x140>)
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	f240 2203 	movw	r2, #515	; 0x203
 8008202:	4293      	cmp	r3, r2
 8008204:	d11a      	bne.n	800823c <SPDM_RxUpdate+0xf4>
		M->dataL_buf[2] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDLR;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		M->dataH_buf[2] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDHR;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		M->active_channel[2] = 1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
		SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0220 	orr.w	r2, r2, #32
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e020      	b.n	800827e <SPDM_RxUpdate+0x136>
	}
	
	/* 第四个电机 */
	else if (tmp == 0x204) {
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <SPDM_RxUpdate+0x140>)
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8008244:	d11b      	bne.n	800827e <SPDM_RxUpdate+0x136>
		M->dataL_buf[3] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDLR;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		M->dataH_buf[3] = hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RDHR;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		M->active_channel[3] = 1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0220 	orr.w	r2, r2, #32
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	e000      	b.n	800827e <SPDM_RxUpdate+0x136>
	if (M->motor_can != hcan) return;
 800827c:	bf00      	nop
	}
}
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	2000405c 	.word	0x2000405c

0800828c <SPDM_CalcPid>:

/* 计算PID控制器输出 */
void SPDM_CalcPid(SPDM_TypeDef* M) {
 800828c:	b5b0      	push	{r4, r5, r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	static float uKd;
	static uint8_t data_buffer[8];

	static uint8_t i;

	if (M->active_channel[0] == 1) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800829a:	2b01      	cmp	r3, #1
 800829c:	d123      	bne.n	80082e6 <SPDM_CalcPid+0x5a>
		M->active_channel[0] = 0;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
		SPDM_GetRxMessage(M->dataL_buf, M->dataH_buf, data_buffer);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 709c 	add.w	r0, r3, #312	; 0x138
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80082b2:	4a9e      	ldr	r2, [pc, #632]	; (800852c <SPDM_CalcPid+0x2a0>)
 80082b4:	4619      	mov	r1, r3
 80082b6:	f7ff ff06 	bl	80080c6 <SPDM_GetRxMessage>
		M->angle[0] = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 80082ba:	4b9c      	ldr	r3, [pc, #624]	; (800852c <SPDM_CalcPid+0x2a0>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	b21a      	sxth	r2, r3
 80082c2:	4b9a      	ldr	r3, [pc, #616]	; (800852c <SPDM_CalcPid+0x2a0>)
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	b21b      	sxth	r3, r3
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b21a      	sxth	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	80da      	strh	r2, [r3, #6]
		M->velocity[0] = (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 80082d0:	4b96      	ldr	r3, [pc, #600]	; (800852c <SPDM_CalcPid+0x2a0>)
 80082d2:	789b      	ldrb	r3, [r3, #2]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	b21a      	sxth	r2, r3
 80082d8:	4b94      	ldr	r3, [pc, #592]	; (800852c <SPDM_CalcPid+0x2a0>)
 80082da:	78db      	ldrb	r3, [r3, #3]
 80082dc:	b21b      	sxth	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b21a      	sxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	81da      	strh	r2, [r3, #14]
	}
	
	if (M->active_channel[1] == 1) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d125      	bne.n	800833c <SPDM_CalcPid+0xb0>
		M->active_channel[1] = 0;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
		SPDM_GetRxMessage(M->dataL_buf + 1, M->dataH_buf + 1, data_buffer);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80082fe:	1d18      	adds	r0, r3, #4
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8008306:	3304      	adds	r3, #4
 8008308:	4a88      	ldr	r2, [pc, #544]	; (800852c <SPDM_CalcPid+0x2a0>)
 800830a:	4619      	mov	r1, r3
 800830c:	f7ff fedb 	bl	80080c6 <SPDM_GetRxMessage>
		M->angle[1] = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 8008310:	4b86      	ldr	r3, [pc, #536]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	b21a      	sxth	r2, r3
 8008318:	4b84      	ldr	r3, [pc, #528]	; (800852c <SPDM_CalcPid+0x2a0>)
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	b21b      	sxth	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b21a      	sxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	811a      	strh	r2, [r3, #8]
		M->velocity[1] = (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 8008326:	4b81      	ldr	r3, [pc, #516]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008328:	789b      	ldrb	r3, [r3, #2]
 800832a:	021b      	lsls	r3, r3, #8
 800832c:	b21a      	sxth	r2, r3
 800832e:	4b7f      	ldr	r3, [pc, #508]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008330:	78db      	ldrb	r3, [r3, #3]
 8008332:	b21b      	sxth	r3, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	b21a      	sxth	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	821a      	strh	r2, [r3, #16]
	}
	
	if (M->active_channel[2] == 1) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8008342:	2b01      	cmp	r3, #1
 8008344:	d126      	bne.n	8008394 <SPDM_CalcPid+0x108>
		M->active_channel[2] = 0;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
		SPDM_GetRxMessage(M->dataL_buf + 2, M->dataH_buf + 2, data_buffer);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008354:	f103 0008 	add.w	r0, r3, #8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800835e:	3308      	adds	r3, #8
 8008360:	4a72      	ldr	r2, [pc, #456]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008362:	4619      	mov	r1, r3
 8008364:	f7ff feaf 	bl	80080c6 <SPDM_GetRxMessage>
		M->angle[2] = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 8008368:	4b70      	ldr	r3, [pc, #448]	; (800852c <SPDM_CalcPid+0x2a0>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	b21a      	sxth	r2, r3
 8008370:	4b6e      	ldr	r3, [pc, #440]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	b21b      	sxth	r3, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	b21a      	sxth	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	815a      	strh	r2, [r3, #10]
		M->velocity[2] = (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 800837e:	4b6b      	ldr	r3, [pc, #428]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008380:	789b      	ldrb	r3, [r3, #2]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	b21a      	sxth	r2, r3
 8008386:	4b69      	ldr	r3, [pc, #420]	; (800852c <SPDM_CalcPid+0x2a0>)
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	b21b      	sxth	r3, r3
 800838c:	4313      	orrs	r3, r2
 800838e:	b21a      	sxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	825a      	strh	r2, [r3, #18]
	}
	
	if (M->active_channel[3] == 1) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800839a:	2b01      	cmp	r3, #1
 800839c:	d126      	bne.n	80083ec <SPDM_CalcPid+0x160>
		M->active_channel[3] = 0;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		SPDM_GetRxMessage(M->dataL_buf + 3, M->dataH_buf + 3, data_buffer);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80083ac:	f103 000c 	add.w	r0, r3, #12
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80083b6:	330c      	adds	r3, #12
 80083b8:	4a5c      	ldr	r2, [pc, #368]	; (800852c <SPDM_CalcPid+0x2a0>)
 80083ba:	4619      	mov	r1, r3
 80083bc:	f7ff fe83 	bl	80080c6 <SPDM_GetRxMessage>
		M->angle[3] = (int16_t)(data_buffer[0] << 8 | data_buffer[1]);
 80083c0:	4b5a      	ldr	r3, [pc, #360]	; (800852c <SPDM_CalcPid+0x2a0>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	021b      	lsls	r3, r3, #8
 80083c6:	b21a      	sxth	r2, r3
 80083c8:	4b58      	ldr	r3, [pc, #352]	; (800852c <SPDM_CalcPid+0x2a0>)
 80083ca:	785b      	ldrb	r3, [r3, #1]
 80083cc:	b21b      	sxth	r3, r3
 80083ce:	4313      	orrs	r3, r2
 80083d0:	b21a      	sxth	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	819a      	strh	r2, [r3, #12]
		M->velocity[3] = (int16_t)(data_buffer[2] << 8 | data_buffer[3]);
 80083d6:	4b55      	ldr	r3, [pc, #340]	; (800852c <SPDM_CalcPid+0x2a0>)
 80083d8:	789b      	ldrb	r3, [r3, #2]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	b21a      	sxth	r2, r3
 80083de:	4b53      	ldr	r3, [pc, #332]	; (800852c <SPDM_CalcPid+0x2a0>)
 80083e0:	78db      	ldrb	r3, [r3, #3]
 80083e2:	b21b      	sxth	r3, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	b21a      	sxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	829a      	strh	r2, [r3, #20]
	}

	M->vel[0] = M->velocity[0] / 60.f * M->dir[0];
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083fa:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8008530 <SPDM_CalcPid+0x2a4>
 80083fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	edc3 7a06 	vstr	s15, [r3, #24]
	M->vel[1] = M->velocity[1] / 60.f * M->dir[1];
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008428:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008530 <SPDM_CalcPid+0x2a4>
 800842c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f9b3 312e 	ldrsh.w	r3, [r3, #302]	; 0x12e
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	edc3 7a07 	vstr	s15, [r3, #28]
	M->vel[2] = M->velocity[2] / 60.f * M->dir[2];
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008456:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008530 <SPDM_CalcPid+0x2a4>
 800845a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f9b3 3130 	ldrsh.w	r3, [r3, #304]	; 0x130
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800846c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	edc3 7a08 	vstr	s15, [r3, #32]
	M->vel[3] = M->velocity[3] / 60.f * M->dir[3];
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800847c:	ee07 3a90 	vmov	s15, r3
 8008480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008484:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008530 <SPDM_CalcPid+0x2a4>
 8008488:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f9b3 3132 	ldrsh.w	r3, [r3, #306]	; 0x132
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	
	/* 计算误差 */
	M->pid.cur_err[0] = M->vel_set[0] - M->vel[0];
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80084b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	M->pid.cur_err[1] = M->vel_set[1] - M->vel[1];
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80084c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	M->pid.cur_err[2] = M->vel_set[2] - M->vel[2];
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80084dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	M->pid.cur_err[3] = M->vel_set[3] - M->vel[3];
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80084f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	cur_err[0] = M->pid.cur_err[0];
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008502:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <SPDM_CalcPid+0x2a8>)
 8008504:	6013      	str	r3, [r2, #0]
	cur_err[1] = M->pid.cur_err[1];
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800850c:	4a09      	ldr	r2, [pc, #36]	; (8008534 <SPDM_CalcPid+0x2a8>)
 800850e:	6053      	str	r3, [r2, #4]
	cur_err[2] = M->pid.cur_err[2];
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008516:	4a07      	ldr	r2, [pc, #28]	; (8008534 <SPDM_CalcPid+0x2a8>)
 8008518:	6093      	str	r3, [r2, #8]
	cur_err[3] = M->pid.cur_err[3];
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008520:	4a04      	ldr	r2, [pc, #16]	; (8008534 <SPDM_CalcPid+0x2a8>)
 8008522:	60d3      	str	r3, [r2, #12]
	
	for (i = 0; i < 4; i ++) {
 8008524:	4b04      	ldr	r3, [pc, #16]	; (8008538 <SPDM_CalcPid+0x2ac>)
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e186      	b.n	800883a <SPDM_CalcPid+0x5ae>
 800852c:	20004060 	.word	0x20004060
 8008530:	42700000 	.word	0x42700000
 8008534:	20004068 	.word	0x20004068
 8008538:	20004078 	.word	0x20004078

		A = M->pid.A[i];
 800853c:	4b44      	ldr	r3, [pc, #272]	; (8008650 <SPDM_CalcPid+0x3c4>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	3322      	adds	r3, #34	; 0x22
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a42      	ldr	r2, [pc, #264]	; (8008654 <SPDM_CalcPid+0x3c8>)
 800854c:	6013      	str	r3, [r2, #0]
		B = M->pid.B[i];
 800854e:	4b40      	ldr	r3, [pc, #256]	; (8008650 <SPDM_CalcPid+0x3c4>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	3326      	adds	r3, #38	; 0x26
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a3e      	ldr	r2, [pc, #248]	; (8008658 <SPDM_CalcPid+0x3cc>)
 800855e:	6013      	str	r3, [r2, #0]

		/* 钳制积分 */
		if ((M->pid.is_sat[i] == 1 && cur_err[i] > 0) || (M->pid.is_sat[i] == -1 && cur_err[i] < 0)) ;
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <SPDM_CalcPid+0x3c4>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	f993 3110 	ldrsb.w	r3, [r3, #272]	; 0x110
 800856e:	2b01      	cmp	r3, #1
 8008570:	d10c      	bne.n	800858c <SPDM_CalcPid+0x300>
 8008572:	4b37      	ldr	r3, [pc, #220]	; (8008650 <SPDM_CalcPid+0x3c4>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	4a39      	ldr	r2, [pc, #228]	; (800865c <SPDM_CalcPid+0x3d0>)
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	edd3 7a00 	vldr	s15, [r3]
 8008580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	f300 80c1 	bgt.w	800870e <SPDM_CalcPid+0x482>
 800858c:	4b30      	ldr	r3, [pc, #192]	; (8008650 <SPDM_CalcPid+0x3c4>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	f993 3110 	ldrsb.w	r3, [r3, #272]	; 0x110
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d10c      	bne.n	80085ba <SPDM_CalcPid+0x32e>
 80085a0:	4b2b      	ldr	r3, [pc, #172]	; (8008650 <SPDM_CalcPid+0x3c4>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4a2d      	ldr	r2, [pc, #180]	; (800865c <SPDM_CalcPid+0x3d0>)
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	edd3 7a00 	vldr	s15, [r3]
 80085ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b6:	f100 80aa 	bmi.w	800870e <SPDM_CalcPid+0x482>

		/* 变速积分 */
		else {

			if (fabs(cur_err[i]) <= B) {
 80085ba:	4b25      	ldr	r3, [pc, #148]	; (8008650 <SPDM_CalcPid+0x3c4>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	4a27      	ldr	r2, [pc, #156]	; (800865c <SPDM_CalcPid+0x3d0>)
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	edd3 7a00 	vldr	s15, [r3]
 80085c8:	eeb0 7ae7 	vabs.f32	s14, s15
 80085cc:	4b22      	ldr	r3, [pc, #136]	; (8008658 <SPDM_CalcPid+0x3cc>)
 80085ce:	edd3 7a00 	vldr	s15, [r3]
 80085d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085da:	d819      	bhi.n	8008610 <SPDM_CalcPid+0x384>
				M->pid.sum_err[i] += cur_err[i];
 80085dc:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <SPDM_CalcPid+0x3c4>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	3332      	adds	r3, #50	; 0x32
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	ed93 7a00 	vldr	s14, [r3]
 80085ec:	4b18      	ldr	r3, [pc, #96]	; (8008650 <SPDM_CalcPid+0x3c4>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	4a1a      	ldr	r2, [pc, #104]	; (800865c <SPDM_CalcPid+0x3d0>)
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	edd3 7a00 	vldr	s15, [r3]
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <SPDM_CalcPid+0x3c4>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	3332      	adds	r3, #50	; 0x32
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	edc3 7a00 	vstr	s15, [r3]
 800860e:	e07e      	b.n	800870e <SPDM_CalcPid+0x482>
			}
			else if (fabs(cur_err[i]) >= A + B) {
 8008610:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <SPDM_CalcPid+0x3c4>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4a11      	ldr	r2, [pc, #68]	; (800865c <SPDM_CalcPid+0x3d0>)
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	edd3 7a00 	vldr	s15, [r3]
 800861e:	eeb0 7ae7 	vabs.f32	s14, s15
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <SPDM_CalcPid+0x3c8>)
 8008624:	edd3 6a00 	vldr	s13, [r3]
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <SPDM_CalcPid+0x3cc>)
 800862a:	edd3 7a00 	vldr	s15, [r3]
 800862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863a:	db11      	blt.n	8008660 <SPDM_CalcPid+0x3d4>
				M->pid.sum_err[i] = 0;
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <SPDM_CalcPid+0x3c4>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	3332      	adds	r3, #50	; 0x32
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e05e      	b.n	800870e <SPDM_CalcPid+0x482>
 8008650:	20004078 	.word	0x20004078
 8008654:	2000407c 	.word	0x2000407c
 8008658:	20004080 	.word	0x20004080
 800865c:	20004068 	.word	0x20004068
			}
			else {
				ratio = (A + B - fabs(cur_err[i])) / A;
 8008660:	4bb2      	ldr	r3, [pc, #712]	; (800892c <SPDM_CalcPid+0x6a0>)
 8008662:	ed93 7a00 	vldr	s14, [r3]
 8008666:	4bb2      	ldr	r3, [pc, #712]	; (8008930 <SPDM_CalcPid+0x6a4>)
 8008668:	edd3 7a00 	vldr	s15, [r3]
 800866c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008670:	ee17 0a90 	vmov	r0, s15
 8008674:	f7f7 ff20 	bl	80004b8 <__aeabi_f2d>
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	4bad      	ldr	r3, [pc, #692]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4aad      	ldr	r2, [pc, #692]	; (8008938 <SPDM_CalcPid+0x6ac>)
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	edd3 7a00 	vldr	s15, [r3]
 800868a:	eef0 7ae7 	vabs.f32	s15, s15
 800868e:	ee17 0a90 	vmov	r0, s15
 8008692:	f7f7 ff11 	bl	80004b8 <__aeabi_f2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4620      	mov	r0, r4
 800869c:	4629      	mov	r1, r5
 800869e:	f7f7 fdab 	bl	80001f8 <__aeabi_dsub>
 80086a2:	4603      	mov	r3, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	4625      	mov	r5, r4
 80086a8:	461c      	mov	r4, r3
 80086aa:	4ba0      	ldr	r3, [pc, #640]	; (800892c <SPDM_CalcPid+0x6a0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f7 ff02 	bl	80004b8 <__aeabi_f2d>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f8 f87e 	bl	80007bc <__aeabi_ddiv>
 80086c0:	4603      	mov	r3, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	4618      	mov	r0, r3
 80086c6:	4621      	mov	r1, r4
 80086c8:	f7f8 f9e8 	bl	8000a9c <__aeabi_d2f>
 80086cc:	4602      	mov	r2, r0
 80086ce:	4b9b      	ldr	r3, [pc, #620]	; (800893c <SPDM_CalcPid+0x6b0>)
 80086d0:	601a      	str	r2, [r3, #0]
				M->pid.sum_err[i] += ratio * cur_err[i];
 80086d2:	4b98      	ldr	r3, [pc, #608]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	3332      	adds	r3, #50	; 0x32
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	ed93 7a00 	vldr	s14, [r3]
 80086e2:	4b94      	ldr	r3, [pc, #592]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	4a94      	ldr	r2, [pc, #592]	; (8008938 <SPDM_CalcPid+0x6ac>)
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	edd3 6a00 	vldr	s13, [r3]
 80086f0:	4b92      	ldr	r3, [pc, #584]	; (800893c <SPDM_CalcPid+0x6b0>)
 80086f2:	edd3 7a00 	vldr	s15, [r3]
 80086f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086fa:	4b8e      	ldr	r3, [pc, #568]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	3332      	adds	r3, #50	; 0x32
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		/* 不完全微分 */
		uKd = M->pid.a3[i] * (cur_err[i] - M->pid.prv_err[i]) * (1 - M->pid.alpha[i]) + M->pid.alpha[i] * M->pid.last_uKd[i];
 800870e:	4b89      	ldr	r3, [pc, #548]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	331e      	adds	r3, #30
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	ed93 7a00 	vldr	s14, [r3]
 800871e:	4b85      	ldr	r3, [pc, #532]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	4a85      	ldr	r2, [pc, #532]	; (8008938 <SPDM_CalcPid+0x6ac>)
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	edd3 6a00 	vldr	s13, [r3]
 800872c:	4b81      	ldr	r3, [pc, #516]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	333a      	adds	r3, #58	; 0x3a
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	edd3 7a00 	vldr	s15, [r3]
 800873c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008744:	4b7b      	ldr	r3, [pc, #492]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	332a      	adds	r3, #42	; 0x2a
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	edd3 7a00 	vldr	s15, [r3]
 8008754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008758:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800875c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008760:	4b74      	ldr	r3, [pc, #464]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	332a      	adds	r3, #42	; 0x2a
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	edd3 6a00 	vldr	s13, [r3]
 8008770:	4b70      	ldr	r3, [pc, #448]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	333e      	adds	r3, #62	; 0x3e
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	edd3 7a00 	vldr	s15, [r3]
 8008780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008788:	4b6d      	ldr	r3, [pc, #436]	; (8008940 <SPDM_CalcPid+0x6b4>)
 800878a:	edc3 7a00 	vstr	s15, [r3]

		/* 计算输出 */
		M->volt[i] = M->pid.a1[i] * cur_err[i] + M->pid.a2[i] * M->pid.sum_err[i] + uKd;
 800878e:	4b69      	ldr	r3, [pc, #420]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	3316      	adds	r3, #22
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	ed93 7a00 	vldr	s14, [r3]
 800879e:	4b65      	ldr	r3, [pc, #404]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	4a65      	ldr	r2, [pc, #404]	; (8008938 <SPDM_CalcPid+0x6ac>)
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	edd3 7a00 	vldr	s15, [r3]
 80087ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80087b0:	4b60      	ldr	r3, [pc, #384]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	331a      	adds	r3, #26
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	edd3 6a00 	vldr	s13, [r3]
 80087c0:	4b5c      	ldr	r3, [pc, #368]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	3332      	adds	r3, #50	; 0x32
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	edd3 7a00 	vldr	s15, [r3]
 80087d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80087d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087d8:	4b59      	ldr	r3, [pc, #356]	; (8008940 <SPDM_CalcPid+0x6b4>)
 80087da:	edd3 7a00 	vldr	s15, [r3]
 80087de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087e2:	4b54      	ldr	r3, [pc, #336]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ec:	ee17 1a90 	vmov	r1, s15
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3256      	adds	r2, #86	; 0x56
 80087f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		M->pid.prv_err[i] = cur_err[i];
 80087f8:	4b4e      	ldr	r3, [pc, #312]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	4b4d      	ldr	r3, [pc, #308]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	4a4c      	ldr	r2, [pc, #304]	; (8008938 <SPDM_CalcPid+0x6ac>)
 8008806:	008b      	lsls	r3, r1, #2
 8008808:	4413      	add	r3, r2
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	f100 033a 	add.w	r3, r0, #58	; 0x3a
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	601a      	str	r2, [r3, #0]
		M->pid.last_uKd[i] = uKd;
 8008818:	4b46      	ldr	r3, [pc, #280]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	4b48      	ldr	r3, [pc, #288]	; (8008940 <SPDM_CalcPid+0x6b4>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i ++) {
 800882e:	4b41      	ldr	r3, [pc, #260]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	4b3f      	ldr	r3, [pc, #252]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	4b3e      	ldr	r3, [pc, #248]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b03      	cmp	r3, #3
 8008840:	f67f ae7c 	bls.w	800853c <SPDM_CalcPid+0x2b0>
	}

	/* 输出限幅 */
	for (i = 0; i < 4; i ++) {
 8008844:	4b3b      	ldr	r3, [pc, #236]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
 800884a:	e066      	b.n	800891a <SPDM_CalcPid+0x68e>

		if (M->volt[i] > M->pid.saturation[i]) {
 800884c:	4b39      	ldr	r3, [pc, #228]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3256      	adds	r2, #86	; 0x56
 8008856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800885a:	4a36      	ldr	r2, [pc, #216]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800885c:	7812      	ldrb	r2, [r2, #0]
 800885e:	4611      	mov	r1, r2
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	3184      	adds	r1, #132	; 0x84
 8008864:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8008868:	4293      	cmp	r3, r2
 800886a:	dd16      	ble.n	800889a <SPDM_CalcPid+0x60e>
			M->volt[i] = M->pid.saturation[i];
 800886c:	4b31      	ldr	r3, [pc, #196]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3284      	adds	r2, #132	; 0x84
 8008876:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3256      	adds	r2, #86	; 0x56
 8008884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			M->pid.is_sat[i] = 1;
 8008888:	4b2a      	ldr	r3, [pc, #168]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4413      	add	r3, r2
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8008898:	e007      	b.n	80088aa <SPDM_CalcPid+0x61e>
		}
		else M->pid.is_sat[i] = 0;
 800889a:	4b26      	ldr	r3, [pc, #152]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110


		if (M->volt[i] < -M->pid.saturation[i]) {
 80088aa:	4b22      	ldr	r3, [pc, #136]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3256      	adds	r2, #86	; 0x56
 80088b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088b8:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3184      	adds	r1, #132	; 0x84
 80088c2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80088c6:	425b      	negs	r3, r3
 80088c8:	429a      	cmp	r2, r3
 80088ca:	da18      	bge.n	80088fe <SPDM_CalcPid+0x672>
			M->volt[i] = -M->pid.saturation[i];
 80088cc:	4b19      	ldr	r3, [pc, #100]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3284      	adds	r2, #132	; 0x84
 80088d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80088da:	4619      	mov	r1, r3
 80088dc:	4b15      	ldr	r3, [pc, #84]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	4249      	negs	r1, r1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3256      	adds	r2, #86	; 0x56
 80088e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			M->pid.is_sat[i] = -1;
 80088ec:	4b11      	ldr	r3, [pc, #68]	; (8008934 <SPDM_CalcPid+0x6a8>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	22ff      	movs	r2, #255	; 0xff
 80088f8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80088fc:	e007      	b.n	800890e <SPDM_CalcPid+0x682>
		}
		else M->pid.is_sat[i] = 0;
 80088fe:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	for (i = 0; i < 4; i ++) {
 800890e:	4b09      	ldr	r3, [pc, #36]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	b2da      	uxtb	r2, r3
 8008916:	4b07      	ldr	r3, [pc, #28]	; (8008934 <SPDM_CalcPid+0x6a8>)
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	4b06      	ldr	r3, [pc, #24]	; (8008934 <SPDM_CalcPid+0x6a8>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d994      	bls.n	800884c <SPDM_CalcPid+0x5c0>
	}
}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bdb0      	pop	{r4, r5, r7, pc}
 800892a:	bf00      	nop
 800892c:	2000407c 	.word	0x2000407c
 8008930:	20004080 	.word	0x20004080
 8008934:	20004078 	.word	0x20004078
 8008938:	20004068 	.word	0x20004068
 800893c:	20004084 	.word	0x20004084
 8008940:	20004088 	.word	0x20004088

08008944 <SPDM_CtrlParams>:

void SPDM_CtrlParams(SPDM_TypeDef* M, float* kp, float* ki, float* kd, int16_t* output_saturation) {
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]

    uint8_t i;

    for (i = 0; i < 4; i ++) {
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]
 8008956:	e045      	b.n	80089e4 <SPDM_CtrlParams+0xa0>
        M->pid.a1[i] = kp[i];
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	441a      	add	r2, r3
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	6812      	ldr	r2, [r2, #0]
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	3316      	adds	r3, #22
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	601a      	str	r2, [r3, #0]
        M->pid.a2[i] = ki[i];
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	441a      	add	r2, r3
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	6812      	ldr	r2, [r2, #0]
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	331a      	adds	r3, #26
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	601a      	str	r2, [r3, #0]
        M->pid.a3[i] = kd[i];
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	441a      	add	r2, r3
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	331e      	adds	r3, #30
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	440b      	add	r3, r1
 8008998:	601a      	str	r2, [r3, #0]
        M->pid.A[i] = 0;
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	3322      	adds	r3, #34	; 0x22
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
        M->pid.B[i] = 1e6;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	3326      	adds	r3, #38	; 0x26
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	4a10      	ldr	r2, [pc, #64]	; (80089f8 <SPDM_CtrlParams+0xb4>)
 80089b6:	601a      	str	r2, [r3, #0]
        M->pid.alpha[i] = 0;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	332a      	adds	r3, #42	; 0x2a
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
        M->pid.saturation[i] = output_saturation[i];
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	4413      	add	r3, r2
 80089d0:	7dfa      	ldrb	r2, [r7, #23]
 80089d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3284      	adds	r2, #132	; 0x84
 80089da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < 4; i ++) {
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	3301      	adds	r3, #1
 80089e2:	75fb      	strb	r3, [r7, #23]
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d9b6      	bls.n	8008958 <SPDM_CtrlParams+0x14>
    }
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	49742400 	.word	0x49742400

080089fc <SPDM_ExCtrlParams>:

void SPDM_ExCtrlParams(SPDM_TypeDef* M, float* A, float* B, float* alpha) {
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]

	uint8_t i;

	for (i = 0; i < 4; i ++) {
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
 8008a0e:	e023      	b.n	8008a58 <SPDM_ExCtrlParams+0x5c>
		M->pid.A[i] = A[i];
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	441a      	add	r2, r3
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	68f9      	ldr	r1, [r7, #12]
 8008a1e:	3322      	adds	r3, #34	; 0x22
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	601a      	str	r2, [r3, #0]
		M->pid.B[i] = B[i];
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	68f9      	ldr	r1, [r7, #12]
 8008a34:	3326      	adds	r3, #38	; 0x26
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	601a      	str	r2, [r3, #0]
		M->pid.alpha[i] = alpha[i];
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	441a      	add	r2, r3
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	68f9      	ldr	r1, [r7, #12]
 8008a4a:	332a      	adds	r3, #42	; 0x2a
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 4; i ++) {
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	3301      	adds	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d9d8      	bls.n	8008a10 <SPDM_ExCtrlParams+0x14>
	}
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <SPDM_CmdVel>:

void SPDM_CmdVel(SPDM_TypeDef* M, float vel_rps1, float vel_rps2, float vel_rps3, float vel_rps4) {
 8008a6a:	b480      	push	{r7}
 8008a6c:	b087      	sub	sp, #28
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6178      	str	r0, [r7, #20]
 8008a72:	ed87 0a04 	vstr	s0, [r7, #16]
 8008a76:	edc7 0a03 	vstr	s1, [r7, #12]
 8008a7a:	ed87 1a02 	vstr	s2, [r7, #8]
 8008a7e:	edc7 1a01 	vstr	s3, [r7, #4]
//	if (vel_rps4 > LIMIT)
//		vel_rps4 = LIMIT;
//	if (vel_rps4 < -LIMIT)
//		vel_rps4 = -LIMIT;

	M->vel_set[0] = vel_rps1;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	M->vel_set[1] = vel_rps2;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	M->vel_set[2] = vel_rps3;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	M->vel_set[3] = vel_rps4;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <SPDM_SendCmd>:

void SPDM_SendCmd(SPDM_TypeDef* M, int16_t motor1, int16_t motor2, int16_t motor3, int16_t motor4) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	817b      	strh	r3, [r7, #10]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	813b      	strh	r3, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
	
	static uint32_t mailbox;
	static uint8_t data[8];
	static CAN_TxHeaderTypeDef header;
	
	if (HAL_CAN_IsTxMessagePending(M->motor_can, mailbox)) return;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4b39      	ldr	r3, [pc, #228]	; (8008bb4 <SPDM_SendCmd+0x104>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4610      	mov	r0, r2
 8008ad6:	f7f8 fd10 	bl	80014fa <HAL_CAN_IsTxMessagePending>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d165      	bne.n	8008bac <SPDM_SendCmd+0xfc>
	
	header.StdId = M->motor_id_group;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	889b      	ldrh	r3, [r3, #4]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <SPDM_SendCmd+0x108>)
 8008ae8:	601a      	str	r2, [r3, #0]
	header.IDE = CAN_ID_STD;
 8008aea:	4b33      	ldr	r3, [pc, #204]	; (8008bb8 <SPDM_SendCmd+0x108>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	609a      	str	r2, [r3, #8]
	header.RTR = CAN_RTR_DATA;
 8008af0:	4b31      	ldr	r3, [pc, #196]	; (8008bb8 <SPDM_SendCmd+0x108>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	60da      	str	r2, [r3, #12]
	header.DLC = 0x08;
 8008af6:	4b30      	ldr	r3, [pc, #192]	; (8008bb8 <SPDM_SendCmd+0x108>)
 8008af8:	2208      	movs	r2, #8
 8008afa:	611a      	str	r2, [r3, #16]
	
	motor1 *= M->dir[0];
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f9b3 312c 	ldrsh.w	r3, [r3, #300]	; 0x12c
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	897b      	ldrh	r3, [r7, #10]
 8008b06:	fb12 f303 	smulbb	r3, r2, r3
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	817b      	strh	r3, [r7, #10]
	motor2 *= M->dir[1];
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f9b3 312e 	ldrsh.w	r3, [r3, #302]	; 0x12e
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	893b      	ldrh	r3, [r7, #8]
 8008b18:	fb12 f303 	smulbb	r3, r2, r3
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	813b      	strh	r3, [r7, #8]
	motor3 *= M->dir[2];
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f9b3 3130 	ldrsh.w	r3, [r3, #304]	; 0x130
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	fb12 f303 	smulbb	r3, r2, r3
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	80fb      	strh	r3, [r7, #6]
	motor4 *= M->dir[3];
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f9b3 3132 	ldrsh.w	r3, [r3, #306]	; 0x132
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	8b3b      	ldrh	r3, [r7, #24]
 8008b3c:	fb12 f303 	smulbb	r3, r2, r3
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	833b      	strh	r3, [r7, #24]
	
	data[0] = motor1 >> 8;
 8008b44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008b48:	121b      	asrs	r3, r3, #8
 8008b4a:	b21b      	sxth	r3, r3
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b50:	701a      	strb	r2, [r3, #0]
	data[1] = motor1;
 8008b52:	897b      	ldrh	r3, [r7, #10]
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b58:	705a      	strb	r2, [r3, #1]
	data[2] = motor2 >> 8;
 8008b5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008b5e:	121b      	asrs	r3, r3, #8
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	4b15      	ldr	r3, [pc, #84]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b66:	709a      	strb	r2, [r3, #2]
	data[3] = motor2;
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	4b13      	ldr	r3, [pc, #76]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b6e:	70da      	strb	r2, [r3, #3]
	data[4] = motor3 >> 8;
 8008b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b74:	121b      	asrs	r3, r3, #8
 8008b76:	b21b      	sxth	r3, r3
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b7c:	711a      	strb	r2, [r3, #4]
	data[5] = motor3;
 8008b7e:	88fb      	ldrh	r3, [r7, #6]
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b84:	715a      	strb	r2, [r3, #5]
	data[6] = motor4 >> 8;
 8008b86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008b8a:	121b      	asrs	r3, r3, #8
 8008b8c:	b21b      	sxth	r3, r3
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b92:	719a      	strb	r2, [r3, #6]
	data[7] = motor4;
 8008b94:	8b3b      	ldrh	r3, [r7, #24]
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	4b08      	ldr	r3, [pc, #32]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008b9a:	71da      	strb	r2, [r3, #7]
	
	HAL_CAN_AddTxMessage(M->motor_can, &header, data, &mailbox);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <SPDM_SendCmd+0x104>)
 8008ba2:	4a06      	ldr	r2, [pc, #24]	; (8008bbc <SPDM_SendCmd+0x10c>)
 8008ba4:	4904      	ldr	r1, [pc, #16]	; (8008bb8 <SPDM_SendCmd+0x108>)
 8008ba6:	f7f8 fbcd 	bl	8001344 <HAL_CAN_AddTxMessage>
 8008baa:	e000      	b.n	8008bae <SPDM_SendCmd+0xfe>
	if (HAL_CAN_IsTxMessagePending(M->motor_can, mailbox)) return;
 8008bac:	bf00      	nop
}
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	2000408c 	.word	0x2000408c
 8008bb8:	20004090 	.word	0x20004090
 8008bbc:	200040a8 	.word	0x200040a8

08008bc0 <SPDM_SetDir>:

void SPDM_SetDir(SPDM_TypeDef* M, int16_t dir1, int16_t dir2, int16_t dir3, int16_t dir4) {
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	817b      	strh	r3, [r7, #10]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	813b      	strh	r3, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
	M->dir[0] = dir1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	897a      	ldrh	r2, [r7, #10]
 8008bde:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
	M->dir[1] = dir2;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	893a      	ldrh	r2, [r7, #8]
 8008be6:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
	M->dir[2] = dir3;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	88fa      	ldrh	r2, [r7, #6]
 8008bee:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	M->dir[3] = dir4;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	8b3a      	ldrh	r2, [r7, #24]
 8008bf6:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
}
 8008bfa:	bf00      	nop
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8008c0c:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c0e:	4a18      	ldr	r2, [pc, #96]	; (8008c70 <MX_SPI5_Init+0x68>)
 8008c10:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8008c12:	4b16      	ldr	r3, [pc, #88]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008c18:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c38:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c3c:	2230      	movs	r2, #48	; 0x30
 8008c3e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c54:	220a      	movs	r2, #10
 8008c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008c58:	4804      	ldr	r0, [pc, #16]	; (8008c6c <MX_SPI5_Init+0x64>)
 8008c5a:	f7fa f934 	bl	8002ec6 <HAL_SPI_Init>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008c64:	f7ff f84a 	bl	8007cfc <Error_Handler>
  }

}
 8008c68:	bf00      	nop
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	2000448c 	.word	0x2000448c
 8008c70:	40015000 	.word	0x40015000

08008c74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c7c:	f107 0314 	add.w	r3, r7, #20
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	605a      	str	r2, [r3, #4]
 8008c86:	609a      	str	r2, [r3, #8]
 8008c88:	60da      	str	r2, [r3, #12]
 8008c8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a19      	ldr	r2, [pc, #100]	; (8008cf8 <HAL_SPI_MspInit+0x84>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d12c      	bne.n	8008cf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008c96:	2300      	movs	r3, #0
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ca6:	4b15      	ldr	r3, [pc, #84]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cae:	613b      	str	r3, [r7, #16]
 8008cb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	4a10      	ldr	r2, [pc, #64]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008cbc:	f043 0320 	orr.w	r3, r3, #32
 8008cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <HAL_SPI_MspInit+0x88>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8008cce:	f44f 7360 	mov.w	r3, #896	; 0x380
 8008cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008ce0:	2305      	movs	r3, #5
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008ce4:	f107 0314 	add.w	r3, r7, #20
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <HAL_SPI_MspInit+0x8c>)
 8008cec:	f7f9 fa42 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	3728      	adds	r7, #40	; 0x28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40015000 	.word	0x40015000
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	40021400 	.word	0x40021400

08008d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <HAL_MspInit+0x54>)
 8008d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d12:	4a11      	ldr	r2, [pc, #68]	; (8008d58 <HAL_MspInit+0x54>)
 8008d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d18:	6453      	str	r3, [r2, #68]	; 0x44
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <HAL_MspInit+0x54>)
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d22:	607b      	str	r3, [r7, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d26:	2300      	movs	r3, #0
 8008d28:	603b      	str	r3, [r7, #0]
 8008d2a:	4b0b      	ldr	r3, [pc, #44]	; (8008d58 <HAL_MspInit+0x54>)
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2e:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <HAL_MspInit+0x54>)
 8008d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d34:	6413      	str	r3, [r2, #64]	; 0x40
 8008d36:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <HAL_MspInit+0x54>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008d42:	2200      	movs	r2, #0
 8008d44:	210f      	movs	r1, #15
 8008d46:	f06f 0001 	mvn.w	r0, #1
 8008d4a:	f7f8 ff01 	bl	8001b50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d4e:	bf00      	nop
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40023800 	.word	0x40023800

08008d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08c      	sub	sp, #48	; 0x30
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	202d      	movs	r0, #45	; 0x2d
 8008d72:	f7f8 feed 	bl	8001b50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8008d76:	202d      	movs	r0, #45	; 0x2d
 8008d78:	f7f8 ff06 	bl	8001b88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	4b1f      	ldr	r3, [pc, #124]	; (8008e00 <HAL_InitTick+0xa4>)
 8008d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d84:	4a1e      	ldr	r2, [pc, #120]	; (8008e00 <HAL_InitTick+0xa4>)
 8008d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8008d8c:	4b1c      	ldr	r3, [pc, #112]	; (8008e00 <HAL_InitTick+0xa4>)
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008d98:	f107 0210 	add.w	r2, r7, #16
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fa f842 	bl	8002e2c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008da8:	f7fa f818 	bl	8002ddc <HAL_RCC_GetPCLK1Freq>
 8008dac:	4603      	mov	r3, r0
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <HAL_InitTick+0xa8>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	0c9b      	lsrs	r3, r3, #18
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <HAL_InitTick+0xac>)
 8008dc2:	4a12      	ldr	r2, [pc, #72]	; (8008e0c <HAL_InitTick+0xb0>)
 8008dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8008dc6:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <HAL_InitTick+0xac>)
 8008dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008dcc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8008dce:	4a0e      	ldr	r2, [pc, #56]	; (8008e08 <HAL_InitTick+0xac>)
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <HAL_InitTick+0xac>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <HAL_InitTick+0xac>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8008de0:	4809      	ldr	r0, [pc, #36]	; (8008e08 <HAL_InitTick+0xac>)
 8008de2:	f7fa fb23 	bl	800342c <HAL_TIM_Base_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8008dec:	4806      	ldr	r0, [pc, #24]	; (8008e08 <HAL_InitTick+0xac>)
 8008dee:	f7fa fb52 	bl	8003496 <HAL_TIM_Base_Start_IT>
 8008df2:	4603      	mov	r3, r0
 8008df4:	e000      	b.n	8008df8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3730      	adds	r7, #48	; 0x30
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40023800 	.word	0x40023800
 8008e04:	431bde83 	.word	0x431bde83
 8008e08:	200044e4 	.word	0x200044e4
 8008e0c:	40002000 	.word	0x40002000

08008e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008e14:	f7fa f83c 	bl	8002e90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008e18:	bf00      	nop
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e20:	e7fe      	b.n	8008e20 <HardFault_Handler+0x4>

08008e22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e22:	b480      	push	{r7}
 8008e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e26:	e7fe      	b.n	8008e26 <MemManage_Handler+0x4>

08008e28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e2c:	e7fe      	b.n	8008e2c <BusFault_Handler+0x4>

08008e2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e32:	e7fe      	b.n	8008e32 <UsageFault_Handler+0x4>

08008e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e38:	bf00      	nop
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
	...

08008e44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8008e48:	4802      	ldr	r0, [pc, #8]	; (8008e54 <DMA1_Stream3_IRQHandler+0x10>)
 8008e4a:	f7f8 ff59 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20004564 	.word	0x20004564

08008e58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8008e5c:	4802      	ldr	r0, [pc, #8]	; (8008e68 <DMA1_Stream6_IRQHandler+0x10>)
 8008e5e:	f7f8 ff4f 	bl	8001d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200045c4 	.word	0x200045c4

08008e6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008e70:	4802      	ldr	r0, [pc, #8]	; (8008e7c <CAN1_RX0_IRQHandler+0x10>)
 8008e72:	f7f8 fb8c 	bl	800158e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8008e76:	bf00      	nop
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	200040c0 	.word	0x200040c0

08008e80 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008e84:	4802      	ldr	r0, [pc, #8]	; (8008e90 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8008e86:	f7fa fb2a 	bl	80034de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8008e8a:	bf00      	nop
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	200044e4 	.word	0x200044e4

08008e94 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  //HAL_UART_IRQHandler(&huart7);
  /* USER CODE BEGIN UART7_IRQn 1 */
	RXD_RxUpdate(&R);
 8008e98:	4802      	ldr	r0, [pc, #8]	; (8008ea4 <UART7_IRQHandler+0x10>)
 8008e9a:	f7fe ffbf 	bl	8007e1c <RXD_RxUpdate>
  /* USER CODE END UART7_IRQn 1 */
}
 8008e9e:	bf00      	nop
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	2000429c 	.word	0x2000429c

08008ea8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  //HAL_UART_IRQHandler(&huart8);
  /* USER CODE BEGIN UART8_IRQn 1 */
	AGVUI_RxUpdate(&A);
 8008eac:	4802      	ldr	r0, [pc, #8]	; (8008eb8 <UART8_IRQHandler+0x10>)
 8008eae:	f7fc fc37 	bl	8005720 <AGVUI_RxUpdate>

  /* USER CODE END UART8_IRQn 1 */
}
 8008eb2:	bf00      	nop
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	200043ec 	.word	0x200043ec

08008ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e00a      	b.n	8008ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008ece:	f3af 8000 	nop.w
 8008ed2:	4601      	mov	r1, r0
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	60ba      	str	r2, [r7, #8]
 8008eda:	b2ca      	uxtb	r2, r1
 8008edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	617b      	str	r3, [r7, #20]
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	dbf0      	blt.n	8008ece <_read+0x12>
	}

return len;
 8008eec:	687b      	ldr	r3, [r7, #4]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b086      	sub	sp, #24
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e009      	b.n	8008f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	60ba      	str	r2, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	dbf1      	blt.n	8008f08 <_write+0x12>
	}
	return len;
 8008f24:	687b      	ldr	r3, [r7, #4]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <_close>:

int _close(int file)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
	return -1;
 8008f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008f56:	605a      	str	r2, [r3, #4]
	return 0;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <_isatty>:

int _isatty(int file)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8008f6e:	2301      	movs	r3, #1
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
	return 0;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
	...

08008f98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <_sbrk+0x50>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <_sbrk+0x16>
		heap_end = &end;
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <_sbrk+0x50>)
 8008faa:	4a10      	ldr	r2, [pc, #64]	; (8008fec <_sbrk+0x54>)
 8008fac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008fae:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <_sbrk+0x50>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <_sbrk+0x50>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	466a      	mov	r2, sp
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d907      	bls.n	8008fd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008fc2:	f000 f99b 	bl	80092fc <__errno>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	230c      	movs	r3, #12
 8008fca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd0:	e006      	b.n	8008fe0 <_sbrk+0x48>
	}

	heap_end += incr;
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <_sbrk+0x50>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	4a03      	ldr	r2, [pc, #12]	; (8008fe8 <_sbrk+0x50>)
 8008fdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008fde:	68fb      	ldr	r3, [r7, #12]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	200040b0 	.word	0x200040b0
 8008fec:	20004668 	.word	0x20004668

08008ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ff4:	4b08      	ldr	r3, [pc, #32]	; (8009018 <SystemInit+0x28>)
 8008ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffa:	4a07      	ldr	r2, [pc, #28]	; (8009018 <SystemInit+0x28>)
 8008ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <SystemInit+0x28>)
 8009006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800900a:	609a      	str	r2, [r3, #8]
#endif
}
 800900c:	bf00      	nop
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	e000ed00 	.word	0xe000ed00

0800901c <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8009020:	4b11      	ldr	r3, [pc, #68]	; (8009068 <MX_UART7_Init+0x4c>)
 8009022:	4a12      	ldr	r2, [pc, #72]	; (800906c <MX_UART7_Init+0x50>)
 8009024:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8009026:	4b10      	ldr	r3, [pc, #64]	; (8009068 <MX_UART7_Init+0x4c>)
 8009028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800902c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800902e:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <MX_UART7_Init+0x4c>)
 8009030:	2200      	movs	r2, #0
 8009032:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <MX_UART7_Init+0x4c>)
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <MX_UART7_Init+0x4c>)
 800903c:	2200      	movs	r2, #0
 800903e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8009040:	4b09      	ldr	r3, [pc, #36]	; (8009068 <MX_UART7_Init+0x4c>)
 8009042:	220c      	movs	r2, #12
 8009044:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <MX_UART7_Init+0x4c>)
 8009048:	2200      	movs	r2, #0
 800904a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800904c:	4b06      	ldr	r3, [pc, #24]	; (8009068 <MX_UART7_Init+0x4c>)
 800904e:	2200      	movs	r2, #0
 8009050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <MX_UART7_Init+0x4c>)
 8009054:	f7fa fc28 	bl	80038a8 <HAL_UART_Init>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800905e:	f7fe fe4d 	bl	8007cfc <Error_Handler>
  }

}
 8009062:	bf00      	nop
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20004524 	.word	0x20004524
 800906c:	40007800 	.word	0x40007800

08009070 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8009074:	4b11      	ldr	r3, [pc, #68]	; (80090bc <MX_UART8_Init+0x4c>)
 8009076:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <MX_UART8_Init+0x50>)
 8009078:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800907a:	4b10      	ldr	r3, [pc, #64]	; (80090bc <MX_UART8_Init+0x4c>)
 800907c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009080:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8009082:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <MX_UART8_Init+0x4c>)
 8009084:	2200      	movs	r2, #0
 8009086:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8009088:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <MX_UART8_Init+0x4c>)
 800908a:	2200      	movs	r2, #0
 800908c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800908e:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <MX_UART8_Init+0x4c>)
 8009090:	2200      	movs	r2, #0
 8009092:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <MX_UART8_Init+0x4c>)
 8009096:	220c      	movs	r2, #12
 8009098:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800909a:	4b08      	ldr	r3, [pc, #32]	; (80090bc <MX_UART8_Init+0x4c>)
 800909c:	2200      	movs	r2, #0
 800909e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <MX_UART8_Init+0x4c>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80090a6:	4805      	ldr	r0, [pc, #20]	; (80090bc <MX_UART8_Init+0x4c>)
 80090a8:	f7fa fbfe 	bl	80038a8 <HAL_UART_Init>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80090b2:	f7fe fe23 	bl	8007cfc <Error_Handler>
  }

}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20004624 	.word	0x20004624
 80090c0:	40007c00 	.word	0x40007c00

080090c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08c      	sub	sp, #48	; 0x30
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090cc:	f107 031c 	add.w	r3, r7, #28
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	609a      	str	r2, [r3, #8]
 80090d8:	60da      	str	r2, [r3, #12]
 80090da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a69      	ldr	r2, [pc, #420]	; (8009288 <HAL_UART_MspInit+0x1c4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d164      	bne.n	80091b0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80090e6:	2300      	movs	r3, #0
 80090e8:	61bb      	str	r3, [r7, #24]
 80090ea:	4b68      	ldr	r3, [pc, #416]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	4a67      	ldr	r2, [pc, #412]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80090f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090f4:	6413      	str	r3, [r2, #64]	; 0x40
 80090f6:	4b65      	ldr	r3, [pc, #404]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090fe:	61bb      	str	r3, [r7, #24]
 8009100:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	4b61      	ldr	r3, [pc, #388]	; (800928c <HAL_UART_MspInit+0x1c8>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	4a60      	ldr	r2, [pc, #384]	; (800928c <HAL_UART_MspInit+0x1c8>)
 800910c:	f043 0310 	orr.w	r3, r3, #16
 8009110:	6313      	str	r3, [r2, #48]	; 0x30
 8009112:	4b5e      	ldr	r3, [pc, #376]	; (800928c <HAL_UART_MspInit+0x1c8>)
 8009114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009116:	f003 0310 	and.w	r3, r3, #16
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration    
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800911e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009124:	2302      	movs	r3, #2
 8009126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009128:	2301      	movs	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800912c:	2303      	movs	r3, #3
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8009130:	2308      	movs	r3, #8
 8009132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009134:	f107 031c 	add.w	r3, r7, #28
 8009138:	4619      	mov	r1, r3
 800913a:	4855      	ldr	r0, [pc, #340]	; (8009290 <HAL_UART_MspInit+0x1cc>)
 800913c:	f7f9 f81a 	bl	8002174 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8009140:	4b54      	ldr	r3, [pc, #336]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009142:	4a55      	ldr	r2, [pc, #340]	; (8009298 <HAL_UART_MspInit+0x1d4>)
 8009144:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8009146:	4b53      	ldr	r3, [pc, #332]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009148:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800914c:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800914e:	4b51      	ldr	r3, [pc, #324]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009150:	2200      	movs	r2, #0
 8009152:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009154:	4b4f      	ldr	r3, [pc, #316]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009156:	2200      	movs	r2, #0
 8009158:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800915a:	4b4e      	ldr	r3, [pc, #312]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 800915c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009160:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009162:	4b4c      	ldr	r3, [pc, #304]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009164:	2200      	movs	r2, #0
 8009166:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009168:	4b4a      	ldr	r3, [pc, #296]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 800916a:	2200      	movs	r2, #0
 800916c:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800916e:	4b49      	ldr	r3, [pc, #292]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009170:	2200      	movs	r2, #0
 8009172:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009174:	4b47      	ldr	r3, [pc, #284]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009176:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800917a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800917c:	4b45      	ldr	r3, [pc, #276]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 800917e:	2200      	movs	r2, #0
 8009180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8009182:	4844      	ldr	r0, [pc, #272]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009184:	f7f8 fd0e 	bl	8001ba4 <HAL_DMA_Init>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800918e:	f7fe fdb5 	bl	8007cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a3f      	ldr	r2, [pc, #252]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 8009196:	635a      	str	r2, [r3, #52]	; 0x34
 8009198:	4a3e      	ldr	r2, [pc, #248]	; (8009294 <HAL_UART_MspInit+0x1d0>)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800919e:	2200      	movs	r2, #0
 80091a0:	2105      	movs	r1, #5
 80091a2:	2052      	movs	r0, #82	; 0x52
 80091a4:	f7f8 fcd4 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80091a8:	2052      	movs	r0, #82	; 0x52
 80091aa:	f7f8 fced 	bl	8001b88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 80091ae:	e067      	b.n	8009280 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==UART8)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a39      	ldr	r2, [pc, #228]	; (800929c <HAL_UART_MspInit+0x1d8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d162      	bne.n	8009280 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_UART8_CLK_ENABLE();
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	4b33      	ldr	r3, [pc, #204]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c2:	4a32      	ldr	r2, [pc, #200]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c8:	6413      	str	r3, [r2, #64]	; 0x40
 80091ca:	4b30      	ldr	r3, [pc, #192]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091d2:	613b      	str	r3, [r7, #16]
 80091d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	4b2c      	ldr	r3, [pc, #176]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	4a2b      	ldr	r2, [pc, #172]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091e0:	f043 0310 	orr.w	r3, r3, #16
 80091e4:	6313      	str	r3, [r2, #48]	; 0x30
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <HAL_UART_MspInit+0x1c8>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80091f2:	2303      	movs	r3, #3
 80091f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f6:	2302      	movs	r3, #2
 80091f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091fa:	2301      	movs	r3, #1
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091fe:	2303      	movs	r3, #3
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8009202:	2308      	movs	r3, #8
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009206:	f107 031c 	add.w	r3, r7, #28
 800920a:	4619      	mov	r1, r3
 800920c:	4820      	ldr	r0, [pc, #128]	; (8009290 <HAL_UART_MspInit+0x1cc>)
 800920e:	f7f8 ffb1 	bl	8002174 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8009212:	4b23      	ldr	r3, [pc, #140]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009214:	4a23      	ldr	r2, [pc, #140]	; (80092a4 <HAL_UART_MspInit+0x1e0>)
 8009216:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8009218:	4b21      	ldr	r3, [pc, #132]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 800921a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800921e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009220:	4b1f      	ldr	r3, [pc, #124]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009228:	2200      	movs	r2, #0
 800922a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800922c:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 800922e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009232:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009234:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009236:	2200      	movs	r2, #0
 8009238:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800923a:	4b19      	ldr	r3, [pc, #100]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 800923c:	2200      	movs	r2, #0
 800923e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8009240:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009242:	2200      	movs	r2, #0
 8009244:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009248:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800924c:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800924e:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009250:	2200      	movs	r2, #0
 8009252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8009254:	4812      	ldr	r0, [pc, #72]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009256:	f7f8 fca5 	bl	8001ba4 <HAL_DMA_Init>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8009260:	f7fe fd4c 	bl	8007cfc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a0e      	ldr	r2, [pc, #56]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 8009268:	635a      	str	r2, [r3, #52]	; 0x34
 800926a:	4a0d      	ldr	r2, [pc, #52]	; (80092a0 <HAL_UART_MspInit+0x1dc>)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8009270:	2200      	movs	r2, #0
 8009272:	2105      	movs	r1, #5
 8009274:	2053      	movs	r0, #83	; 0x53
 8009276:	f7f8 fc6b 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800927a:	2053      	movs	r0, #83	; 0x53
 800927c:	f7f8 fc84 	bl	8001b88 <HAL_NVIC_EnableIRQ>
}
 8009280:	bf00      	nop
 8009282:	3730      	adds	r7, #48	; 0x30
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40007800 	.word	0x40007800
 800928c:	40023800 	.word	0x40023800
 8009290:	40021000 	.word	0x40021000
 8009294:	20004564 	.word	0x20004564
 8009298:	40026058 	.word	0x40026058
 800929c:	40007c00 	.word	0x40007c00
 80092a0:	200045c4 	.word	0x200045c4
 80092a4:	400260a0 	.word	0x400260a0

080092a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80092a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80092e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80092ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80092ae:	e003      	b.n	80092b8 <LoopCopyDataInit>

080092b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80092b0:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80092b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80092b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80092b6:	3104      	adds	r1, #4

080092b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80092b8:	480b      	ldr	r0, [pc, #44]	; (80092e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80092bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80092be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80092c0:	d3f6      	bcc.n	80092b0 <CopyDataInit>
  ldr  r2, =_sbss
 80092c2:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80092c4:	e002      	b.n	80092cc <LoopFillZerobss>

080092c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80092c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80092c8:	f842 3b04 	str.w	r3, [r2], #4

080092cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80092ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80092d0:	d3f9      	bcc.n	80092c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80092d2:	f7ff fe8d 	bl	8008ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092d6:	f000 f817 	bl	8009308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80092da:	f7fe fc63 	bl	8007ba4 <main>
  bx  lr    
 80092de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80092e0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80092e4:	08009f44 	.word	0x08009f44
  ldr  r0, =_sdata
 80092e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80092ec:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80092f0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80092f4:	20004668 	.word	0x20004668

080092f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80092f8:	e7fe      	b.n	80092f8 <ADC_IRQHandler>
	...

080092fc <__errno>:
 80092fc:	4b01      	ldr	r3, [pc, #4]	; (8009304 <__errno+0x8>)
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000014 	.word	0x20000014

08009308 <__libc_init_array>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4e0d      	ldr	r6, [pc, #52]	; (8009340 <__libc_init_array+0x38>)
 800930c:	4c0d      	ldr	r4, [pc, #52]	; (8009344 <__libc_init_array+0x3c>)
 800930e:	1ba4      	subs	r4, r4, r6
 8009310:	10a4      	asrs	r4, r4, #2
 8009312:	2500      	movs	r5, #0
 8009314:	42a5      	cmp	r5, r4
 8009316:	d109      	bne.n	800932c <__libc_init_array+0x24>
 8009318:	4e0b      	ldr	r6, [pc, #44]	; (8009348 <__libc_init_array+0x40>)
 800931a:	4c0c      	ldr	r4, [pc, #48]	; (800934c <__libc_init_array+0x44>)
 800931c:	f000 fc94 	bl	8009c48 <_init>
 8009320:	1ba4      	subs	r4, r4, r6
 8009322:	10a4      	asrs	r4, r4, #2
 8009324:	2500      	movs	r5, #0
 8009326:	42a5      	cmp	r5, r4
 8009328:	d105      	bne.n	8009336 <__libc_init_array+0x2e>
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009330:	4798      	blx	r3
 8009332:	3501      	adds	r5, #1
 8009334:	e7ee      	b.n	8009314 <__libc_init_array+0xc>
 8009336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800933a:	4798      	blx	r3
 800933c:	3501      	adds	r5, #1
 800933e:	e7f2      	b.n	8009326 <__libc_init_array+0x1e>
 8009340:	08009f3c 	.word	0x08009f3c
 8009344:	08009f3c 	.word	0x08009f3c
 8009348:	08009f3c 	.word	0x08009f3c
 800934c:	08009f40 	.word	0x08009f40

08009350 <memcpy>:
 8009350:	b510      	push	{r4, lr}
 8009352:	1e43      	subs	r3, r0, #1
 8009354:	440a      	add	r2, r1
 8009356:	4291      	cmp	r1, r2
 8009358:	d100      	bne.n	800935c <memcpy+0xc>
 800935a:	bd10      	pop	{r4, pc}
 800935c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009364:	e7f7      	b.n	8009356 <memcpy+0x6>

08009366 <memset>:
 8009366:	4402      	add	r2, r0
 8009368:	4603      	mov	r3, r0
 800936a:	4293      	cmp	r3, r2
 800936c:	d100      	bne.n	8009370 <memset+0xa>
 800936e:	4770      	bx	lr
 8009370:	f803 1b01 	strb.w	r1, [r3], #1
 8009374:	e7f9      	b.n	800936a <memset+0x4>
	...

08009378 <_free_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4605      	mov	r5, r0
 800937c:	2900      	cmp	r1, #0
 800937e:	d045      	beq.n	800940c <_free_r+0x94>
 8009380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009384:	1f0c      	subs	r4, r1, #4
 8009386:	2b00      	cmp	r3, #0
 8009388:	bfb8      	it	lt
 800938a:	18e4      	addlt	r4, r4, r3
 800938c:	f000 fbae 	bl	8009aec <__malloc_lock>
 8009390:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <_free_r+0x98>)
 8009392:	6813      	ldr	r3, [r2, #0]
 8009394:	4610      	mov	r0, r2
 8009396:	b933      	cbnz	r3, 80093a6 <_free_r+0x2e>
 8009398:	6063      	str	r3, [r4, #4]
 800939a:	6014      	str	r4, [r2, #0]
 800939c:	4628      	mov	r0, r5
 800939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a2:	f000 bba4 	b.w	8009aee <__malloc_unlock>
 80093a6:	42a3      	cmp	r3, r4
 80093a8:	d90c      	bls.n	80093c4 <_free_r+0x4c>
 80093aa:	6821      	ldr	r1, [r4, #0]
 80093ac:	1862      	adds	r2, r4, r1
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bf04      	itt	eq
 80093b2:	681a      	ldreq	r2, [r3, #0]
 80093b4:	685b      	ldreq	r3, [r3, #4]
 80093b6:	6063      	str	r3, [r4, #4]
 80093b8:	bf04      	itt	eq
 80093ba:	1852      	addeq	r2, r2, r1
 80093bc:	6022      	streq	r2, [r4, #0]
 80093be:	6004      	str	r4, [r0, #0]
 80093c0:	e7ec      	b.n	800939c <_free_r+0x24>
 80093c2:	4613      	mov	r3, r2
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	b10a      	cbz	r2, 80093cc <_free_r+0x54>
 80093c8:	42a2      	cmp	r2, r4
 80093ca:	d9fa      	bls.n	80093c2 <_free_r+0x4a>
 80093cc:	6819      	ldr	r1, [r3, #0]
 80093ce:	1858      	adds	r0, r3, r1
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d10b      	bne.n	80093ec <_free_r+0x74>
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	4401      	add	r1, r0
 80093d8:	1858      	adds	r0, r3, r1
 80093da:	4282      	cmp	r2, r0
 80093dc:	6019      	str	r1, [r3, #0]
 80093de:	d1dd      	bne.n	800939c <_free_r+0x24>
 80093e0:	6810      	ldr	r0, [r2, #0]
 80093e2:	6852      	ldr	r2, [r2, #4]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	4401      	add	r1, r0
 80093e8:	6019      	str	r1, [r3, #0]
 80093ea:	e7d7      	b.n	800939c <_free_r+0x24>
 80093ec:	d902      	bls.n	80093f4 <_free_r+0x7c>
 80093ee:	230c      	movs	r3, #12
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	e7d3      	b.n	800939c <_free_r+0x24>
 80093f4:	6820      	ldr	r0, [r4, #0]
 80093f6:	1821      	adds	r1, r4, r0
 80093f8:	428a      	cmp	r2, r1
 80093fa:	bf04      	itt	eq
 80093fc:	6811      	ldreq	r1, [r2, #0]
 80093fe:	6852      	ldreq	r2, [r2, #4]
 8009400:	6062      	str	r2, [r4, #4]
 8009402:	bf04      	itt	eq
 8009404:	1809      	addeq	r1, r1, r0
 8009406:	6021      	streq	r1, [r4, #0]
 8009408:	605c      	str	r4, [r3, #4]
 800940a:	e7c7      	b.n	800939c <_free_r+0x24>
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	bf00      	nop
 8009410:	200040b4 	.word	0x200040b4

08009414 <_malloc_r>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	1ccd      	adds	r5, r1, #3
 8009418:	f025 0503 	bic.w	r5, r5, #3
 800941c:	3508      	adds	r5, #8
 800941e:	2d0c      	cmp	r5, #12
 8009420:	bf38      	it	cc
 8009422:	250c      	movcc	r5, #12
 8009424:	2d00      	cmp	r5, #0
 8009426:	4606      	mov	r6, r0
 8009428:	db01      	blt.n	800942e <_malloc_r+0x1a>
 800942a:	42a9      	cmp	r1, r5
 800942c:	d903      	bls.n	8009436 <_malloc_r+0x22>
 800942e:	230c      	movs	r3, #12
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	2000      	movs	r0, #0
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	f000 fb59 	bl	8009aec <__malloc_lock>
 800943a:	4a21      	ldr	r2, [pc, #132]	; (80094c0 <_malloc_r+0xac>)
 800943c:	6814      	ldr	r4, [r2, #0]
 800943e:	4621      	mov	r1, r4
 8009440:	b991      	cbnz	r1, 8009468 <_malloc_r+0x54>
 8009442:	4c20      	ldr	r4, [pc, #128]	; (80094c4 <_malloc_r+0xb0>)
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	b91b      	cbnz	r3, 8009450 <_malloc_r+0x3c>
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f8a1 	bl	8009590 <_sbrk_r>
 800944e:	6020      	str	r0, [r4, #0]
 8009450:	4629      	mov	r1, r5
 8009452:	4630      	mov	r0, r6
 8009454:	f000 f89c 	bl	8009590 <_sbrk_r>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d124      	bne.n	80094a6 <_malloc_r+0x92>
 800945c:	230c      	movs	r3, #12
 800945e:	6033      	str	r3, [r6, #0]
 8009460:	4630      	mov	r0, r6
 8009462:	f000 fb44 	bl	8009aee <__malloc_unlock>
 8009466:	e7e4      	b.n	8009432 <_malloc_r+0x1e>
 8009468:	680b      	ldr	r3, [r1, #0]
 800946a:	1b5b      	subs	r3, r3, r5
 800946c:	d418      	bmi.n	80094a0 <_malloc_r+0x8c>
 800946e:	2b0b      	cmp	r3, #11
 8009470:	d90f      	bls.n	8009492 <_malloc_r+0x7e>
 8009472:	600b      	str	r3, [r1, #0]
 8009474:	50cd      	str	r5, [r1, r3]
 8009476:	18cc      	adds	r4, r1, r3
 8009478:	4630      	mov	r0, r6
 800947a:	f000 fb38 	bl	8009aee <__malloc_unlock>
 800947e:	f104 000b 	add.w	r0, r4, #11
 8009482:	1d23      	adds	r3, r4, #4
 8009484:	f020 0007 	bic.w	r0, r0, #7
 8009488:	1ac3      	subs	r3, r0, r3
 800948a:	d0d3      	beq.n	8009434 <_malloc_r+0x20>
 800948c:	425a      	negs	r2, r3
 800948e:	50e2      	str	r2, [r4, r3]
 8009490:	e7d0      	b.n	8009434 <_malloc_r+0x20>
 8009492:	428c      	cmp	r4, r1
 8009494:	684b      	ldr	r3, [r1, #4]
 8009496:	bf16      	itet	ne
 8009498:	6063      	strne	r3, [r4, #4]
 800949a:	6013      	streq	r3, [r2, #0]
 800949c:	460c      	movne	r4, r1
 800949e:	e7eb      	b.n	8009478 <_malloc_r+0x64>
 80094a0:	460c      	mov	r4, r1
 80094a2:	6849      	ldr	r1, [r1, #4]
 80094a4:	e7cc      	b.n	8009440 <_malloc_r+0x2c>
 80094a6:	1cc4      	adds	r4, r0, #3
 80094a8:	f024 0403 	bic.w	r4, r4, #3
 80094ac:	42a0      	cmp	r0, r4
 80094ae:	d005      	beq.n	80094bc <_malloc_r+0xa8>
 80094b0:	1a21      	subs	r1, r4, r0
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 f86c 	bl	8009590 <_sbrk_r>
 80094b8:	3001      	adds	r0, #1
 80094ba:	d0cf      	beq.n	800945c <_malloc_r+0x48>
 80094bc:	6025      	str	r5, [r4, #0]
 80094be:	e7db      	b.n	8009478 <_malloc_r+0x64>
 80094c0:	200040b4 	.word	0x200040b4
 80094c4:	200040b8 	.word	0x200040b8

080094c8 <_puts_r>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	460e      	mov	r6, r1
 80094cc:	4605      	mov	r5, r0
 80094ce:	b118      	cbz	r0, 80094d8 <_puts_r+0x10>
 80094d0:	6983      	ldr	r3, [r0, #24]
 80094d2:	b90b      	cbnz	r3, 80094d8 <_puts_r+0x10>
 80094d4:	f000 fa1c 	bl	8009910 <__sinit>
 80094d8:	69ab      	ldr	r3, [r5, #24]
 80094da:	68ac      	ldr	r4, [r5, #8]
 80094dc:	b913      	cbnz	r3, 80094e4 <_puts_r+0x1c>
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 fa16 	bl	8009910 <__sinit>
 80094e4:	4b23      	ldr	r3, [pc, #140]	; (8009574 <_puts_r+0xac>)
 80094e6:	429c      	cmp	r4, r3
 80094e8:	d117      	bne.n	800951a <_puts_r+0x52>
 80094ea:	686c      	ldr	r4, [r5, #4]
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	071b      	lsls	r3, r3, #28
 80094f0:	d51d      	bpl.n	800952e <_puts_r+0x66>
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	b1db      	cbz	r3, 800952e <_puts_r+0x66>
 80094f6:	3e01      	subs	r6, #1
 80094f8:	68a3      	ldr	r3, [r4, #8]
 80094fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094fe:	3b01      	subs	r3, #1
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	b9e9      	cbnz	r1, 8009540 <_puts_r+0x78>
 8009504:	2b00      	cmp	r3, #0
 8009506:	da2e      	bge.n	8009566 <_puts_r+0x9e>
 8009508:	4622      	mov	r2, r4
 800950a:	210a      	movs	r1, #10
 800950c:	4628      	mov	r0, r5
 800950e:	f000 f84f 	bl	80095b0 <__swbuf_r>
 8009512:	3001      	adds	r0, #1
 8009514:	d011      	beq.n	800953a <_puts_r+0x72>
 8009516:	200a      	movs	r0, #10
 8009518:	e011      	b.n	800953e <_puts_r+0x76>
 800951a:	4b17      	ldr	r3, [pc, #92]	; (8009578 <_puts_r+0xb0>)
 800951c:	429c      	cmp	r4, r3
 800951e:	d101      	bne.n	8009524 <_puts_r+0x5c>
 8009520:	68ac      	ldr	r4, [r5, #8]
 8009522:	e7e3      	b.n	80094ec <_puts_r+0x24>
 8009524:	4b15      	ldr	r3, [pc, #84]	; (800957c <_puts_r+0xb4>)
 8009526:	429c      	cmp	r4, r3
 8009528:	bf08      	it	eq
 800952a:	68ec      	ldreq	r4, [r5, #12]
 800952c:	e7de      	b.n	80094ec <_puts_r+0x24>
 800952e:	4621      	mov	r1, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f88f 	bl	8009654 <__swsetup_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	d0dd      	beq.n	80094f6 <_puts_r+0x2e>
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	2b00      	cmp	r3, #0
 8009542:	da04      	bge.n	800954e <_puts_r+0x86>
 8009544:	69a2      	ldr	r2, [r4, #24]
 8009546:	429a      	cmp	r2, r3
 8009548:	dc06      	bgt.n	8009558 <_puts_r+0x90>
 800954a:	290a      	cmp	r1, #10
 800954c:	d004      	beq.n	8009558 <_puts_r+0x90>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	6022      	str	r2, [r4, #0]
 8009554:	7019      	strb	r1, [r3, #0]
 8009556:	e7cf      	b.n	80094f8 <_puts_r+0x30>
 8009558:	4622      	mov	r2, r4
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f828 	bl	80095b0 <__swbuf_r>
 8009560:	3001      	adds	r0, #1
 8009562:	d1c9      	bne.n	80094f8 <_puts_r+0x30>
 8009564:	e7e9      	b.n	800953a <_puts_r+0x72>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	200a      	movs	r0, #10
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	7018      	strb	r0, [r3, #0]
 8009570:	e7e5      	b.n	800953e <_puts_r+0x76>
 8009572:	bf00      	nop
 8009574:	08009ef4 	.word	0x08009ef4
 8009578:	08009f14 	.word	0x08009f14
 800957c:	08009ed4 	.word	0x08009ed4

08009580 <puts>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <puts+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f7ff bf9f 	b.w	80094c8 <_puts_r>
 800958a:	bf00      	nop
 800958c:	20000014 	.word	0x20000014

08009590 <_sbrk_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4c06      	ldr	r4, [pc, #24]	; (80095ac <_sbrk_r+0x1c>)
 8009594:	2300      	movs	r3, #0
 8009596:	4605      	mov	r5, r0
 8009598:	4608      	mov	r0, r1
 800959a:	6023      	str	r3, [r4, #0]
 800959c:	f7ff fcfc 	bl	8008f98 <_sbrk>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_sbrk_r+0x1a>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_sbrk_r+0x1a>
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20004664 	.word	0x20004664

080095b0 <__swbuf_r>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	460e      	mov	r6, r1
 80095b4:	4614      	mov	r4, r2
 80095b6:	4605      	mov	r5, r0
 80095b8:	b118      	cbz	r0, 80095c2 <__swbuf_r+0x12>
 80095ba:	6983      	ldr	r3, [r0, #24]
 80095bc:	b90b      	cbnz	r3, 80095c2 <__swbuf_r+0x12>
 80095be:	f000 f9a7 	bl	8009910 <__sinit>
 80095c2:	4b21      	ldr	r3, [pc, #132]	; (8009648 <__swbuf_r+0x98>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d12a      	bne.n	800961e <__swbuf_r+0x6e>
 80095c8:	686c      	ldr	r4, [r5, #4]
 80095ca:	69a3      	ldr	r3, [r4, #24]
 80095cc:	60a3      	str	r3, [r4, #8]
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	071a      	lsls	r2, r3, #28
 80095d2:	d52e      	bpl.n	8009632 <__swbuf_r+0x82>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	b363      	cbz	r3, 8009632 <__swbuf_r+0x82>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	6820      	ldr	r0, [r4, #0]
 80095dc:	1ac0      	subs	r0, r0, r3
 80095de:	6963      	ldr	r3, [r4, #20]
 80095e0:	b2f6      	uxtb	r6, r6
 80095e2:	4283      	cmp	r3, r0
 80095e4:	4637      	mov	r7, r6
 80095e6:	dc04      	bgt.n	80095f2 <__swbuf_r+0x42>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f926 	bl	800983c <_fflush_r>
 80095f0:	bb28      	cbnz	r0, 800963e <__swbuf_r+0x8e>
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	6022      	str	r2, [r4, #0]
 80095fe:	701e      	strb	r6, [r3, #0]
 8009600:	6963      	ldr	r3, [r4, #20]
 8009602:	3001      	adds	r0, #1
 8009604:	4283      	cmp	r3, r0
 8009606:	d004      	beq.n	8009612 <__swbuf_r+0x62>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	07db      	lsls	r3, r3, #31
 800960c:	d519      	bpl.n	8009642 <__swbuf_r+0x92>
 800960e:	2e0a      	cmp	r6, #10
 8009610:	d117      	bne.n	8009642 <__swbuf_r+0x92>
 8009612:	4621      	mov	r1, r4
 8009614:	4628      	mov	r0, r5
 8009616:	f000 f911 	bl	800983c <_fflush_r>
 800961a:	b190      	cbz	r0, 8009642 <__swbuf_r+0x92>
 800961c:	e00f      	b.n	800963e <__swbuf_r+0x8e>
 800961e:	4b0b      	ldr	r3, [pc, #44]	; (800964c <__swbuf_r+0x9c>)
 8009620:	429c      	cmp	r4, r3
 8009622:	d101      	bne.n	8009628 <__swbuf_r+0x78>
 8009624:	68ac      	ldr	r4, [r5, #8]
 8009626:	e7d0      	b.n	80095ca <__swbuf_r+0x1a>
 8009628:	4b09      	ldr	r3, [pc, #36]	; (8009650 <__swbuf_r+0xa0>)
 800962a:	429c      	cmp	r4, r3
 800962c:	bf08      	it	eq
 800962e:	68ec      	ldreq	r4, [r5, #12]
 8009630:	e7cb      	b.n	80095ca <__swbuf_r+0x1a>
 8009632:	4621      	mov	r1, r4
 8009634:	4628      	mov	r0, r5
 8009636:	f000 f80d 	bl	8009654 <__swsetup_r>
 800963a:	2800      	cmp	r0, #0
 800963c:	d0cc      	beq.n	80095d8 <__swbuf_r+0x28>
 800963e:	f04f 37ff 	mov.w	r7, #4294967295
 8009642:	4638      	mov	r0, r7
 8009644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009646:	bf00      	nop
 8009648:	08009ef4 	.word	0x08009ef4
 800964c:	08009f14 	.word	0x08009f14
 8009650:	08009ed4 	.word	0x08009ed4

08009654 <__swsetup_r>:
 8009654:	4b32      	ldr	r3, [pc, #200]	; (8009720 <__swsetup_r+0xcc>)
 8009656:	b570      	push	{r4, r5, r6, lr}
 8009658:	681d      	ldr	r5, [r3, #0]
 800965a:	4606      	mov	r6, r0
 800965c:	460c      	mov	r4, r1
 800965e:	b125      	cbz	r5, 800966a <__swsetup_r+0x16>
 8009660:	69ab      	ldr	r3, [r5, #24]
 8009662:	b913      	cbnz	r3, 800966a <__swsetup_r+0x16>
 8009664:	4628      	mov	r0, r5
 8009666:	f000 f953 	bl	8009910 <__sinit>
 800966a:	4b2e      	ldr	r3, [pc, #184]	; (8009724 <__swsetup_r+0xd0>)
 800966c:	429c      	cmp	r4, r3
 800966e:	d10f      	bne.n	8009690 <__swsetup_r+0x3c>
 8009670:	686c      	ldr	r4, [r5, #4]
 8009672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009676:	b29a      	uxth	r2, r3
 8009678:	0715      	lsls	r5, r2, #28
 800967a:	d42c      	bmi.n	80096d6 <__swsetup_r+0x82>
 800967c:	06d0      	lsls	r0, r2, #27
 800967e:	d411      	bmi.n	80096a4 <__swsetup_r+0x50>
 8009680:	2209      	movs	r2, #9
 8009682:	6032      	str	r2, [r6, #0]
 8009684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	f04f 30ff 	mov.w	r0, #4294967295
 800968e:	e03e      	b.n	800970e <__swsetup_r+0xba>
 8009690:	4b25      	ldr	r3, [pc, #148]	; (8009728 <__swsetup_r+0xd4>)
 8009692:	429c      	cmp	r4, r3
 8009694:	d101      	bne.n	800969a <__swsetup_r+0x46>
 8009696:	68ac      	ldr	r4, [r5, #8]
 8009698:	e7eb      	b.n	8009672 <__swsetup_r+0x1e>
 800969a:	4b24      	ldr	r3, [pc, #144]	; (800972c <__swsetup_r+0xd8>)
 800969c:	429c      	cmp	r4, r3
 800969e:	bf08      	it	eq
 80096a0:	68ec      	ldreq	r4, [r5, #12]
 80096a2:	e7e6      	b.n	8009672 <__swsetup_r+0x1e>
 80096a4:	0751      	lsls	r1, r2, #29
 80096a6:	d512      	bpl.n	80096ce <__swsetup_r+0x7a>
 80096a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096aa:	b141      	cbz	r1, 80096be <__swsetup_r+0x6a>
 80096ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d002      	beq.n	80096ba <__swsetup_r+0x66>
 80096b4:	4630      	mov	r0, r6
 80096b6:	f7ff fe5f 	bl	8009378 <_free_r>
 80096ba:	2300      	movs	r3, #0
 80096bc:	6363      	str	r3, [r4, #52]	; 0x34
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6063      	str	r3, [r4, #4]
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	f043 0308 	orr.w	r3, r3, #8
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	b94b      	cbnz	r3, 80096ee <__swsetup_r+0x9a>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e4:	d003      	beq.n	80096ee <__swsetup_r+0x9a>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4630      	mov	r0, r6
 80096ea:	f000 f9bf 	bl	8009a6c <__smakebuf_r>
 80096ee:	89a2      	ldrh	r2, [r4, #12]
 80096f0:	f012 0301 	ands.w	r3, r2, #1
 80096f4:	d00c      	beq.n	8009710 <__swsetup_r+0xbc>
 80096f6:	2300      	movs	r3, #0
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	6963      	ldr	r3, [r4, #20]
 80096fc:	425b      	negs	r3, r3
 80096fe:	61a3      	str	r3, [r4, #24]
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b953      	cbnz	r3, 800971a <__swsetup_r+0xc6>
 8009704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009708:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800970c:	d1ba      	bne.n	8009684 <__swsetup_r+0x30>
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	0792      	lsls	r2, r2, #30
 8009712:	bf58      	it	pl
 8009714:	6963      	ldrpl	r3, [r4, #20]
 8009716:	60a3      	str	r3, [r4, #8]
 8009718:	e7f2      	b.n	8009700 <__swsetup_r+0xac>
 800971a:	2000      	movs	r0, #0
 800971c:	e7f7      	b.n	800970e <__swsetup_r+0xba>
 800971e:	bf00      	nop
 8009720:	20000014 	.word	0x20000014
 8009724:	08009ef4 	.word	0x08009ef4
 8009728:	08009f14 	.word	0x08009f14
 800972c:	08009ed4 	.word	0x08009ed4

08009730 <__sflush_r>:
 8009730:	898a      	ldrh	r2, [r1, #12]
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	4605      	mov	r5, r0
 8009738:	0710      	lsls	r0, r2, #28
 800973a:	460c      	mov	r4, r1
 800973c:	d458      	bmi.n	80097f0 <__sflush_r+0xc0>
 800973e:	684b      	ldr	r3, [r1, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	dc05      	bgt.n	8009750 <__sflush_r+0x20>
 8009744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	dc02      	bgt.n	8009750 <__sflush_r+0x20>
 800974a:	2000      	movs	r0, #0
 800974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009752:	2e00      	cmp	r6, #0
 8009754:	d0f9      	beq.n	800974a <__sflush_r+0x1a>
 8009756:	2300      	movs	r3, #0
 8009758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800975c:	682f      	ldr	r7, [r5, #0]
 800975e:	6a21      	ldr	r1, [r4, #32]
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	d032      	beq.n	80097ca <__sflush_r+0x9a>
 8009764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	075a      	lsls	r2, r3, #29
 800976a:	d505      	bpl.n	8009778 <__sflush_r+0x48>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	1ac0      	subs	r0, r0, r3
 8009770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009772:	b10b      	cbz	r3, 8009778 <__sflush_r+0x48>
 8009774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009776:	1ac0      	subs	r0, r0, r3
 8009778:	2300      	movs	r3, #0
 800977a:	4602      	mov	r2, r0
 800977c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800977e:	6a21      	ldr	r1, [r4, #32]
 8009780:	4628      	mov	r0, r5
 8009782:	47b0      	blx	r6
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	d106      	bne.n	8009798 <__sflush_r+0x68>
 800978a:	6829      	ldr	r1, [r5, #0]
 800978c:	291d      	cmp	r1, #29
 800978e:	d848      	bhi.n	8009822 <__sflush_r+0xf2>
 8009790:	4a29      	ldr	r2, [pc, #164]	; (8009838 <__sflush_r+0x108>)
 8009792:	40ca      	lsrs	r2, r1
 8009794:	07d6      	lsls	r6, r2, #31
 8009796:	d544      	bpl.n	8009822 <__sflush_r+0xf2>
 8009798:	2200      	movs	r2, #0
 800979a:	6062      	str	r2, [r4, #4]
 800979c:	04d9      	lsls	r1, r3, #19
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	d504      	bpl.n	80097ae <__sflush_r+0x7e>
 80097a4:	1c42      	adds	r2, r0, #1
 80097a6:	d101      	bne.n	80097ac <__sflush_r+0x7c>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b903      	cbnz	r3, 80097ae <__sflush_r+0x7e>
 80097ac:	6560      	str	r0, [r4, #84]	; 0x54
 80097ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097b0:	602f      	str	r7, [r5, #0]
 80097b2:	2900      	cmp	r1, #0
 80097b4:	d0c9      	beq.n	800974a <__sflush_r+0x1a>
 80097b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ba:	4299      	cmp	r1, r3
 80097bc:	d002      	beq.n	80097c4 <__sflush_r+0x94>
 80097be:	4628      	mov	r0, r5
 80097c0:	f7ff fdda 	bl	8009378 <_free_r>
 80097c4:	2000      	movs	r0, #0
 80097c6:	6360      	str	r0, [r4, #52]	; 0x34
 80097c8:	e7c0      	b.n	800974c <__sflush_r+0x1c>
 80097ca:	2301      	movs	r3, #1
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b0      	blx	r6
 80097d0:	1c41      	adds	r1, r0, #1
 80097d2:	d1c8      	bne.n	8009766 <__sflush_r+0x36>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0c5      	beq.n	8009766 <__sflush_r+0x36>
 80097da:	2b1d      	cmp	r3, #29
 80097dc:	d001      	beq.n	80097e2 <__sflush_r+0xb2>
 80097de:	2b16      	cmp	r3, #22
 80097e0:	d101      	bne.n	80097e6 <__sflush_r+0xb6>
 80097e2:	602f      	str	r7, [r5, #0]
 80097e4:	e7b1      	b.n	800974a <__sflush_r+0x1a>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	e7ad      	b.n	800974c <__sflush_r+0x1c>
 80097f0:	690f      	ldr	r7, [r1, #16]
 80097f2:	2f00      	cmp	r7, #0
 80097f4:	d0a9      	beq.n	800974a <__sflush_r+0x1a>
 80097f6:	0793      	lsls	r3, r2, #30
 80097f8:	680e      	ldr	r6, [r1, #0]
 80097fa:	bf08      	it	eq
 80097fc:	694b      	ldreq	r3, [r1, #20]
 80097fe:	600f      	str	r7, [r1, #0]
 8009800:	bf18      	it	ne
 8009802:	2300      	movne	r3, #0
 8009804:	eba6 0807 	sub.w	r8, r6, r7
 8009808:	608b      	str	r3, [r1, #8]
 800980a:	f1b8 0f00 	cmp.w	r8, #0
 800980e:	dd9c      	ble.n	800974a <__sflush_r+0x1a>
 8009810:	4643      	mov	r3, r8
 8009812:	463a      	mov	r2, r7
 8009814:	6a21      	ldr	r1, [r4, #32]
 8009816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009818:	4628      	mov	r0, r5
 800981a:	47b0      	blx	r6
 800981c:	2800      	cmp	r0, #0
 800981e:	dc06      	bgt.n	800982e <__sflush_r+0xfe>
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e78e      	b.n	800974c <__sflush_r+0x1c>
 800982e:	4407      	add	r7, r0
 8009830:	eba8 0800 	sub.w	r8, r8, r0
 8009834:	e7e9      	b.n	800980a <__sflush_r+0xda>
 8009836:	bf00      	nop
 8009838:	20400001 	.word	0x20400001

0800983c <_fflush_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	690b      	ldr	r3, [r1, #16]
 8009840:	4605      	mov	r5, r0
 8009842:	460c      	mov	r4, r1
 8009844:	b1db      	cbz	r3, 800987e <_fflush_r+0x42>
 8009846:	b118      	cbz	r0, 8009850 <_fflush_r+0x14>
 8009848:	6983      	ldr	r3, [r0, #24]
 800984a:	b90b      	cbnz	r3, 8009850 <_fflush_r+0x14>
 800984c:	f000 f860 	bl	8009910 <__sinit>
 8009850:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <_fflush_r+0x48>)
 8009852:	429c      	cmp	r4, r3
 8009854:	d109      	bne.n	800986a <_fflush_r+0x2e>
 8009856:	686c      	ldr	r4, [r5, #4]
 8009858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985c:	b17b      	cbz	r3, 800987e <_fflush_r+0x42>
 800985e:	4621      	mov	r1, r4
 8009860:	4628      	mov	r0, r5
 8009862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009866:	f7ff bf63 	b.w	8009730 <__sflush_r>
 800986a:	4b07      	ldr	r3, [pc, #28]	; (8009888 <_fflush_r+0x4c>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d101      	bne.n	8009874 <_fflush_r+0x38>
 8009870:	68ac      	ldr	r4, [r5, #8]
 8009872:	e7f1      	b.n	8009858 <_fflush_r+0x1c>
 8009874:	4b05      	ldr	r3, [pc, #20]	; (800988c <_fflush_r+0x50>)
 8009876:	429c      	cmp	r4, r3
 8009878:	bf08      	it	eq
 800987a:	68ec      	ldreq	r4, [r5, #12]
 800987c:	e7ec      	b.n	8009858 <_fflush_r+0x1c>
 800987e:	2000      	movs	r0, #0
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	bf00      	nop
 8009884:	08009ef4 	.word	0x08009ef4
 8009888:	08009f14 	.word	0x08009f14
 800988c:	08009ed4 	.word	0x08009ed4

08009890 <std>:
 8009890:	2300      	movs	r3, #0
 8009892:	b510      	push	{r4, lr}
 8009894:	4604      	mov	r4, r0
 8009896:	e9c0 3300 	strd	r3, r3, [r0]
 800989a:	6083      	str	r3, [r0, #8]
 800989c:	8181      	strh	r1, [r0, #12]
 800989e:	6643      	str	r3, [r0, #100]	; 0x64
 80098a0:	81c2      	strh	r2, [r0, #14]
 80098a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098a6:	6183      	str	r3, [r0, #24]
 80098a8:	4619      	mov	r1, r3
 80098aa:	2208      	movs	r2, #8
 80098ac:	305c      	adds	r0, #92	; 0x5c
 80098ae:	f7ff fd5a 	bl	8009366 <memset>
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <std+0x38>)
 80098b4:	6263      	str	r3, [r4, #36]	; 0x24
 80098b6:	4b05      	ldr	r3, [pc, #20]	; (80098cc <std+0x3c>)
 80098b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <std+0x40>)
 80098bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <std+0x44>)
 80098c0:	6224      	str	r4, [r4, #32]
 80098c2:	6323      	str	r3, [r4, #48]	; 0x30
 80098c4:	bd10      	pop	{r4, pc}
 80098c6:	bf00      	nop
 80098c8:	08009af1 	.word	0x08009af1
 80098cc:	08009b13 	.word	0x08009b13
 80098d0:	08009b4b 	.word	0x08009b4b
 80098d4:	08009b6f 	.word	0x08009b6f

080098d8 <_cleanup_r>:
 80098d8:	4901      	ldr	r1, [pc, #4]	; (80098e0 <_cleanup_r+0x8>)
 80098da:	f000 b885 	b.w	80099e8 <_fwalk_reent>
 80098de:	bf00      	nop
 80098e0:	0800983d 	.word	0x0800983d

080098e4 <__sfmoreglue>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	1e4a      	subs	r2, r1, #1
 80098e8:	2568      	movs	r5, #104	; 0x68
 80098ea:	4355      	muls	r5, r2
 80098ec:	460e      	mov	r6, r1
 80098ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098f2:	f7ff fd8f 	bl	8009414 <_malloc_r>
 80098f6:	4604      	mov	r4, r0
 80098f8:	b140      	cbz	r0, 800990c <__sfmoreglue+0x28>
 80098fa:	2100      	movs	r1, #0
 80098fc:	e9c0 1600 	strd	r1, r6, [r0]
 8009900:	300c      	adds	r0, #12
 8009902:	60a0      	str	r0, [r4, #8]
 8009904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009908:	f7ff fd2d 	bl	8009366 <memset>
 800990c:	4620      	mov	r0, r4
 800990e:	bd70      	pop	{r4, r5, r6, pc}

08009910 <__sinit>:
 8009910:	6983      	ldr	r3, [r0, #24]
 8009912:	b510      	push	{r4, lr}
 8009914:	4604      	mov	r4, r0
 8009916:	bb33      	cbnz	r3, 8009966 <__sinit+0x56>
 8009918:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800991c:	6503      	str	r3, [r0, #80]	; 0x50
 800991e:	4b12      	ldr	r3, [pc, #72]	; (8009968 <__sinit+0x58>)
 8009920:	4a12      	ldr	r2, [pc, #72]	; (800996c <__sinit+0x5c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6282      	str	r2, [r0, #40]	; 0x28
 8009926:	4298      	cmp	r0, r3
 8009928:	bf04      	itt	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	6183      	streq	r3, [r0, #24]
 800992e:	f000 f81f 	bl	8009970 <__sfp>
 8009932:	6060      	str	r0, [r4, #4]
 8009934:	4620      	mov	r0, r4
 8009936:	f000 f81b 	bl	8009970 <__sfp>
 800993a:	60a0      	str	r0, [r4, #8]
 800993c:	4620      	mov	r0, r4
 800993e:	f000 f817 	bl	8009970 <__sfp>
 8009942:	2200      	movs	r2, #0
 8009944:	60e0      	str	r0, [r4, #12]
 8009946:	2104      	movs	r1, #4
 8009948:	6860      	ldr	r0, [r4, #4]
 800994a:	f7ff ffa1 	bl	8009890 <std>
 800994e:	2201      	movs	r2, #1
 8009950:	2109      	movs	r1, #9
 8009952:	68a0      	ldr	r0, [r4, #8]
 8009954:	f7ff ff9c 	bl	8009890 <std>
 8009958:	2202      	movs	r2, #2
 800995a:	2112      	movs	r1, #18
 800995c:	68e0      	ldr	r0, [r4, #12]
 800995e:	f7ff ff97 	bl	8009890 <std>
 8009962:	2301      	movs	r3, #1
 8009964:	61a3      	str	r3, [r4, #24]
 8009966:	bd10      	pop	{r4, pc}
 8009968:	08009ed0 	.word	0x08009ed0
 800996c:	080098d9 	.word	0x080098d9

08009970 <__sfp>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	4b1b      	ldr	r3, [pc, #108]	; (80099e0 <__sfp+0x70>)
 8009974:	681e      	ldr	r6, [r3, #0]
 8009976:	69b3      	ldr	r3, [r6, #24]
 8009978:	4607      	mov	r7, r0
 800997a:	b913      	cbnz	r3, 8009982 <__sfp+0x12>
 800997c:	4630      	mov	r0, r6
 800997e:	f7ff ffc7 	bl	8009910 <__sinit>
 8009982:	3648      	adds	r6, #72	; 0x48
 8009984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	d503      	bpl.n	8009994 <__sfp+0x24>
 800998c:	6833      	ldr	r3, [r6, #0]
 800998e:	b133      	cbz	r3, 800999e <__sfp+0x2e>
 8009990:	6836      	ldr	r6, [r6, #0]
 8009992:	e7f7      	b.n	8009984 <__sfp+0x14>
 8009994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009998:	b16d      	cbz	r5, 80099b6 <__sfp+0x46>
 800999a:	3468      	adds	r4, #104	; 0x68
 800999c:	e7f4      	b.n	8009988 <__sfp+0x18>
 800999e:	2104      	movs	r1, #4
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff ff9f 	bl	80098e4 <__sfmoreglue>
 80099a6:	6030      	str	r0, [r6, #0]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1f1      	bne.n	8009990 <__sfp+0x20>
 80099ac:	230c      	movs	r3, #12
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	4604      	mov	r4, r0
 80099b2:	4620      	mov	r0, r4
 80099b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <__sfp+0x74>)
 80099b8:	6665      	str	r5, [r4, #100]	; 0x64
 80099ba:	e9c4 5500 	strd	r5, r5, [r4]
 80099be:	60a5      	str	r5, [r4, #8]
 80099c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80099c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80099c8:	2208      	movs	r2, #8
 80099ca:	4629      	mov	r1, r5
 80099cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099d0:	f7ff fcc9 	bl	8009366 <memset>
 80099d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099dc:	e7e9      	b.n	80099b2 <__sfp+0x42>
 80099de:	bf00      	nop
 80099e0:	08009ed0 	.word	0x08009ed0
 80099e4:	ffff0001 	.word	0xffff0001

080099e8 <_fwalk_reent>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	4680      	mov	r8, r0
 80099ee:	4689      	mov	r9, r1
 80099f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099f4:	2600      	movs	r6, #0
 80099f6:	b914      	cbnz	r4, 80099fe <_fwalk_reent+0x16>
 80099f8:	4630      	mov	r0, r6
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009a02:	3f01      	subs	r7, #1
 8009a04:	d501      	bpl.n	8009a0a <_fwalk_reent+0x22>
 8009a06:	6824      	ldr	r4, [r4, #0]
 8009a08:	e7f5      	b.n	80099f6 <_fwalk_reent+0xe>
 8009a0a:	89ab      	ldrh	r3, [r5, #12]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d907      	bls.n	8009a20 <_fwalk_reent+0x38>
 8009a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a14:	3301      	adds	r3, #1
 8009a16:	d003      	beq.n	8009a20 <_fwalk_reent+0x38>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	47c8      	blx	r9
 8009a1e:	4306      	orrs	r6, r0
 8009a20:	3568      	adds	r5, #104	; 0x68
 8009a22:	e7ee      	b.n	8009a02 <_fwalk_reent+0x1a>

08009a24 <__swhatbuf_r>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	460e      	mov	r6, r1
 8009a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	b096      	sub	sp, #88	; 0x58
 8009a30:	4614      	mov	r4, r2
 8009a32:	461d      	mov	r5, r3
 8009a34:	da07      	bge.n	8009a46 <__swhatbuf_r+0x22>
 8009a36:	2300      	movs	r3, #0
 8009a38:	602b      	str	r3, [r5, #0]
 8009a3a:	89b3      	ldrh	r3, [r6, #12]
 8009a3c:	061a      	lsls	r2, r3, #24
 8009a3e:	d410      	bmi.n	8009a62 <__swhatbuf_r+0x3e>
 8009a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a44:	e00e      	b.n	8009a64 <__swhatbuf_r+0x40>
 8009a46:	466a      	mov	r2, sp
 8009a48:	f000 f8b8 	bl	8009bbc <_fstat_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	dbf2      	blt.n	8009a36 <__swhatbuf_r+0x12>
 8009a50:	9a01      	ldr	r2, [sp, #4]
 8009a52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a5a:	425a      	negs	r2, r3
 8009a5c:	415a      	adcs	r2, r3
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	e7ee      	b.n	8009a40 <__swhatbuf_r+0x1c>
 8009a62:	2340      	movs	r3, #64	; 0x40
 8009a64:	2000      	movs	r0, #0
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	b016      	add	sp, #88	; 0x58
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}

08009a6c <__smakebuf_r>:
 8009a6c:	898b      	ldrh	r3, [r1, #12]
 8009a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a70:	079d      	lsls	r5, r3, #30
 8009a72:	4606      	mov	r6, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	d507      	bpl.n	8009a88 <__smakebuf_r+0x1c>
 8009a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	2301      	movs	r3, #1
 8009a82:	6163      	str	r3, [r4, #20]
 8009a84:	b002      	add	sp, #8
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	ab01      	add	r3, sp, #4
 8009a8a:	466a      	mov	r2, sp
 8009a8c:	f7ff ffca 	bl	8009a24 <__swhatbuf_r>
 8009a90:	9900      	ldr	r1, [sp, #0]
 8009a92:	4605      	mov	r5, r0
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff fcbd 	bl	8009414 <_malloc_r>
 8009a9a:	b948      	cbnz	r0, 8009ab0 <__smakebuf_r+0x44>
 8009a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa0:	059a      	lsls	r2, r3, #22
 8009aa2:	d4ef      	bmi.n	8009a84 <__smakebuf_r+0x18>
 8009aa4:	f023 0303 	bic.w	r3, r3, #3
 8009aa8:	f043 0302 	orr.w	r3, r3, #2
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	e7e3      	b.n	8009a78 <__smakebuf_r+0xc>
 8009ab0:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <__smakebuf_r+0x7c>)
 8009ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	6020      	str	r0, [r4, #0]
 8009ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	9b00      	ldr	r3, [sp, #0]
 8009ac0:	6163      	str	r3, [r4, #20]
 8009ac2:	9b01      	ldr	r3, [sp, #4]
 8009ac4:	6120      	str	r0, [r4, #16]
 8009ac6:	b15b      	cbz	r3, 8009ae0 <__smakebuf_r+0x74>
 8009ac8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 f887 	bl	8009be0 <_isatty_r>
 8009ad2:	b128      	cbz	r0, 8009ae0 <__smakebuf_r+0x74>
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	f043 0301 	orr.w	r3, r3, #1
 8009ade:	81a3      	strh	r3, [r4, #12]
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	431d      	orrs	r5, r3
 8009ae4:	81a5      	strh	r5, [r4, #12]
 8009ae6:	e7cd      	b.n	8009a84 <__smakebuf_r+0x18>
 8009ae8:	080098d9 	.word	0x080098d9

08009aec <__malloc_lock>:
 8009aec:	4770      	bx	lr

08009aee <__malloc_unlock>:
 8009aee:	4770      	bx	lr

08009af0 <__sread>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	460c      	mov	r4, r1
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	f000 f894 	bl	8009c24 <_read_r>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	bfab      	itete	ge
 8009b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b02:	89a3      	ldrhlt	r3, [r4, #12]
 8009b04:	181b      	addge	r3, r3, r0
 8009b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b0a:	bfac      	ite	ge
 8009b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b0e:	81a3      	strhlt	r3, [r4, #12]
 8009b10:	bd10      	pop	{r4, pc}

08009b12 <__swrite>:
 8009b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	461f      	mov	r7, r3
 8009b18:	898b      	ldrh	r3, [r1, #12]
 8009b1a:	05db      	lsls	r3, r3, #23
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	4616      	mov	r6, r2
 8009b22:	d505      	bpl.n	8009b30 <__swrite+0x1e>
 8009b24:	2302      	movs	r3, #2
 8009b26:	2200      	movs	r2, #0
 8009b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2c:	f000 f868 	bl	8009c00 <_lseek_r>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3a:	81a3      	strh	r3, [r4, #12]
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	4628      	mov	r0, r5
 8009b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b46:	f000 b817 	b.w	8009b78 <_write_r>

08009b4a <__sseek>:
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b52:	f000 f855 	bl	8009c00 <_lseek_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	bf15      	itete	ne
 8009b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b66:	81a3      	strheq	r3, [r4, #12]
 8009b68:	bf18      	it	ne
 8009b6a:	81a3      	strhne	r3, [r4, #12]
 8009b6c:	bd10      	pop	{r4, pc}

08009b6e <__sclose>:
 8009b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b72:	f000 b813 	b.w	8009b9c <_close_r>
	...

08009b78 <_write_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4c07      	ldr	r4, [pc, #28]	; (8009b98 <_write_r+0x20>)
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	4608      	mov	r0, r1
 8009b80:	4611      	mov	r1, r2
 8009b82:	2200      	movs	r2, #0
 8009b84:	6022      	str	r2, [r4, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f7ff f9b5 	bl	8008ef6 <_write>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_write_r+0x1e>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_write_r+0x1e>
 8009b94:	602b      	str	r3, [r5, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20004664 	.word	0x20004664

08009b9c <_close_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4c06      	ldr	r4, [pc, #24]	; (8009bb8 <_close_r+0x1c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	f7ff f9c1 	bl	8008f2e <_close>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_close_r+0x1a>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_close_r+0x1a>
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20004664 	.word	0x20004664

08009bbc <_fstat_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4c07      	ldr	r4, [pc, #28]	; (8009bdc <_fstat_r+0x20>)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	f7ff f9bc 	bl	8008f46 <_fstat>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d102      	bne.n	8009bd8 <_fstat_r+0x1c>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	b103      	cbz	r3, 8009bd8 <_fstat_r+0x1c>
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	bd38      	pop	{r3, r4, r5, pc}
 8009bda:	bf00      	nop
 8009bdc:	20004664 	.word	0x20004664

08009be0 <_isatty_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4c06      	ldr	r4, [pc, #24]	; (8009bfc <_isatty_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4605      	mov	r5, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	f7ff f9bb 	bl	8008f66 <_isatty>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_isatty_r+0x1a>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_isatty_r+0x1a>
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	20004664 	.word	0x20004664

08009c00 <_lseek_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4c07      	ldr	r4, [pc, #28]	; (8009c20 <_lseek_r+0x20>)
 8009c04:	4605      	mov	r5, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	6022      	str	r2, [r4, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7ff f9b4 	bl	8008f7c <_lseek>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_lseek_r+0x1e>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_lseek_r+0x1e>
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20004664 	.word	0x20004664

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4c07      	ldr	r4, [pc, #28]	; (8009c44 <_read_r+0x20>)
 8009c28:	4605      	mov	r5, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7ff f942 	bl	8008ebc <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20004664 	.word	0x20004664

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
